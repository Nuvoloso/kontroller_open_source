# Copyright 2019 Tad Lebeck
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


---
swagger: "2.0"

info:
  title: Nuvoloso API
  version: "1.1.1"
  description: |-
    The Nuvoloso API is used to manage storage with Service Level Objectives.

    Copyright Â© 2019 Nuvoloso, All Rights Reserved
  contact:
    name: The Nuvoloso Team
    url: https://www.nuvoloso.com/
    email: nobody@nuvoloso.com

basePath: /api/v1

consumes:
- application/json

produces:
- application/json

schemes:
- http
- https

tags:
  - name: account
    description: |
      An Account object defines the context within which most other objects are managed.
      Multiple Users can be associated with each account, and each such user has a specific Role within the
      context of that account.

      The Account object's **protectionDomains** property is a map that specifies which
      [ProtectionDomain](#tag/protectionDomain) object is to be used
      to secure data in each [protection store](#tag/protectionStore) used.
      It is necessary to establish these relationships prior to mounting
      [VolumeSeries](#tag/volumeSeries) in [Clusters](#tag/cluster) associated with these protection stores.
      A default association may be established for all protection stores, with individual customization as desired.
      The [accountProtectionDomainSet](#operation/accountProtectionDomainSet) and [accountProtectionDomainClear](#operation/accountProtectionDomainClear) methods
      are used to manipulate the **protectionDomains** map.

      The **snapshotCatalogPolicy** property of the Account object may be set to establish a
      location where snapshot metadata of this account should be saved.
      If this account is a **Tenant Account** then this policy will also apply to the subordinate accounts.
      When unset, the policy is inherited from the [System](#tag/system) object; however,
      if the system administrator choses to not set this policy in the [System](#tag/system) object then
      account administrators are required to set the policy in their Account objects, subject to its rules
      of inheritance.
      Once set in an Account object, this policy may not be cleared unless an effective value is inherited.
      **It is the responsibility of the account administrator to remember the history of values set for the policy
      as they will be needed for recovery if the system configuration database is ever lost.**
      This includes the [protection store](#tag/protectionStore) location and bucket name, and
      the ProtectionDomain object identifier, algorithm and passphrase.

      The identity of the Account object used must be known in cluster operations.
      This is accomplished by creating well defined cluster type specific "secret" objects where necessary.
      For example, with Kubernetes, one such a secret object is required in each PhysicalVolumeClaim (PVC) namespace where
      that PVC references a Nuvoloso volume.
      The cluster type specific secret object can be downloaded with the [clusterAccountSecretFetch](#operation/clusterAccountSecretFetch)
      operation of the concerned [Cluster](#tag/cluster) object.
      It is subject to usage policies set on the [Cluster](#tag/cluster) object.

      There is a reserved account named **System** (not to be confused with the [System](#tag/system) object)
      which is used for administrative activities.
      It is initialized to grant the [System Admin role](#tag/role/systemAdmin) to the built-in user named **admin**.

      The *snapshotManagementPolicy* and *vsrManagementPolicy* properties can individually be inherited from the corresponding property
      of the same name in the [System](#tag/system) object by setting their *inherited* field values to "true"
      (other fields within that policy property will be ignored when this is done).
      Otherwise the policies property fields must be set in this object itself.

      **Access Control**: The [manageSpecialAccounts capability](#tag/capability/manageSpecialAccounts) conveys the ability to create and manage tenant accounts.
      The [manageNormalAccounts capability](#tag/capability/manageNormalAccounts) conveys the ability to create and manage subordinate accounts;
      the *tenantAccountId* must be that of the tenant account on creation.
      The [accountUpdate capability](#tag/capability/accountUpdate) is required to update an account where the user has a role.
      Accounts can also be fetched when a user has the [accountFetchAllRoles capability](#tag/capability/accountFetchAllRoles)
      or [accountFetchOwnRole capability](#tag/capability/accountFetchOwnRole),
      but the latter only allows the user to view their own role. A user with a role only in a subordinate account can also
      fetch their tenant account. The *userRoles* will not be returned in this case.

      **CRUD event scope map properties** (see [Watchers](#tag/watchers))
      | Property | Notes |
      |----------|-------------|
      | *meta.id* | On creation only |

  - name: applicationGroup
    description: |
      An ApplicationGroup object represents a collection of [ConsistencyGroup](#tag/consistencyGroup) objects associated with
      a single application. An ApplicationGroup can be used to monitor its member ConsistencyGroup objects.

      An ApplicationGroup object is defined in the context of an [Account](#tag/account) object, and its name must be
      unique within that context.

      **Access Control**: The [volumeSeriesOwner capability](#tag/capability/volumeSeriesOwner) is required to create and manage
      ApplicationGroup objects owned by that accountId. The [volumeSeriesFetch capability](#tag/capability/volumeSeriesFetch) allows
      ApplicationGroup objects with the *tenantAccountId* set to that tenant's *accountId* to be fetched.
      On creation, the *accountId* and *tenantAccountId* properties are automatically set based on the authentication
      information (see [User](#tag/user)).

  - name: auditLog
    description: |
      The Audit Log tracks significant operations, changes or errors that occur in the Nuvoloso System.

      The records in the Audit Log have different classifications.
      There are true audit records that track authorization and security changes and errors.
      Event records record other significant changes or errors, such as nodes being added or removed from a cluster.
      Finally, Annotations allow an administrator to record actions taken related to audit or event records.

      **Access Control**: The [manageSpecialAccounts capability](#tag/capability/manageSpecialAccounts) conveys the ability to list records of the System account or any tenant admin account.
      The [manageNormalAccounts capability](#tag/capability/manageNormalAccounts) conveys the ability to list records with a matching *tenantAccountId*.
      The [accountFetchAllRoles capability](#tag/capability/accountFetchAllRoles) conveys the ability to list records with a matching *accountId*.
      Any user may list records whose *userId* matches that user.
      All related records as defined by the [auditLogList](#operation/auditLogList) operation can also be listed, regardless of identity.
      The [auditLogAnnotate capability](#tag/capability/auditLogAnnotate) conveys the ability to create annotation records.

  - name: capability
    description: |
      A Capability is a **named boolean property** that, if true, grants the holder the authority to perform some task or operation.

      Capabilities are specified in [Role](#tag/role) objects.
      They are evaluated for each REST API operation based on the authenticated [User](#tag/user) and the [Role](#tag/role) of that user in the [Account](#tag/account) specified in the authentication headers.

      The following capabilities are defined:
      | Name | Description |
      |----------|-------------|
      | <p id="tag/capability/accountFetchAllRoles">accountFetchAllRoles</p> | Fetch account objects where the authenticated user has an enabled role. It also conveys the right view all entries in the *userRoles*. |
      | <p id="tag/capability/accountFetchOwnRole">accountFetchOwnRole</p>  | Fetch accounts where the user has an enabled role and only their own role is visible. |
      | <p id="tag/capability/accountUpdate">accountUpdate</p> | Update accounts where this capability is part of the user role. |
      | <p id="tag/capability/auditLogAnnotate">auditLogAnnotate</p>     | Create [AuditLogRecord](#tag/auditLog) objects with "annotation" *classification* for the account of the user or any subordinate account. |
      | <p id="tag/capability/cspDomainManagement">cspDomainManagement</p> | Create and manage domain-related objects [CSPDomain](#tag/cspDomain), [Cluster](#tag/cluster), [ServicePlanAllocation](#tag/servicePlanAllocation), etc. owned by the account of the user. |
      | <p id="tag/capability/cspDomainUsage">cspDomainUsage</p> | Use existing domain-related objects [CSPDomain](#tag/cspDomain), [Cluster](#tag/cluster), [ServicePlan](#tag/servicePlan), etc. where the account of the user is on the authorized list. |
      | <p id="tag/capability/manageNormalAccounts">manageNormalAccounts</p> | Create and manage normal accounts that are subordinate to the account of the user. |
      | <p id="tag/capability/manageSpecialAccounts">manageSpecialAccounts</p> | Manage the System account and create and manage tenant accounts. |
      | <p id="tag/capability/protectionDomainManagement">protectionDomainManagement</p> | Create and manage the [ProtectionDomain](#tag/protectionDomain) objects of an account. |
      | <p id="tag/capability/systemManagement">systemManagement</p> | Perform system-wide actions, eg on the [System](#tag/system) object. Also view built-in objects like service plans and roles. |
      | <p id="tag/capability/userManagement">userManagement</p> | Create, list and manage any user object. All users have the capability to manage their own enabled user object. |
      | <p id="tag/capability/volumeSeriesFetch">volumeSeriesFetch</p> | Fetch [VolumeSeries](#tag/volumeSeries), [ApplicationGroup](#tag/applicationGroup) and [ConsistencyGroup](#tag/consistencyGroup) objects owned by the account of the user or any subordinate account. |
      | <p id="tag/capability/volumeSeriesOwner">volumeSeriesOwner</p> | Create and manage [VolumeSeries](#tag/volumeSeries), [ApplicationGroup](#tag/applicationGroup) and [ConsistencyGroup](#tag/consistencyGroup) objects owned by the account of the user. |

      See the description of each object type for more details on the way the capabilities are used to enforce access to objects of that type.

  - name: cluster
    description: |
      A Cluster object represents a managed collection of [Nodes](#tag/node) within the purview of a [CSPDomain](#tag/cspDomain) object.
      For example, a *Kubernetes* cluster running on a collection of *AWS instances in some AWS Zone*.
      The [CSPDomain](#tag/cspDomain) object represents the AWS environment, while "Kubernetes" is the cluster
      orchestration/management software used and is tracked by the **clusterType** property.

      A Cluster object name must be unique within the context of its [CSPDomain](#tag/cspDomain) object.

      A Cluster object contains a **state** property that impacts what operations are permitted and what properties
      may be modified:
      | State | Description |
      |-------------|-------------|
      | DEPLOYABLE | The default state of the Cluster object on creation; the cluster type specific software deployment is available for download; policy information may be re-configured |
      | MANAGED | The cluster is under management; most policy properties are now immutable |
      | TIMED_OUT | Lost contact with the cluster service |
      | RESETTING | The cluster is being recreated; the Cluster object will transition to DEPLOYABLE after associated resources and objects are reset |
      | TEAR_DOWN | The cluster has been destroyed; the Cluster object will be deleted and associated resources and objects cleaned up |

      In the DEPLOYABLE state the
      [clusterOrchestratorGetDeployment](#operation/clusterOrchestratorGetDeployment)
      operation can be used to obtain the cluster orchestrator specific
      deployment configuration necessary to install the Nuvoloso software in
      the cluster.
      One can also use this operation in the MANAGED state in case the cluster
      software deployment is required for any other purpose.

      In the DEPLOYABLE state prior to downloading the deployment
      cluster usage policy properties may be set.
      If any policy property is modified prior to installing the
      Nuvoloso software in the cluster, the deployment should be re-generated.

      Once the Nuvoloso software is successfully installed in the cluster the
      Cluster object will transition from the DEPLOYABLE to the MANAGED state.
      In the MANAGED state a Nuvoloso Cluster Controller service runs within the cluster to handle cluster-wide coordination
      and provisioning of [Storage](#tag/storage) objects within the cluster, and
      Nuvoloso Node Controller services run on every node in the cluster to provide volume level access to
      applications running on the node.
      The **clusterUsagePolicy** property controls some aspects of these services
      runtime behavior;
      when the Cluster object is in the MANAGED state those policy properties that
      may not be modified at runtime become immutable.

      The cluster type specific [Account](#tag/account) identification secret object can be downloaded with the
      [clusterAccountSecretFetch](#operation/clusterAccountSecretFetch) operation when in the MANAGED state.
      This is required to authenticate cluster orchestrator specific volume requests.

      The TIMED_OUT state is entered when the management service has lost contact with the Nuvoloso Cluster Controller.
      The state will transition back to MANAGED if contact is re-established.

      If the cluster is inadvertently destroyed and the customer wishes to re-create it, they should create
      a [CLUSTER_RESET VolumeSeriesRequest operation](#tag/volumeSeriesRequest/CLUSTER_RESET)
      to release cluster [Storage](#tag/storage) resources and reset the state of objects associated with the Cluster.
      The operation will transition the Cluster to the DEPLOYABLE state, ready for re-configuration
      with the identity of the new cluster.

      The TEAR_DOWN state is a terminal state that reflects the imminent destruction of the Cluster object.
      The state is entered when a
      [CLUSTER_DELETE VolumeSeriesRequest operation](#tag/volumeSeriesRequest/CLUSTER_DELETE)
      is launched to release resources and delete the Cluster and related objects.

      **Access Control**: The [cspDomainManagement capability](#tag/capability/cspDomainManagement) is required to create and manage Cluster objects.
      The [cspDomainUsage capability](#tag/capability/cspDomainUsage) allows an account that is on the *authorizedAccounts* list
      to fetch and refer to those Cluster objects.
      On creation, the **accountId** property is automatically set to that of the [CSPDomain](#tag/cspDomain) object.

  - name: consistencyGroup
    description: |
      A ConsistencyGroup object represents a collection of [VolumeSeries](#tag/volumeSeries) objects with the same
      data protection policies, such as recovery point objective (RPO). Operations (e.g. creating a snapshot) can be performed
      collectively on all members of a ConsistencyGroup.

      A ConsistencyGroup object is defined in the context of an [Account](#tag/account) object, and its name must be
      unique within that context.

      An [ApplicationGroup](#tag/applicationGroup) can be used to group multiple related ConsistencyGroup objects for
      monitoring purposes; there are no management functions (eg. no snapshot policy) at the application group level.

      The *snapshotManagementPolicy* property can be inherited from the corresponding property
      in the parent [Account](#tag/account) object by setting *inherited* field value to "true"
      (other fields within the policy property will be ignored when this is done).
      Otherwise the policy property fields must be set in this object itself.

      TBD: determine how RPO will be represented.

      **Access Control**: The [volumeSeriesOwner capability](#tag/capability/volumeSeriesOwner) is required to create and manage
      ConsistencyGroup objects owned by that accountId. The [volumeSeriesFetch capability](#tag/capability/volumeSeriesFetch) allows
      ConsistencyGroup objects with the *tenantAccountId* set to that tenant's *accountId* to be fetched.
      On creation, the *accountId* and *tenantAccountId* properties are automatically set based on the authentication
      information (see [User](#tag/user)).

  - name: cspCredential
    description: |
      A CSPCredential object contains authentication information necessary to gain access to the services of a
      Cloud Service Provider of a particular type.

      Use the [cspCredentialMetadata](#operation/cspCredentialMetadata) operation to obtain meta-data on the
      *credentialAttributes* required by a CSPCredential object of a particular type.
      Use the [cspStorageTypeList](#operation/cspStorageTypeList) operation to view the supported cloud
      storage providers.

      The object is referenced by [CSPDomain](#tag/cspDomain) objects and
      modification to the contained *credentialAttributes* is immediately visible to all
      of the referencing [CSPDomain](#tag/cspDomain) objects.

      **Access Control**: The [cspDomainManagement capability](#tag/capability/cspDomainManagement) is required to create and manage CSPCredential objects.
      On creation, the *accountId* property is automatically set based on the authentication
      information (see [User](#tag/user)).

  - name: cspDomain
    description: |
      A CSPDomain object represents some constrained use or scope of a cloud service provider account.
      Within the Nuvoloso System, a CSPDomain object is defined in the context of an [Account](#tag/account) object, and its name must be
      unique within that context.
      There can be multiple CSPDomain objects for a given cloud service provider account.
        - Constraints may come from the CSP vendor itself - for example, as seen with AWS Zones,
          provisioned storage in the scope may not be accessible in a different scope of the same cloud service provider.
        - Constraints may also be purely for management purposes, to restrict this software in some manner.

      [Cluster](#tag/cluster) objects are created within the purview of a CSPDomain object by the Nuvoloso software
      that runs in the cluster.
      The configuration necessary to install the Nuvoloso software in the cluster can be obtained from this
      object once the external hostname for the central Nuvoloso service is known.
      The CSPDomain contains a **clusterUsagePolicy** property that apply to all such
      [Cluster](#tag/cluster) objects unless overridden on a per-object basis.
      The policy is inherited from the [System](#tag/system) object if unset in the CSPDomain object.

      A CSPDomain can provide storage on demand by creating individual [Pool](#tag/pool)
      objects for supported [CSPStorageTypes](#tag/cspStorageType).

      A CSPDomain object must be associated with a [CSPCredential](#tag/cspCredential) object to enable
      access to the provider at runtime.

      Each CSPDomain object must be provisioned with vendor specific attributes that describe the scope of access
      (e.g. an AWS availability zone within a region).
      Use the [cspDomainMetadata](#operation/cspDomainMetadata) operation to obtain meta-data on the
      *cspDomainAttributes* required by a CSPDomain object of a particular type.
      Use the [cspStorageTypeList](#operation/cspStorageTypeList) operation to view the supported cloud
      storage providers.

      A CSPDomain can serve as a [Protection Store](#tag/protectionStore) for [snapshot](#tag/snapshot) and other meta-data
      associated with an [Account](#tag/account).

      **Access Control**: The [cspDomainManagement capability](#tag/capability/cspDomainManagement) is required to create and manage CSPDomain objects.
      The [cspDomainUsage capability](#tag/capability/cspDomainUsage) allows an account that is on the *authorizedAccounts* list
      to fetch and refer to those CSPDomain objects.
      On creation, the *accountId* property is automatically set based on the authentication
      information (see [User](#tag/user)).

  - name: cspStorageType
    description: |
      A CSP storage type describes a supported flavor of storage that may be obtained from a
      storage service of a cloud service provider.
      The name is distinct and serves as an identifier in related [Pool](#tag/pool)
      and [StorageFormula](#tag/storageFormula) objects.
      - [Pool](#tag/pool) objects must be created for specific storage
      types in the context of [CSPDomain](#tag/cspDomain) objects to define how much storage of that
      type can be provisioned within each domain.

      - [StorageFormula](#tag/storageFormula) objects describe their storage needs in terms of these types
      and relate them to [SLOs](#tag/slo). [ServicePlan](#tag/servicePlan) objects relate to storage of such
      type indirectly by matching the [SLOs](#tag/slo) in the plan to the [SLOs](#tag/slo) in
      [StorageFormula](#tag/storageFormula) objects.

      The supported set of storage types is defined at installation and may be extended over time.
      The list of supported pool types indirectly supplies the list of
      supported Cloud Service Providers via the *cspDomainType* property in the returned objects.

      **Access Control**: All authenticated users of the system can list these objects.

  - name: protectionDomain
    description: |
      A ProtectionDomain specifies how an [Account's](#tag/account) data at rest are to be secured in a
      [Protection Store](#tag/protectionStore).
      Such data are typically composed of de-duped [Snapshots](#tag/snapshot) from the [VolumeSeries](#tag/volumeSeries)
      owned by non-administrative [accounts](#tag/account); it also includes other sources such as the catalog meta-data
      archived by the **System account**.

      Securing data at rest is achieved by encrypting the data with a mechanism specified in the ProtectionDomain object.
      At least the following choices are available:
      | EncryptionAlgorithm | Effect |
      |---------------------|--------|
      | NONE    | The data is not encrypted |
      | AES-256 | The data is encrypted using [AES Encryption](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) with a 256 bit key |

      Use the [protectionDomainMetadata](#operation/protectionDomainMetadata) to obtain the list of supported
      algorithms and any related constraints.

      The creator of the ProtectionDomain object is responsible for remembering any encryption passphrase specified.
      It will be required in catastrophic recovery situations for the [account administrator](#tag/role/accountAdmin) to manually recover
      data secured within the ProtectionDomain:
       - The administrators of objects that specify a **snapshotCatalogPolicy** property ([Account](#tag/account) or [System](#tag/system))
         will need their ProtectionDomain object identifier, algorithm and passphrases to recover snapshot metadata
         saved in the [Protection Store](#tag/protectionStore) specified by the policy.
         This data includes the identity, location and ProtectionDomain of [snapshots](#tag/snapshot) of all accounts in the effective scope of the policy.
       - Normal [account administrators](#tag/role/accountAdmin) will need their ProtectionDomain object identifier, algorithm and passphrases to recover [Snapshot](#tag/snapshot) data
         archived and secured in some [Protection Store](#tag/protectionStore) identified to them by the [System Admin](#tag/role/systemAdmin).

      Multiple [Protection Stores](#tag/protectionStore) may be associated with the same ProtectionDomain object for
      a given [Account](#tag/account).
      This mapping is maintained in the **protectionDomains** map property of an [Account](#tag/account)
      object and can be modified over time to support customer security policies.
      The [accountProtectionDomainSet](#operation/accountProtectionDomainSet) and [accountProtectionDomainClear](#operation/accountProtectionDomainClear) methods
      are used to manipulate the **protectionDomains** map.

      A ProtectionDomain object cannot be deleted if there are references to it from:
      - The [Snapshot](#tag/snapshot) objects that it secures
      - The **protectionDomains** map property of the [Account](#tag/account) object that owns it
      - Active [VolumeSeriesRequest](#tag/volumeSeriesRequest) objects that require it

      Protection domain objects have names that must be unique in the context of the
      [Account](#tag/account) object that own them.

      **Access Control**: Only an [account administrator](#tag/role/accountAdmin) can view the ProtectionDomain objects associated with the account. It requires the [protectionDomainManagement](#tag/capability/protectionDomainManagement) capability.

  - name: protectionStore
    description: |
      A protection store is a vendor specific *object store* used to save [Snapshot](#tag/snapshot) and other system meta-data.
      It is represented by the *protection store bucket name* in a [CSPDomain](#tag/cspDomain) object, which encapsulates all the
      necessary vendor specific details required for access to the specified object store bucket.

      [Account](#tag/account) [snapshot](#tag/snapshot) data are saved in the protection store represented by the
      [CSPDomain](#tag/cspDomain) object
      of the [Cluster](#tag/cluster) in which the account [VolumeSeries](#tag/volumeSeries) objects are used.
      Additionally, the effective **snapshotCatalogPolicy** property value of the account identifies a
      protection store where snapshot metadata is saved.
      This is for use in catastrophic recovery situations for the concerned administrator to manually recover the catalog
      of snapshots for the [accounts](#tag/account) in the scope of the **snapshotCatalogPolicy**.

      An [Account](#tag/account) is permitted to use a protection store only by associating it with a
      [ProtectionDomain](#tag/protectionDomain) object that specifies how the account data are secured.
      Data of multiple [Accounts](#tag/account) may be saved in a single protection store but the data are protected by
      different [ProtectionDomain](#tag/protectionDomain) objects owned by the individual accounts.

  - name: serviceDebug
    description: |
      To help debug issues especially in the field, a debug API can cause the service to dump stacks of all goroutines to stdout.
      Then one can capture the log to see what the process is doing.

      **Access Control**: The debug API requires internal role.

  - name: metrics
    description: |
      Metrics data is uploaded periodically to the central management server for analysis.

      **Access Control**: Metrics can only be posted by clients holding a trusted credential.

  - name: node
    description: |
      A Node object represents a host in a [Cluster](#tag/cluster).

      A Nuvoloso Node Controller runs on each node of the cluster.
      Cluster policy properties control some aspects of runtime behavior; they are typically inherited from the
      [CSPDomain](#tag/cspDomain) object but can be overridden if desired at the [Cluster](#tag/cluster) object level.

      A node name must be unique within the context of its [Cluster](#tag/cluster) object.
      Likewise, the internally generated node identifier must be unique within the context
      of the [Cluster](#tag/cluster) object.

      A Node object contains a **state** property that takes the following values:
      | State     | Description |
      |-----------|----------|
      | MANAGED   | The Node is under control of the agentd service on the host; the **service.state** property has details on service state |
      | TIMED_OUT | The Node has lost contact with the agentd service |
      | TEAR_DOWN | The Node is being deleted and associated resources cleaned up |

      **Access Control**: The [cspDomainManagement capability](#tag/capability/cspDomainManagement) is required to create and manage Node objects.
      The [cspDomainUsage capability](#tag/capability/cspDomainUsage) allows an account on the *authorizedAccounts*
      list of the associated [Cluster](#tag/cluster) object to fetch and refer to those Node objects.
      On creation, the *accountId* property is automatically set to that of the [Cluster](#tag/cluster) object.

      **CRUD event scope map properties** (see [Watchers](#tag/watchers))
      | Property | Notes |
      |----------|-------------|
      | clusterId | |
      | *meta.id* | On creation only |
      | state | |
      | *stateChanged* | This is a derived boolean property reflecting a change in state |
      | serviceState | The *serviceState.State* field if available |
      | *serviceStateChanged* | This is a derived boolean property reflecting a change in service state |

      A single event with a pseudo node identifier of "summary-heartbeat" will be posted when one or more Node
      heartbeat data are updated via the consolidated cluster heartbeat task.

  - name: pool
    description: |
      A Pool object is used internally to track [Storage](#tag/storage) of a particular
      [CSPStorageType](#tag/cspStorageType) provisioned for a single authorized [Account](#tag/account)
      in a given [Cluster](#tag/cluster).
      The object is automatically created and deleted as a side effect of
      [ServicePlanAllocation](#tag/servicePlanAllocation) object manipulation.

      Note that the *owner* [Account](#tag/account) of a Pool object is different from the
      [Account](#tag/account) *authorized* by the object.  The former is the tenant administrator
      account and the latter typically a subordinate account.

      **DEPRECATED** The accessibility of a [Storage](#tag/storage) object with respect to a [Node](#tag/node) object is defined by a tuple
      of (*Scope Type*, *Scope Object*) as follows:
      | Scope Type | Scope Object |  Meaning | Example |
      |----------- |--------------|----------|---------|
      | NODE       | [Node](#tag/node) | The storage is only accessible from the specified node host | Physically attached storage |
      | CSPDOMAIN  | [CSPDomain](#tag/cspDomain) | The storage is accessible from any node host in any cluster in the specified CSPDomain | EBS volumes |

      **Access Control**: The [cspDomainManagement capability](#tag/capability/cspDomainManagement) is required to create and manage Pool objects.
      The [cspDomainUsage capability](#tag/capability/cspDomainUsage) allows the account that is the *authorizedAccountId*
      to fetch and refer to those objects.
      On creation, the *accountId* property is automatically set based on the authentication
      information (see [User](#tag/user)).

      **CRUD event scope map properties** (see [Watchers](#tag/watchers))
      | Property | Notes |
      |----------|-------------|
      | cspDomainId ||
      | clusterId ||
      | authorizedAccountId ||
      | *meta.id* | On creation only |

  - name: role
    description: |
      An object that contains a map of [Capabilities](#tag/capability) that can be assigned to a user in the context of an account.
      Each role has a name that is unique among Role objects.

      The roles are currently pre-defined and immutable.
      | Name | Description |
      |----------|-------------|
      | <p id="tag/role/systemAdmin">System Admin</p> | Associated with the built-in System account. This role can create and manage tenant accounts and the system object, as well as [ProtectionDomain](#tag/protectionDomain) objects owned by the **System Account**.  A System Admin has no direct visibility into the storage managed by a tenant. |
      | <p id="tag/role/tenantAdmin">Tenant Admin</p> | Associated with a tenant account. This role can create and manage storage resources such as [CSPDomain](#tag/cspDomain) and [ServicePlanAllocation](#tag/servicePlanAllocation) objects and subordinate accounts. This role can also create and manage their own volume series and [ProtectionDomain](#tag/protectionDomain) objects owned by the account. |
      | <p id="tag/role/accountAdmin">Account Admin</p> | Associated with a subordinate account. In addition to the rights of an **Account User**, users with this role can manage the users (add, remove, etc.) of the account and [ProtectionDomain](#tag/protectionDomain) objects owned by the account. |
      | <p id="tag/role/accountUser">Account User</p> | Associated with a subordinate account. Users with this role have the rights to use resources that a **Tenant Admin** has authorized and can create and manage volume series. |

      All three of the **Admin** roles convey the right to add users to the system.

      **Access Control**: All authenticated users of the system can list these objects.

  - name: servicePlan
    description: |
      A ServicePlan is a pairing of [SLOs](#tag/slo) and IO Profile to support a particular type of workload,
      and must be specified for each [VolumeSeries](#tag/volumeSeries) object.
      A [ServicePlanAllocation](#tag/servicePlanAllocation) object must be created to enable an [Account](#tag/account)
      to create [VolumeSeries](#tag/volumeSeries) of a ServicePlan in a [Cluster](#tag/cluster).
      This is typically done by the [tenant account administrator](#tag/role/tenantAdmin).

      To help the customer successfully deploy the [VolumeSeries](#tag/volumeSeries), the [ServicePlan](#tag/servicePlan)
      has a *provisioningUnit* to express the performance the volume should get for each GiB of capacity
      and a Volume Series Minimum and Maximum Volume Size to set the size boundaries.

      [ServicePlan](#tag/servicePlan) objects relate to [Storage](#tag/storage) indirectly
      by mapping the [SLOs](#tag/slo) in the plan to the SSCs in
      [StorageFormula](#tag/storageFormula) objects and from there to [CSPStorageTypes](#tag/cspStorageType).

      The system is currently installed with a set of pre-defined, immutable ServicePlan objects. Only properties such as the name, accounts and tags can be modified.
      The Nuvoloso administrator can control access to the service plans by choosing which [Accounts](#tag/account) can see and use a ServicePlan to create
      a [VolumeSeries](#tag/VolumeSeries) object.

      A ServicePlan object can be **retired** by the Nuvoloso administrator to ensure that no more
      [VolumeSeries](#tag/volumeSeries) can be provisioned using that plan.
      Existing [VolumeSeries](#tag/volumeSeries) are unaffected.

      While not currently exposed to customers, we do support the creation of new ServicePlans. An administrator can create a new ServicePlan by
      cloning an existing ServicePlan object. The new ServicePlan object can be modified until it is **published**. Until it is published, only
      the Nuvoloso administrator can create [VolumeSeries](#tag/volumeSeries) objects based on that ServicePlan, so they test the ServicePlan
      before exposing it to users. Once it is published, the ServicePlan will be treated the same as the pre-defined ServicePlans.

      **Access Control**: The [systemManagement capability](#tag/capability/systemManagement) and [cspDomainManagement capability](#tag/capability/cspDomainManagement) allow all ServicePlan objects to
      be fetched. In addition, the [cspDomainUsage capability](#tag/capability/cspDomainUsage) allows any account in the **accounts** list to fetch
      that ServicePlan object. The [cspDomainManagement capability](#tag/capability/cspDomainManagement) allows the tenant admin to authorize or remove their
      own account or any subordinate account on the **accounts** list.

  - name: servicePlanAllocation
    description: |
      This defines how much capacity of a given [ServicePlan](#tag/servicePlan) may be used by
      an authorized [Account](#tag/account) in a specific [Cluster](#tag/cluster) of some [CSPDomain](#tag/cspDomain).
      The capacity is consumed by binding [VolumeSeries](#tag/volumeSeries) objects of the authorized
      [Account](#tag/account) to the [Cluster](#tag/cluster).

      Note that the *owner* [Account](#tag/account) of a ServicePlanAllocation object is different from the
      [Account](#tag/account) *authorized* by the object.  The former is the tenant administrator
      account and the latter typically a subordinate account.

      ServicePlanAllocation objects are typically created and updated indirectly using the *ALLOCATE_CAPACITY*
      operation of a [VolumeSeriesRequest](#tag/volumeSeriesRequest) object. They are typically deleted using
      the *DELETE_SPA* operation of a [VolumeSeriesRequest](#tag/volumeSeriesRequest) object.

      A ServicePlanAllocation has state that reflects its ability to provide additional capacity
      for the [VolumeSeries](#tag/volumeSeries) objects owned by the [Account](#tag/account) in the [Cluster](#tag/cluster).

      **Access Control**: The [cspDomainManagement capability](#tag/capability/cspDomainManagement) is required to create and manage ServicePlanAllocation objects.
      The [cspDomainUsage capability](#tag/capability/cspDomainUsage) allows the account that is the *authorizedAccountId*
      to fetch and refer to those ServicePlanAllocation objects.
      On creation, the *accountId* property is automatically set based on the authentication
      information (see [User](#tag/user)).

      **CRUD event scope map properties** (see [Watchers](#tag/watchers))
      | Property | Notes |
      |----------|-------------|
      | authorizedAccountId ||
      | clusterId ||
      | cspDomainId ||
      | *meta.id* | On creation only |
      | reservableCapacityBytes ||
      | servicePlanId ||
      | totalCapacityBytes ||

  - name: slo
    description: |
      A Service Level Objective is a means of expressing and measuring a commitment between
      a consumer and a provider about some service. For example, I/O response time or
      recovery point objective.  SLOs are referenced by [ServicePlan](#tag/servicePlan) objects.

      A read-only set of supported SLOs is pre-loaded and may be extended over time.
      The name of the SLO is distinct and serves as an identifier.

      **Access Control**: All authenticated users of the system can list these objects.

  - name: snapshot
    description: |
      A Snapshot object represents a copy of the data of a [VolumeSeries](#tag/volumeSeries) object
      at a point in time, saved in one or more [protection stores](#tag/protectionStore).

      Snapshots are created periodically for mounted [VolumeSeries](#tag/volumeSeries) objects
      based on the effective snapshot policy on the [VolumeSeries](#tag/volumeSeries) object
      and the RPO of the [ServicePlan](#tag/servicePlan) used.
      The [CSPDomain](#tag/cspDomain) of the [Cluster](#tag/cluster) in which the [VolumeSeries](#tag/volumeSeries) object
      is mounted provides the [*primary protection store*](#tag/protectionStore) for the snapshot data.
      The snapshot may be replicated to other protection stores based on the configured functionality and
      the effective snapshot policy on the [VolumeSeries](#tag/volumeSeries) object.

      Snapshot objects maintain references to [ProtectionDomain](#tag/protectionDomain) objects used to
      secure both the data and the meta-data [protection stores](#tag/protectionStore).
      This prevents the deletion of these objects until the Snapshot is deleted.

      **TBD** Snapshots must pin the System related [ProtectionDomain](#tag/protectionDomain) for the snapshot catalog

      Snapshots are eventually deleted after a period of time determined by
      the effective snapshot policy on the [VolumeSeries](#tag/volumeSeries) object.

      **Access Control**: The [volumeSeriesOwner capability](#tag/capability/volumeSeriesOwner) is required to create and manage
      Snapshot objects owned by that accountId. The [volumeSeriesFetch capability](#tag/capability/volumeSeriesFetch) allows
      Snapshot objects with the *tenantAccountId* set to that tenant's account to be fetched.
      On creation, the *accountId* and *tenantAccountId* properties are automatically set to that
      of the corresponding [VolumeSeries](#tag/volumeSeries) object.

      **CRUD event scope map properties** (see [Watchers](#tag/watchers))
      | Property | Notes |
      |----------|-------------|
      | consistencyGroupId ||
      | locations | Comma separated list of [CSPDomain](#tag/cspDomain) object IDs |
      | *meta.id* | On creation only |
      | snapIdentifier ||
      | volumeSeriesId ||

  - name: storage
    description: |
      A Storage object represents physical storage in a [Cluster](#tag/cluster) within a [CSPDomain](#tag/cspDomain).
      A Storage object may be used to provide physical storage for multiple [VolumeSeries](#tag/volumeSeries) objects
      of the same [Accounts](#tag/account) in the same [Cluster](#tag/cluster).

      A Storage object has a multi-dimensional state:
        - *provisionedState* reflects the availability of the underlying cloud service provider storage beneath the object
        - *attachmentState* reflects the attachment of the underlying cloud service provider storage to a node
        - *deviceState* reflects the use of the storage device on the node to which it is attached
        - *mediaState* reflects the state of the storage media

      The ability to access a Storage object from a [Node](#tag/node) is determined by the value of its *storageAccessibility* property
      which is set from its [Pool](#tag/pool).
      At any given time a Storage object is attached to at most one [Node](#tag/node) object, identified by its *attachedNodeId* property.

      A Storage object has to be formatted before it can be used.  Formatting consumes some of the
      capacity of the underlying storage device.  The total usable capacity after formatting is
      set in **availableBytes** and is equal to (**totalParcelCount** * **parcelSizeBytes**);
      capacity is always consumed in quanta of **parcelSizeBytes** and is available as long as
      (**availableBytes** >= **parcelSizeBytes**).

      A Storage object may serve capacity to multiple [VolumeSeries](#tag/volumeSeries) objects
      concurrently or may be constrained to just one [VolumeSeries](#tag/volumeSeries) object
      at a time. This is indicated by the value of its **shareableStorage** property.

      **Access Control**: The [cspDomainUsage capability](#tag/capability/cspDomainUsage) is required to create and manage
      Storage objects owned by that accountId. The [cspDomainManagement capability](#tag/capability/cspDomainManagement) allows
      Storage objects with the *tenantAccountId* set to that tenant's account to be fetched.
      The [systemManagement capability](#tag/capability/systemManagement) also conveys the ability to fetch Storage objects and receive events about them.
      On creation, the *accountId* and *tenantAccountId* properties are automatically set based on the authentication
      information (see [User](#tag/user)).
      In addition, the [Pool](#tag/pool) object referenced must be authorized to the account creating the Storage object.

  - name: storageFormula
    description: |
      A StorageFormula object describes a mix of different storage components that can be used
      to deliver a set of SSCs.  The storage components are identified through
      a map keyed on [CSPStorageTypes](#tag/cspStorageType) and described in terms of
      the percentage composition required in order to achieve the SSC claims of the object.

      The name of a StorageFormula must be unique among StorageFormula objects.

      The StorageFormula does not apply to the Protection Store.

      **Access Control**: All authenticated users of the system can list these objects.

  - name: storageRequest
    description: |
      A StorageRequest object is a request to perform one or more of the following operations:
      | Operation | Description |
      |-----------|-------------|
      |[ATTACH](#tag/storageRequest/ATTACH)       |Attach a [Storage](#tag/storage) object to a [Node](#tag/node).|
      |[CLOSE](#tag/storageRequest/CLOSE)         |Tell the data management layer to stop using a [Storage](#tag/storage) object currently in use on a node. |
      |[DETACH](#tag/storageRequest/DETACH)       |Detach a [Storage](#tag/storage) object from the [Node](#tag/node) to which it is currently attached.|
      |[FORMAT](#tag/storageRequest/FORMAT)       |Format the media of an attached [Storage](#tag/storage) object for use by the data management layer. |
      |[PROVISION](#tag/storageRequest/PROVISION) |Obtain physical storage from a [Pool](#tag/pool), resulting in the creation of a new [Storage](#tag/storage) object for use in a [Cluster](#tag/cluster).|
      |[REATTACH](#tag/storageRequest/REATTACH)   |Use a [Storage](#tag/storage) object on another [Node](#tag/node) in the same [Cluster](#tag/cluster).|
      |[RELEASE](#tag/storageRequest/RELEASE)     |Release a [Storage](#tag/storage) object.|
      |[USE](#tag/storageRequest/USE)             |Tell the data management layer to use a [Storage](#tag/storage) object that is attached to a node. |

      Multiple operations may be requested provided that they are all part of one of the following valid operation sequences.
      If multiple operations are requested they will be carried out in their sequence order:
      - [PROVISION](#tag/storageRequest/PROVISION), [ATTACH](#tag/storageRequest/ATTACH), [FORMAT](#tag/storageRequest/FORMAT), [USE](#tag/storageRequest/USE)
      - [CLOSE](#tag/storageRequest/CLOSE), [DETACH](#tag/storageRequest/DETACH), [RELEASE](#tag/storageRequest/RELEASE)
      - [REATTACH](#tag/storageRequest/REATTACH)

      <h4 id="tag/storageRequest/PROVISION">PROVISION</h4>
      A PROVISION operation requires the following property values:
      | Property             | Description |
      |----------------------|-------------|
      | poolId               | The desired pool which indirectly identifies the cluster |
      | minSizeBytes         | The desired size |
      | completeByTime       | Timeout value |

      A PROVISION operation involves the following:
      - The operation may have to wait for the specified [Pool](#tag/pool) to have sufficient capacity.
      - Obtaining a new [Storage](#tag/storage) object from the target [Pool](#tag/pool).
        The *storageId* property will be set to identify the new [Storage](#tag/storage) object once physical
        storage has been allocated.
        The *clusterId* property will be set to the [Cluster](#tag/cluster) identifier from the [Pool](#tag/pool).

      The [Storage](#tag/storage) object *storageState* property's *provisionedState* is set to *PROVISIONED* on completion.

      <h4 id="tag/storageRequest/ATTACH">ATTACH</h4>
      An ATTACH operation requires the following property values:
      | Property        |  Description|
      |-----------------|-------------|
      | storageId       | Identifies the [Storage](#tag/storage) object |
      | nodeId          | Identifies the [Node](#tag/node) object |
      | completeByTime  | Timeout value |

      An ATTACH operation involves the following:
      - Determining the [Pool](#tag/pool) for the [Storage](#tag/storage) object.
      - Using the [Pool](#tag/pool) to attach the [Storage](#tag/storage) object to the specified [Node](#tag/node).

      The [Storage](#tag/storage) object *storageState* property's *attachedNodeId* and *attachedNodeDevice* fields
      are set on completion and the *attachmentState* is set to *ATTACHED*.

      <h4 id="tag/storageRequest/DETACH">DETACH</h4>
      A DETACH operation requires the following property values:
      | Property        | Description|
      |-----------------|------------|
      | storageId       | Identifies the [Storage](#tag/storage) object |
      | systemTags      | Optional: set the __sr.forceDetachNodeID__ tag with value the attached [Node](#tag/node) identifier to forcibly detach the [Storage](#tag/storage) object |
      | completeByTime  | Timeout value |

      A DETACH operation involves the following:
      - Determining the [Node](#tag/node) object from the *storageState.attachedNodeId* property of the [Storage](#tag/storage) object.
      - Determining the [Pool](#tag/pool) for the [Storage](#tag/storage) object.
      - Using the [Pool](#tag/pool) to detach the [Storage](#tag/storage) object.

      The [Storage](#tag/storage) object *storageState* property's *attachedNodeId* and *attachedNodeDevice* fields
      are cleared on completion and the *attachmentState* is set to *DETACHED*.

      <h4 id="tag/storageRequest/RELEASE">RELEASE</h4>
      A RELEASE operation requires the following property values:
      | Property        | Description|
      |-----------------|------------|
      | storageId       | Identifies the [Storage](#tag/storage) object |
      | completeByTime  | Timeout value |

      A RELEASE operation involves the following:
      - Determining if the [Storage](#tag/storage) object is still in use.
      - Determining the [Pool](#tag/pool) for the [Storage](#tag/storage) object.
      - Using the [Pool](#tag/pool) to release the [Storage](#tag/storage) object.

      All operations must be completed by a specified time. Individual operations will not be undone on timeout.

      <h4 id="tag/storageRequest/FORMAT">FORMAT</h4>
      A FORMAT operation requires the following property values:
      | Property        |  Description|
      |-----------------|-------------|
      | storageId       | Identifies the [Storage](#tag/storage) object |
      | parcelSizeBytes | Specifies the desired size of the device parcel |
      | completeByTime  | Timeout value |

      The [Storage](#tag/storage) object must be attached to a node by the time the operation is processed.

      A FORMAT operation involves the following:
      - Invoking the *FormatDevice* data management command on the node to which the [Storage](#tag/storage) object is attached.

      On completion the [Storage](#tag/storage) object *parcelSizeBytes* property is set to the requested size,
      and the *storageState* property's *mediaState* field to *FORMATTED* (or *UNFORMATTED* on failure) and
      the *deviceState* field to *UNUSED*.

      <h4 id="tag/storageRequest/USE">USE</h4>
      A USE operation requires the following property values:
      | Property        |  Description|
      |-----------------|-------------|
      | storageId       | Identifies the [Storage](#tag/storage) object |
      | completeByTime  | Timeout value |

      The [Storage](#tag/storage) object must be attached to a node at the time the operation is processed.

      A USE operation involves the following:
      - Invoking the *UseDevice* data management command on the node to which the [Storage](#tag/storage) object is attached.
      - Setting the [Storage](#tag/storage) object *storageState* property's *deviceState* field to *OPEN* (or *UNUSED* in case of error).

      <h4 id="tag/storageRequest/CLOSE">CLOSE</h4>
      A CLOSE operation requires the following property values:
      | Property        |  Description|
      |-----------------|-------------|
      | storageId       | Identifies the [Storage](#tag/storage) object |
      | completeByTime  | Timeout value |

      The [Storage](#tag/storage) object must be attached to a node at the time the operation is processed.

      A CLOSE operation involves the following:
      - Invoking the *CloseDevice* data management command on the node to which the [Storage](#tag/storage) object is attached.
      - Setting the [Storage](#tag/storage) object *storageState* property's *deviceState* field to *UNUSED*.

      <h4 id="tag/storageRequest/REATTACH">REATTACH</h4>
      A REATTACH operation requires the following property values:
      | Property        |  Description|
      |-----------------|-------------|
      | storageId       | Identifies the [Storage](#tag/storage) object which must be attached to some [Node](#tag/node) |
      | reattachNodeId  | Identifies the new [Node](#tag/node) object in the same [Cluster](#tag/cluster) |
      | completeByTime  | Timeout value |

      A REATTACH operation involves the following:
      - Perform the equivalent of a [CLOSE](#tag/storageRequest/CLOSE) operation on the node to which the Storage object is attached.
      - Perform the equivalent of a [DETACH](#tag/storageRequest/DETACH) operation on the node to which the Storage object is attached.
      - Perform the equivalent of an [ATTACH](#tag/storageRequest/ATTACH) operation on the new node.
      - Perform the equivalent of a [USE](#tag/storageRequest/USE) operation on the new node.

      This is not the same as performing these individual operations in multiple requests (a single request would be invalid)
      because the failure recovery actions will be different.
      The REATTACH operation may be re-attempted until it succeeds.

      **Access Control**: The [cspDomainUsage capability](#tag/capability/cspDomainUsage) is required to create and manage
      StorageRequest objects owned by that *accountId*. The [cspDomainManagement capability](#tag/capability/cspDomainManagement) allows
      StorageRequest objects with the *tenantAccountId* set to that tenant's account to be fetched or deleted.
      The [systemManagement capability](#tag/capability/systemManagement) conveys the ability to fetch StorageRequest objects and receive events about them.
      On creation, the *accountId* and *tenantAccountId* properties are automatically set based on the authentication
      information (see [User](#tag/user)).
      In addition, the objects referenced must be accessible to the account creating the StorageRequest object.

      **CRUD event scope map properties** (see [Watchers](#tag/watchers))
      | Property | Notes |
      |----------|-------------|
      | clusterId | |
      | *meta.id* | On creation only |
      | nodeId ||
      | poolId ||
      | storageRequestState ||

  - name: system
    description: |
      The System object represents a deployment of the central Nuvoloso software.
      There is only one System object for each deployment, and it is automatically created.
      The System object can be customized with deployment-specific properties (e.g. name).

      The System object contains defaults for policies that are inherited by various objects.
      The policy defaults may be overridden on a per-object basis.

      The **snapshotCatalogPolicy** property of the System object can be used to establish a system-wide
      location where snapshot metadata of all accounts should be saved.
      The policy is "inherited" by intermediate tenant accounts, and through them (if applicable), by
      normal accounts.
      If the system administrator choses to leave this policy unset in the System object,
      then the account administrators of tenant or normal accounts are required to set this
      policy in their [Account](#tag/account) objects.
      Once set in the System object, this policy may not be cleared though its values may be modified over time.
      **It is the responsibility of the system administrator to remember the history of values set for the policy
      as they will be needed for recovery if the system configuration database is ever lost.**
      This includes the [protection store](#tag/protectionStore) location and bucket name, and
      the ProtectionDomain object identifier, algorithm and passphrase.

      The System object should not be confused with the [Account](#tag/account) object named **System**
      which is used for administrative activities.

      **Access Control**: All authenticated users of the system can fetch the system object.
      The [systemManagement capability](#tag/capability/systemManagement) is required to modify the *name*, *description* or *snapshotManagementPolicy* properties.

  - name: task
    description: |
      - [Operations](#tag/task/Operations)
      - [Access Control](#tag/task/AccessControl)
      - [CRUD Events](#tag/task/CRUDE)

      <h3 id="tag/task/Operations">Operations</h3>
      Tasks are in-memory housekeeping tasks that perform some internal activity such as recovering resources.
      Tasks are deleted a short time after completion, regardless of whether they succeeded or failed.

      The following types of tasks are defined:
      | Name | Description |
      |------|-------------|
      | [CLUSTER_HEARTBEAT](#tag/task/CLUSTER_HEARTBEAT) | Update the heartbeats of multiple objects related to a [Cluster](#tag/cluster) |
      | *METRIC_PURGE* | **TBD** Purge expired metric data |
      | *SR_PURGE* | **TBD** Purge expired [StorageRequest](#tag/storageRequest) objects |
      | [VSR_PURGE](#tag/task/VSR_PURGE) | Purge expired [VolumeSeriesRequest](#tag/volumeSeriesRequest) objects |

      <h4 id="tag/task/CLUSTER_HEARTBEAT">CLUSTER_HEARTBEAT</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | objectId       | The identifier of a [Cluster](#tag/cluster) object |
      | serviceStates  | The states of the [Cluster](#tag/cluster) object and associated [Node](#tag/node) objects |

      <h4 id="tag/task/VSR_PURGE">VSR_PURGE</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | objectId       | The identifier of a [VolumeSeriesRequest](#tag/volumeSeriesRequest) object |

      <h3 id="tag/task/AccessControl">Access Control</h3>
      The [systemManagement capability](#tag/capability/systemManagement) is required to access these objects though the events are viewable by anyone.

      <h3 id="tag/task/CRUDE">CRUD Events</h3>
      CRUD event scope map properties (see [Watchers](#tag/watchers))
      | Property | Notes |
      |----------|-------------|
      | *meta.id* | On creation only |
      | operation  | The type of activity |
      | state | The state of the Task |

  - name: user
    description: |
      The User object represents an entity that can be authenticated to the Nuvoloso system and provides a container
      in which a profile for the entity (e.g. Display Name, UI preferences) can be stored.
      Each User object has a unique identifier known to the Authentication Service (e.g. an e-mail address).

      A User object can be associated with multiple [Account](#tag/account) objects. A User has a single [Role](#tag/role) in the
      context of each associated Account.

      All queries of all types of objects must provide authentication, identifying the user performing the query.
      In addition, because users can have access to multiple accounts, the account context must be provided.
      As a result, all queries are implicitly filtered by the account and user role in that account. For example, a query to list [Cluster](#tag/cluster) objects
      will only return clusters for which the user is authorized to access, in the context of their role in the current account.
      A modification to fields of an Account object can only be performed by a user with the [capability](#tag/capability) (right) to update those fields of that Account object.

      On each REST API operation, user identity is provided in an **X-Auth** header with a JSON Web Token (JWT) value obtained from the authentication service.
      The account context is specified in an **X-Account** header with the *accountId* of the account context as the value.

      **Access Control**: an authenticated user can view and manage the enabled User object with their own *authIdentifier*.
      An enabled user of an account with [userManagement capability](#tag/capability/userManagement) can create and manage all users objects.
      Only a user with the [systemManagement capability](#tag/capability/systemManagement) can modify the password of the built-in **admin** user.

  - name: volumeSeries
    description: |
      A VolumeSeries object represents a container of user data that may be mounted as a block device.
      It supports a linear series of snapshots.

      A VolumeSeries object is owned by an [Account](#tag/account) and must specify a [ServicePlan](#tag/servicePlan).
      A [ServicePlanAllocation](#tag/servicePlanAllocation) object must be created to enable an [Account](#tag/account)
      to use [VolumeSeries](#tag/volumeSeries) of a particular [ServicePlan](#tag/servicePlan) in a [Cluster](#tag/cluster).

      A VolumeSeries will identify a [ConsistencyGroup](#tag/consistencyGroup) object to associate it with other VolumeSeries
      objects. Data protection policies (e.g. snapshot policies) can be applied simultaneously to all VolumeSeries objects
      in a given consistency group.

      VolumeSeries may also be organized into arbitrary collections by the use of the *tags* property: a tag value specified
      in a [volumeSeriesList](#operation/volumeSeriesList) query parameter will return all the VolumeSeries objects that possess that tag value.
      Tags can also be used for arbitrary annotations.
      A tag for a snapshot should use a prefix of 'snap-*snapIdentifier*', where *snapIdentifier* is the identifier of the snapshot concerned.
      Such tags will be automatically removed when the related snapshot is deleted.
      Note that a snapshot triggered automatically by a [ConsistencyGroup](#tag/consistencyGroup) snapshot policy
      will use the same *snapIdentifier* in each member VolumeSeries object involved.

      The physical storage for a VolumeSeries data is obtained from the following:
      - Storage capacity reservation and consumption from CSPDOMAIN scoped [Pool](#tag/pool) objects (linked via [CapacityAllocation](#tag/capacityAllocation) objects)
      - Node or cluster accessible [Storage](#tag/storage) objects (linked via [ParcelAllocation](#tag/parcelAllocation) objects)

      TBD: details on the relationship between VolumeSeriesRequest and StorageFormula.
      The storage associated with the VolumeSeries is allocated based on the [StorageFormula](#tag/storageFormula) of its selected [ServicePlanAllocation](#tag/servicePlanAllocation).
      Storage is allocated or de-allocated for the VolumeSeries via a [VolumeSeriesRequest](#tag/volumeSeriesRequest).

      **Access Control**: The [volumeSeriesOwner capability](#tag/capability/volumeSeriesOwner) is required to create and manage
      VolumeSeries objects owned by that accountId. The [volumeSeriesFetch capability](#tag/capability/volumeSeriesFetch) allows
      VolumeSeries objects with the *tenantAccountId* set to that tenant's account to be fetched.
      On creation, the *accountId* and *tenantAccountId* properties are automatically set based on the authentication
      information (see [User](#tag/user)).

      **CRUD event scope map properties** (see [Watchers](#tag/watchers))
      | Property | Notes |
      |----------|-------------|
      | *meta.id* | On creation only |
      | clusterId | The value of the *boundClusterId* property|
      | consistencyGroupId | The value of the *consistencyGroupId* property |
      | nodeId    | The value of the *configuredNodeId* property |

  - name: volumeSeriesRequest
    # WARNING: update the requestedOperations enum type in "#/definitions/VolumeSeriesRequestCreateOnce" to reflect the description
    description: |
      - [Operations](#tag/volumeSeriesRequest/Operations)
      - [Access Control](#tag/volumeSeriesRequest/AccessControl)
      - [CRUD Events](#tag/volumeSeriesRequest/CRUDE)

      <h3 id="tag/volumeSeriesRequest/Operations">Operations</h3>
      A VolumeSeriesRequest object is a request to perform one or more of the following operations.
      Typically operations involve a single [VolumeSeries](#tag/volumeSeries) object, but may
      also involve other objects such as [ConsistencyGroup](#tag/consistencyGroup), [Snapshot](#tag/snapshot)
      and [ServicePlanAllocation](#tag/servicePlanAllocation) objects.

      | Operation | Description |
      |-----------|-------------|
      | [ALLOCATE_CAPACITY](#tag/volumeSeriesRequest/ALLOCATE_CAPACITY) | Specify how much capacity may be used by an [Account](#tag/account) for a given [ServicePlan](#tag/servicePlan) in a [Cluster](#tag/cluster) |
      | [ATTACH_FS](#tag/volumeSeriesRequest/ATTACH_FS) | Create a filesystem on the media of a [VolumeSeries](#tag/volumeSeries) object and perform a host OS filesystem mount operation |
      | [BIND](#tag/volumeSeriesRequest/BIND)      | Associate a [VolumeSeries](#tag/volumeSeries) object with a cluster, select the [StorageFormula](#tag/storageFormula), the [Pool](#tag/pool) objects and reserve storage capacity |
      | [CG_SNAPSHOT_CREATE](#tag/volumeSeriesRequest/CG_SNAPSHOT_CREATE) | Create consistent snapshots of the [VolumeSeries](#tag/volumeSeries) objects in a [ConsistencyGroup](#tag/consistencyGroup) |
      | [CHANGE_CAPACITY](#tag/volumeSeriesRequest/CHANGE_CAPACITY) | Change capacity consumed by a [VolumeSeries](#tag/volumeSeries) object in its associated [ServicePlanAllocation](#tag/servicePlanAllocation) object|
      | [CLUSTER_DELETE](#tag/volumeSeriesRequest/CLUSTER_DELETE) | Delete a [Cluster](#tag/cluster) object and release associated objects and resources |
      | [CLUSTER_RESET](#tag/volumeSeriesRequest/CLUSTER_RESET) | Reset a [Cluster](#tag/cluster) object and make it ready for re-configuration |
      | [CONFIGURE](#tag/volumeSeriesRequest/CONFIGURE) | Open a [VolumeSeries](#tag/volumeSeries) object on a [Node](#tag/node) without exposing any LUN |
      | [CREATE](#tag/volumeSeriesRequest/CREATE)    | Create a [VolumeSeries](#tag/volumeSeries) object, optionally creating corresponding [ConsistencyGroup](#tag/consistencyGroup) and [ApplicationGroup](#tag/applicationGroup) objects |
      | [CREATE_FROM_SNAPSHOT](#tag/volumeSeriesRequest/CREATE_FROM_SNAPSHOT) | Create, bind and mount a [VolumeSeries](#tag/volumeSeries) object, initialize it with the data from a snapshot of another VolumeSeries object and then publish it to the cluster |
      | [DELETE](#tag/volumeSeriesRequest/DELETE)    | Release all storage associated with a [VolumeSeries](#tag/volumeSeries) and delete it |
      | [DELETE_SPA](#tag/volumeSeriesRequest/DELETE_SPA)        | Delete a [ServicePlanAllocation](#tag/servicePlanAllocation) object |
      | [DETACH_FS](#tag/volumeSeriesRequest/DETACH_FS) | Perform a host OS filesystem "umount" operation |
      | [MOUNT](#tag/volumeSeriesRequest/MOUNT)     | Make a [VolumeSeries](#tag/volumeSeries) accessible on a [Node](#tag/node) |
      | [NODE_DELETE](#tag/volumeSeriesRequest/NODE_DELETE) | Delete a [Node](#tag/node) |
      | [PUBLISH](#tag/volumeSeriesRequest/PUBLISH) | Publish a [VolumeSeries](#tag/volumeSeries) object to the cluster as a Persistent Volume Object |
      | [RENAME](#tag/volumeSeriesRequest/RENAME)    | Rename a [VolumeSeries](#tag/volumeSeries) and its consistently named [ConsistencyGroup](#tag/consistencyGroup) and [ApplicationGroup](#tag/applicationGroup) objects |
      | [UNBIND](#tag/volumeSeriesRequest/UNBIND)   | Release [Cluster](#tag/cluster) resources allocated to a [VolumeSeries](#tag/volumeSeries) |
      | [UNMOUNT](#tag/volumeSeriesRequest/UNMOUNT)   | Remove a visible [VolumeSeries](#tag/volumeSeries) LUN from a [Node](#tag/node) |
      | [UNPUBLISH](#tag/volumeSeriesRequest/UNPUBLISH) | Remove a Persistent Volume for a [VolumeSeries](#tag/volumeSeries) object from the cluster |
      | [VOL_DETACH](#tag/volumeSeriesRequest/VOL_DETACH) | Detach a [VolumeSeries](#tag/volumeSeries) object from a [Node](#tag/node) |
      | [VOL_SNAPSHOT_CREATE](#tag/volumeSeriesRequest/VOL_SNAPSHOT_CREATE) | Create a snapshot of a [VolumeSeries](#tag/volumeSeries) object |
      | [VOL_SNAPSHOT_RESTORE](#tag/volumeSeriesRequest/VOL_SNAPSHOT_RESTORE) | Restore a snapshot to a [VolumeSeries](#tag/volumeSeries) object |
      | *future*  |  |
      | VOL_SNAPSHOT_DELETE | Remove a snapshot for a [VolumeSeries](#tag/volumeSeries) object |
      | PROVISION | Request that additional storage be allocated to a [VolumeSeries](#tag/volumeSeries), using a StorageFormula |
      | GROW      | Increase the apparent size of the [VolumeSeries](#tag/volumeSeries), the sizeBytes, communicating the new size to all affected Nuvoloso components |
      | CHANGE_SERVICE_PLAN | Update the [ServicePlan](#tag/servicePlan) for a [VolumeSeries](#tag/volumeSeries), with side effects such as changing the StorageFormula, re-allocating storage, and re-locating data |
      |  *etc.*   |  |

      Multiple operations may be requested together provided that they are all part of one of the following
      valid operation sequences.
      If multiple operations are requested they will be carried out in their sequence order:
      - [ALLOCATE_CAPACITY](#tag/volumeSeriesRequest/ALLOCATE_CAPACITY)
      - [CG_SNAPSHOT_CREATE](#tag/volumeSeriesRequest/CG_SNAPSHOT_CREATE)
      - CHANGE_SERVICE_PLAN
      - [CLUSTER_DELETE](#tag/volumeSeriesRequest/CLUSTER_DELETE)
      - [CLUSTER_RESET](#tag/volumeSeriesRequest/CLUSTER_RESET)
      - [CREATE](#tag/volumeSeriesRequest/CREATE), [BIND](#tag/volumeSeriesRequest/BIND), [PUBLISH](#tag/volumeSeriesRequest/PUBLISH), [MOUNT](#tag/volumeSeriesRequest/MOUNT), [VOL_SNAPSHOT_RESTORE](#tag/volumeSeriesRequest/VOL_SNAPSHOT_RESTORE), [ATTACH_FS](#tag/volumeSeriesRequest/ATTACH_FS)
      - [CHANGE_CAPACITY](#tag/volumeSeriesRequest/CHANGE_CAPACITY)
      - [CREATE_FROM_SNAPSHOT](#tag/volumeSeriesRequest/CREATE_FROM_SNAPSHOT)
      - [DELETE_SPA](#tag/volumeSeriesRequest/DELETE_SPA)
      - GROW, PROVISION
      - [RENAME](#tag/volumeSeriesRequest/RENAME)
      - SNAPSHOT_DELETE
      - [DETACH_FS](#tag/volumeSeriesRequest/DETACH_FS), [UNMOUNT](#tag/volumeSeriesRequest/UNMOUNT), [UNPUBLISH](#tag/volumeSeriesRequest/UNPUBLISH), [DELETE](#tag/volumeSeriesRequest/DELETE)
      - [CONFIGURE](#tag/volumeSeriesRequest/CONFIGURE), [VOL_SNAPSHOT_CREATE](#tag/volumeSeriesRequest/VOL_SNAPSHOT_CREATE)
      - [NODE_DELETE](#tag/volumeSeriesRequest/NODE_DELETE)
      - [UNBIND](#tag/volumeSeriesRequest/UNBIND)
      - [VOL_DETACH](#tag/volumeSeriesRequest/VOL_DETACH)

      <h4 id="tag/volumeSeriesRequest/ALLOCATE_CAPACITY">ALLOCATE_CAPACITY</h4>
      This operation uses the following property values:
      | Property           | Description|
      |--------------------|------------|
      | servicePlanAllocationCreateArgs | See [servicePlanAllocationCreate](#operation/servicePlanAllocationCreate) for details. If the [ServicePlanAllocation](#tag/servicePlanAllocation) object already exists, only the *authorizedAccountId*, *clusterId*, *servicePlanId* and *totalCapacityBytes* values are referenced from the *servicePlanAllocationCreateArgs* property |
      | completeByTime     | Timeout value |

      An ALLOCATE_CAPACITY operation allocates capacity for [VolumeSeries](#tag/volumeSeries) objects of an [Account](#tag/account)
      for a specific [ServicePlan](#tag/servicePlan) and [Cluster](#tag/cluster):
      - **TBD** It checks that the [System](#tag/system) object has been configured to secure snapshot data at rest.
        This check is performed synchronously when the request is constructed.
      - It increases or decreases the *totalCapacityBytes* properties in the related [ServicePlanAllocation](#tag/servicePlanAllocation)
        object, creating the object if necessary.
        It sets the *servicePlanAllocationId* property in the request to identify the object.
      - It uses the [StorageFormula](#tag/storageFormula) that applies to the [Cluster](#tag/cluster) to determine the capacity
        needed of each [CSPStorageTypes](#tag/cspStorageType), and reserves that much
        capacity (+ overhead) in [Pool](#tag/pool) objects dedicated to the [Account](#tag/account)
        for the [Cluster](#tag/cluster), creating them if necessary.
      - It exposes the [ServicePlan](#tag/servicePlan) in the [Cluster](#tag/cluster)
        (e.g. as a *Kubernetes Storage Class*)
        and updates the *clusterDescriptor* of the [ServicePlanAllocation](#tag/servicePlanAllocation) object.

      <h4 id="tag/volumeSeriesRequest/ATTACH_FS">ATTACH_FS</h4>
      This operation uses the following property values:
      | Property           | Description|
      |--------------------|------------|
      | fsType | The type of filesystem (optional) |
      | readOnly | Specify if no write access is permitted |
      | targetPath | The host specific path for the filesystem on the [VolumeSeries](#tag/volumeSeries) media |
      | volumeSeriesId | Identifies the [VolumeSeries](#tag/volumeSeries) object which must be in the IN_USE state |
      | completeByTime     | Timeout value |

      An ATTACH_FS operation creates a filesystem on the media of a mounted [VolumeSeries](#tag/volumeSeries)
      object (if necessary) and then performs a host OS filesystem mount operation on the [Node](#tag/node) on which it is mounted.
      If the media already contains a filesystem then the specified *fsType* must match or the operation will fail.
      The type of filesystem and target path must be supported in the environment in which the [VolumeSeries](#tag/volumeSeries) is mounted.

      <h4 id="tag/volumeSeriesRequest/DETACH_FS">DETACH_FS</h4>
      This operation uses the following property values:
      | Property           | Description|
      |--------------------|------------|
      | targetPath | The host specific path on which to perform a filesystem "umount" operation |
      | volumeSeriesId | Identifies the [VolumeSeries](#tag/volumeSeries) object which must be in the IN_USE state |
      | completeByTime     | Timeout value |

      A DETACH_FS operation performs a host OS filesystem "umount" operation.

      <h4 id="tag/volumeSeriesRequest/DELETE_SPA">DELETE_SPA</h4>
      This operation uses the following property values:
      | Property       | Description|
      |----------------|------------|
      | servicePlanAllocationId | Identifies the [ServicePlanAllocation](#tag/servicePlanAllocation) object |
      | completeByTime | Timeout value |

      A DELETE_SPA operation performs the following actions:
      - It removes remaining capacity reservations from associated [Pool](#tag/pool) objects.
      - It attempts to delete the associated [Pool](#tag/pool) objects whose *totalCapacityBytes* is reduced to zero.
      - It deletes the [ServicePlanAllocation](#tag/servicePlanAllocation) object.
      - It attempts to remove the *authorizedAccountId* from associated [ServicePlan](#tag/servicePlan),
        [CSPDomain](#tag/cspDomain) and [Cluster](#tag/cluster) objects.

      <h4 id="tag/volumeSeriesRequest/CHANGE_CAPACITY">CHANGE_CAPACITY</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | volumeSeriesId | Identifies the [VolumeSeries](#tag/volumeSeries) object |
      | volumeSeriesCreateSpec | At least one of the *sizeBytes* or *spaAdditionalBytes* properties must be specified; other properties are ignored |
      | completeByTime | Timeout value |

      In particular:
      - If *sizeBytes* is specified in volumeSeriesCreateSpec its value must be greater than its current value in the
        [VolumeSeries](#tag/volumeSeries) object (i.e. you cannot shrink the size of the logical address space).
        The [VolumeSeries](#tag/volumeSeries) object must not be provisioned if this is specified.
      - If *spaAdditionalBytes* is specified in volumeSeriesCreateSpec its value may be greater or less than its current value in the
        [VolumeSeries](#tag/volumeSeries) object, including being reset to 0.
        The [VolumeSeries](#tag/volumeSeries) object must be at least bound if this is specified.

      The CHANGE_CAPACITY operation involves the following:
      - Reserve capacity for the [VolumeSeries](#tag/volumeSeries) in the [ServicePlanAllocation](#tag/servicePlanAllocation) object as per the new values of *sizeBytes* and *spaAdditionalBytes*.  The two properties are updated in the [VolumeSeries](#tag/volumeSeries) object as necessary.
      - The operation may have to wait for sufficient reservable capacity become available in the [ServicePlanAllocation](#tag/servicePlanAllocation) object.
      - If the [VolumeSeries](#tag/volumeSeries) HEAD is mounted and its *cacheAllocations* property include non-zero *requestedSizeBytes*:
          - The desired cache size is recalculated and stored in the *storagePlan* property
          - On the node where the HEAD is mounted the cache is re-allocated based on the *storagePlan* property, and
            the *cacheAllocations* property of the [VolumeSeries](#tag/volumeSeries) is updated accordingly.

      The CHANGE_CAPACITY operation can coexist with ongoing snapshot operations on the [VolumeSeries](#tag/volumeSeries) object.

      <h4 id="tag/volumeSeriesRequest/CONFIGURE">CONFIGURE</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | volumeSeriesId | Identifies the [VolumeSeries](#tag/volumeSeries) object |
      | nodeId         | Identifies the [Node](#tag/node) object on which to configure the volume |
      | completeByTime | Timeout value |

      A CONFIGURE operation involves the following:
      - The [VolumeSeries](#tag/volumeSeries) object must be in the *PROVISIONED* state in a cluster.
      - The [Storage](#tag/storage) associated with the [VolumeSeries](#tag/volumeSeries) object will be
        attached to some accessible node if necessary.
      - The data management layer on the specified [Node](#tag/node) is informed of the location of the devices used
        by the [VolumeSeries](#tag/volumeSeries) object in the cluster.
      - The data management layer on the specified [Node](#tag/node) will open the [VolumeSeries](#tag/volumeSeries)
        object, making it usable in future [MOUNT](#tag/volumeSeriesRequest/MOUNT) or
        [VOL_SNAPSHOT_CREATE](#tag/volumeSeriesRequest/VOL_SNAPSHOT_CREATE) operations on the node.
      - The state of the [VolumeSeries](#tag/volumeSeries) object is set to *CONFIGURED*.

      A CONFIGURE operation may be specified with a [VOL_SNAPSHOT_CREATE](#tag/volumeSeriesRequest/VOL_SNAPSHOT_CREATE)
      operation in the same request, enabling a snapshot backup
      of a [VolumeSeries](#tag/volumeSeries) object in the *PROVISIONED* state.

      <h4 id="tag/volumeSeriesRequest/CREATE">CREATE</h4>
      The operation uses the following property values:
      | Property           | Description|
      |--------------------|------------|
      | volumeSeriesCreateSpec | See [volumeSeriesCreate](#operation/volumeSeriesCreate) for details |
      | applicationGroupIds | Existing [ApplicationGroup](#tag/applicationGroup) objects for the new [consistencyGroupCreate](#operation/consistencyGroupCreate) |
      | completeByTime     | Timeout value |

      A CREATE operation is equivalent to performing a [volumeSeriesCreate](#operation/volumeSeriesCreate) operation combined
      with optional [consistencyGroupCreate](#operation/consistencyGroupCreate) and
      [applicationGroupCreate](#operation/applicationGroupCreate) operations.
      It is useful for dynamic provisioners or creating and binding in a single step.
      - The *volumeSeriesId* property will be set to identify the new [VolumeSeries](#tag/volumeSeries) object.
      - The *volumeSeriesCreateSpec.consistencyGroupId* property may be specified to refer to an existing
        [ConsistencyGroup](#tag/consistencyGroup) object. If this property is not set, a new
        [ConsistencyGroup](#tag/consistencyGroup) object will be created with the same name as the VolumeSeries,
        and the *consistencyGroupId* property will be set in the new [VolumeSeries](#tag/volumeSeries) object.
      - The *applicationGroupIds* property may be specified to refer to existing
        [ApplicationGroup](#tag/applicationGroup) objects. If this property is not set, a new
        [ApplicationGroup](#tag/applicationGroup) object will be created with the same name as the VolumeSeries,
        and the *applicationGroupIds* property will be set in the new [ConsistencyGroup](#tag/consistencyGroup) object.
        It is an error to specify the *applicationGroupIds* if the *volumeSeriesCreateSpec.consistencyGroupId* is set.

      <h4 id="tag/volumeSeriesRequest/CREATE_FROM_SNAPSHOT">CREATE_FROM_SNAPSHOT</h4>
      The operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | snapshotId     | Identify a [Snapshot](#tag/snapshot) object to source the initial data of the new [VolumeSeries](#tag/volumeSeries). The [Snapshot](#tag/snapshot) object cannot be deleted while this request is active; alternatively one can set *snapshot* explicitly instead of this property |
      | snapshot       | The property is automatically populated from the [Snapshot](#tag/snapshot) object referenced by the *snapshotId* property if set or may be explicitly set otherwise |
      | volumeSeriesCreateSpec | Similar to the [CREATE](#tag/volumeSeriesRequest/CREATE) operation with some caveats described below |
      | nodeId         | Identifies the [Node](#tag/node) in a [Cluster](#tag/cluster) where the new volume is to be initialized |
      | completeByTime | Timeout value |

      A CREATE_FROM_SNAPSHOT operations is equivalent to invoking the [CREATE](#tag/volumeSeriesRequest/CREATE),
      [BIND](#tag/volumeSeriesRequest/BIND),
      [MOUNT](#tag/volumeSeriesRequest/MOUNT) and
      [VOL_SNAPSHOT_RESTORE](#tag/volumeSeriesRequest/VOL_SNAPSHOT_RESTORE)
      operations to create and initialize a new volume with a specific snapshot of an existing volume, followed
      by a [PUBLISH](#tag/volumeSeriesRequest/PUBLISH) operation to make it visible in the associated cluster.
      The sourcing volume does not have to be mounted or even bound: its snapshot data is copied directly from the protection store.
      A CREATE_FROM_SNAPSHOT operation can operate concurrently with all but [DELETE](#tag/volumeSeriesRequest/DELETE)
      and VOL_SNAPSHOT_DELETE operations on the same [VolumeSeries](#tag/volumeSeries) object/snapshot.

      The *volumeSeriesCreateSpec* must be specified as in the CREATE operation with the following caveats:
      - The *sizeBytes* property will be set from the snapshot.
      - The *accountId* and *tenantAccountId* properties will be copied from the sourcing volume.
      - The *servicePlanId* will be copied from the sourcing volume if not specified.

      The *volumeSeriesId* property will be set to identify the new [VolumeSeries](#tag/volumeSeries) object on completion.

      <h4 id="tag/volumeSeriesRequest/BIND">BIND</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | volumeSeriesId | Identifies the [VolumeSeries](#tag/volumeSeries) object |
      | clusterId      | Identifies the [Cluster](#tag/cluster) object |
      | completeByTime | Timeout value |

      A BIND operation involves the following:
      - Find the authorizing [ServicePlanAllocation](#tag/servicePlanAllocation) object from the specified clusterId
        and the accountId in the [VolumeSeries](#tag/volumeSeries) object.
      - Reserve capacity for the [VolumeSeries](#tag/volumeSeries) in the [ServicePlanAllocation](#tag/servicePlanAllocation) object. The *spaAdditionalBytes* property of the volume is reset at this time.
      - A BIND operation may have to wait for sufficient reservable capacity become available in the [ServicePlanAllocation](#tag/servicePlanAllocation) object.

      <h4 id="tag/volumeSeriesRequest/UNBIND">UNBIND</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | volumeSeriesId | Identifies a [VolumeSeries](#tag/volumeSeries) object in the PROVISIONED or BOUND states |
      | completeByTime | Timeout value |

      A UNBIND operation involves the following:
      - Unpublish the [VolumeSeries](#tag/volumeSeries) in the cluster.
      - De-allocate any [Storage](#tag/storage) associated with the [VolumeSeries](#tag/volumeSeries) in the cluster.
      - Change the state of the [VolumeSeries](#tag/volumeSeries) to BOUND.
      - Return capacity used by the [VolumeSeries](#tag/volumeSeries) to the associated [ServicePlanAllocation](#tag/servicePlanAllocation) object.
      The *spaAdditionalBytes* property of the volume is reset at this time.
      - Change the state of the [VolumeSeries](#tag/volumeSeries) to UNBOUND.

      The operation will fail if there is a pending snapshot on a PROVISIONED [VolumeSeries](#tag/volumeSeries).

      <h4 id="tag/volumeSeriesRequest/PUBLISH">PUBLISH</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | volumeSeriesId | Identifies the [VolumeSeries](#tag/volumeSeries) object |
      | fsType | The file system type of the [VolumeSeries](#tag/volumeSeries) when it is first mounted. Possible values are {ext4, xfs}. The default if unspecified is ext4. |
      | driverType | The volume driver type. Possible values are {flex, csi}. A suitable default is chosen if unspecified. |

      A PUBLISH operation involves the following:
      - Find the specified [VolumeSeries](#tag/volumeSeries) object which must be bound to a cluster.
      - Generate a Persistent Volume specification of the object.
      - Create the Persistent Volume object from the generated specification of the [VolumeSeries](#tag/volumeSeries) object.

      <h4 id="tag/volumeSeriesRequest/UNPUBLISH">UNPUBLISH</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | volumeSeriesId | Identifies the [VolumeSeries](#tag/volumeSeries) object |

      An UNPUBLISH operation involves the following:
      - Find the specified [VolumeSeries](#tag/volumeSeries) object which is bound to a cluster.
      - Deletes the previously published Persistent Volume object from the cluster.

      <h4 id="tag/volumeSeriesRequest/MOUNT">MOUNT</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | volumeSeriesId | Identifies the [VolumeSeries](#tag/volumeSeries) object |
      | nodeId         | Identifies the [Node](#tag/node) object |
      | snapIdentifier | Optionally identifies a specific snapshot; the default is to mount the head of the [VolumeSeries](#tag/volumeSeries) object |
      | completeByTime | Timeout value |

      A MOUNT operation involves the following:
      - It checks that the associated [Account](#tag/account) object has been configured to
        secure snapshot data at rest.
        This check is performed synchronously when the request is constructed.
      - A MOUNT operation may have to wait for [Storage](#tag/storage) objects to get provisioned, attached
        to the desired node and be formatted and claimed by the data management layer.
        The [Storage](#tag/storage) objects come from [Pool](#tag/pool) objects
        dedicated to the [Account](#tag/account) for the [Cluster](#tag/cluster).
      - The *storagePlan* property is used to track the progress of provisioning.
      - When provisioning is complete [VolumeSeries](#tag/volumeSeries) state is set to *PROVISIONED*, and its
        *rootStorageId* and *storageParcels* record the provisioned storage.
      - The VolumeSeries is implicitly configured on the node.
      - The VolumeSeries (head or specified snapshot) is exposed as a block device on the specified node.
      - The [VolumeSeries](#tag/volumeSeries) state is set to *IN_USE* and the newly exposed block device is recorded in
        its *mounts* array.

      <h4 id="tag/volumeSeriesRequest/UNMOUNT">UNMOUNT</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | volumeSeriesId | Identifies the [VolumeSeries](#tag/volumeSeries) object |
      | nodeId         | Identifies the [Node](#tag/node) object |
      | snapIdentifier | Optionally identifies a specific snapshot; the default is to unmount the head of the [VolumeSeries](#tag/volumeSeries) object |
      | completeByTime | Timeout value |

      An UNMOUNT operation involves the following:
      - The previously exposed VolumeSeries (head or specified snapshot) block device is withdrawn on the specified node.
        The VolumeSeries remains provisioned and known to the data management layer.
      - The VolumeSeries will transition back to *PROVISIONED* state if there is no remaining mounted snapshot.

      **IMPORTANT:** Performing an UNMOUNT operation on the VolumeSeries head before the operating system is told to stop using the head can result in data loss.
      As such, it is safest for the UNMOUNT operation to be initiated by the cluster driver.

      <h4 id="tag/volumeSeriesRequest/DELETE">DELETE</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | volumeSeriesId | Identifies the [VolumeSeries](#tag/volumeSeries) object |
      | completeByTime | Timeout value |

      A DELETE operation involves the following (depending on the state of the VolumeSeries, only a subset of these steps may be required):
      - A VolumeSeries that is in the *IN_USE* state cannot be deleted.
      - The data management layer is told to delete its knowledge of the VolumeSeries, releasing all allocated parcels.
      - Allocation and reservation amounts made by [VolumeSeriesRequest](#tag/volumeSeriesRequest) PLACEMENT and SIZING are released.
      - The VolumeSeries is UNBOUND from the cluster.
      - The VolumeSeries object is deleted.
      - The corresponding ConsistencyGroup object is deleted if no other VolumeSeries object refers to it.
      - The corresponding ApplicationGroup objects are deleted if no other ConsistencyGroup object refers to them.

      Deleting a VolumeSeries does not directly cause the [Storage](#tag/storage) objects previously allocated and configured for use by
      the data management layer to be released. Determining when and how such objects can be garbage collected is *TBD*.

      <h4 id="tag/volumeSeriesRequest/RENAME">RENAME</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | volumeSeriesCreateSpec | The name property must be set to the new name. See [volumeSeriesCreate](#operation/volumeSeriesCreate) for details |
      | volumeSeriesId | Identifies the [VolumeSeries](#tag/volumeSeries) object |
      | completeByTime | Timeout value |

      A RENAME operation involves the following:
      - If the name of the ConsistencyGroup object for the VolumeSeries is the same as the old VolumeSeries name, it is renamed to the new name.
      - If the name of an ApplicationGroup object for the ConsistencyGroup is the same as the old VolumeSeries name, it is renamed to the new name.
      - The VolumeSeries is renamed to the new name.

      <h4 id="tag/volumeSeriesRequest/CG_SNAPSHOT_CREATE">CG_SNAPSHOT_CREATE</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | consistencyGroupId | Identifies the [ConsistencyGroup](#tag/consistencyGroup) object |
      | clusterId      | Identifies the [Cluster](#tag/cluster) object |
      | completeByTime | Timeout value |

      A CG_SNAPSHOT_CREATE operation involves the following:
      - Launching multiple synchronized [VOL_SNAPSHOT_CREATE](#tag/volumeSeriesRequest/VOL_SNAPSHOT_CREATE)
      operations on each member [VolumeSeries](#tag/volumeSeries) object in the scope of the operation.
      - Waiting for the [VOL_SNAPSHOT_CREATE](#tag/volumeSeriesRequest/VOL_SNAPSHOT_CREATE) operations to complete.
      - Estimating the next scheduled snapshot epoch.

      <h4 id="tag/volumeSeriesRequest/VOL_SNAPSHOT_CREATE">VOL_SNAPSHOT_CREATE</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | volumeSeriesId | Identifies the [VolumeSeries](#tag/volumeSeries) object |
      | syncCoordinatorId | Optionally specify a [CG_SNAPSHOT_CREATE](#tag/volumeSeriesRequest/CG_SNAPSHOT_CREATE) request |
      | protectionDomainId | Automatically set to the appropriate [ProtectionDomain](#tag/protectionDomain) for the primary [ProtectionStore](#tag/protectionStore) from the mapping in the [Account](#tag/account) object |
      | snapIdentifier | Automatically set to sync coordinator identifier or a new UUID |
      | completeByTime | Timeout value |

      A VOL_SNAPSHOT_CREATE operation involves the following:
      - Pause application I/O
      - Make a point-in-time position in the volume
      - Resume I/O
      - Copy a diff of the current point-in-time and the previous to the protection store of the cluster the volume is mounted within.
      - Delete older points-in-time
      When invoked via a [CG_SNAPSHOT_CREATE](#tag/volumeSeriesRequest/CG_SNAPSHOT_CREATE)
      operation the operation must synchronize with its peer operations.
      A VOL_SNAPSHOT_CREATE operation can coexist with provisioning related requests on the same [VolumeSeries](#tag/volumeSeries) object.

      <h4 id="tag/volumeSeriesRequest/VOL_SNAPSHOT_RESTORE">VOL_SNAPSHOT_RESTORE</h4>
      This operation requires the following property values:
      | Property       | Description|
      |----------------|------------|
      | volumeSeriesId | Identifies the mounted target [VolumeSeries](#tag/volumeSeries) object which should not be accessed during this operation |
      | snapshotId     | Identify the [Snapshot](#tag/snapshot) object to be restored (it need not belong to this [VolumeSeries](#tag/volumeSeries)). The [Snapshot](#tag/snapshot) object cannot be deleted while this request is active; alternatively one can set *snapshot* explicitly instead of this property |
      | snapshot       | The property is automatically populated from the [Snapshot](#tag/snapshot) object referenced by the *snapshotId* property if set or may be explicitly set otherwise |
      | syncCoordinatorId | Optionally specify a [CREATE_FROM_SNAPSHOT](#tag/volumeSeriesRequest/CREATE_FROM_SNAPSHOT) request |
      | protectionDomainId | Automatically set to the [ProtectionDomain](#tag/protectionDomain) from the [Snapshot](#tag/snapshot) being restored |
      | completeByTime | Timeout value |

      The size of the volume must be the same as the size of the snapshot.
      The snapshot need not belong to the [VolumeSeries](#tag/volumeSeries) object as in the case of such a request launched from a
      [CREATE_FROM_SNAPSHOT](#tag/volumeSeriesRequest/CREATE_FROM_SNAPSHOT).

      A VOL_SNAPSHOT_RESTORE operation involves the following:
      - Copy the specified snapshot to the volume series HEAD, overwriting any previous data.

      <h4 id="tag/volumeSeriesRequest/NODE_DELETE">NODE_DELETE</h4>
      This operation uses the following property values:
      | Property           | Description|
      |--------------------|------------|
      | nodeId | The identity of the [Node](#tag/node) object which must be in the TIMED_OUT state |
      | completeByTime     | The value will be ignored and reset to a very distant time in the future |

      A NODE_DELETE operation can only be launched internally. It does the following:
      - It transitions the [Node](#tag/node) object to the TEAR_DOWN state.
      - It waits for related VolumeSeriesRequests that can terminate (current and future states do not involve agentd on the [Node](#tag/node)).
      - It forcibly cancels all related VolumeSeriesRequests that cannot terminate (currently executed by agentd on the [Node](#tag/node)) and waits for them to terminate.
      - It waits for all related [StorageRequests](#tag/storageRequest) to complete.
      - It primes the **syncPeer** map with the identifiers of the [VolumeSeries](#tag/volumeSeries) objects concerned, and the [Node](#tag/node) identifier (for itself).
      - It launches a [VOL_DETACH](#tag/volumeSeriesRequest/VOL_DETACH) VSR for each [VolumeSeries](#tag/volumeSeries) objects in the **syncPeer** map
      - It forcibly detaches all [Storage](#tag/Storage) objects by issuing the appropriate [StorageRequests](#tag/storageRequest) and waiting for their termination.
      - It synchronizes with the [VOL_DETACH](#tag/volumeSeriesRequest/VOL_DETACH) requests by transitioning to the VOLUME_DETACH_WAIT state.
      - It synchronizes the termination of the [VOL_DETACH](#tag/volumeSeriesRequest/VOL_DETACH) requests by transitioning to the VOLUME_DETACHED state.
      - It then deletes the [Node](#tag/node) object.

      <h4 id="tag/volumeSeriesRequest/VOL_DETACH">VOL_DETACH</h4>
      This operation uses the following property values:
      | Property           | Description|
      |--------------------|------------|
      | nodeId | The identity of the [Node](#tag/node) object concerned; it must be in the TEAR_DOWN state |
      | syncCoordinatorId | Set to the identity of the coordinating [NODE_DELETE](#tag/volumeSeriesRequest/NODE_DELETE) |
      | volumeSeriesId | Identifies the [VolumeSeries](#tag/volumeSeries) object in the PROVISIONED, CONFIGURED or IN_USE states whose associations with the node should be cleared |
      | completeByTime     | The value will be ignored and reset to a very distant time in the future |

      A VOL_DETACH operation can only be launched internally. It does the following:
      - It synchronizes on the VOLUME_DETACH_WAIT state with its peers
      - It updates the [VolumeSeries](#tag/volumeSeries) object to reflect that it is not attached to the [Node](#tag/node).
      - It synchronizes on the VOLUME_DETACHED state with its peers

      <h4 id="tag/volumeSeriesRequest/CLUSTER_DELETE">CLUSTER_DELETE</h4>
      This operation uses the following property values:
      | Property           | Description|
      |--------------------|------------|
      | clusterId | The identity of the [Cluster](#tag/cluster) object which must be in the TIMED_OUT state |
      | completeByTime     | Timeout value |

      A CLUSTER_DELETE operation performs the following actions:
      - It transitions the [Cluster](#tag/cluster) object to the TEAR_DOWN state.
      - It (forcibly) terminates all other VolumeSeriesRequest and [StorageRequest](#tag/storageRequest) objects.
      - It transitions all previously PROVISIONED or IN_USE [VolumeSeries](#tag/volumeSeries) objects associated with the [Cluster](#tag/cluster) object to the UNBOUND state.
      - It (forcibly) releases all [Storage](#tag/storage) objects associated with the cluster.
      - It deletes the associated [ServicePlanAllocation](#tag/servicePlanAllocation) objects.
      - It deletes the associated [StoragePools](#tag/storagePool) objects.
      - It deletes all the [Node](#tag/node) objects associated with the [Cluster](#tag/cluster) object.
      - It deletes the [Cluster](#tag/cluster) object.

      <h4 id="tag/volumeSeriesRequest/CLUSTER_RESET">CLUSTER_RESET</h4>
      This operation uses the following property values:
      | Property           | Description|
      |--------------------|------------|
      | clusterId | The identity of the [Cluster](#tag/cluster) object which must be in the TIMED_OUT state |
      | completeByTime     | Timeout value |

      A CLUSTER_RESET operation performs the following actions:
      - It transitions the [Cluster](#tag/cluster) object to the RESETTING state.
      - It (forcibly) terminates all other VolumeSeriesRequest and [StorageRequest](#tag/storageRequest) objects.
      - It transitions all previously PROVISIONED or IN_USE [VolumeSeries](#tag/volumeSeries) objects associated with the [Cluster](#tag/cluster) object to the BOUND state.
      - It (forcibly) releases all [Storage](#tag/storage) objects associated with the cluster and resets their [StoragePools](#tag/storagePool).
      - It deletes all the [Node](#tag/node) objects associated with the [Cluster](#tag/cluster) object.
      - It clears the [Cluster](#tag/cluster) object identity and transitions it to the DEPLOYABLE state.

      *TBD: details of additional operations*

      <h3 id="tag/volumeSeriesRequest/AccessControl">Access Control</h3>
      **Access Control**: Creating requests that include a [CREATE](#tag/volumeSeriesRequest/CREATE) operation require [volumeSeriesOwner capability](#tag/capability/volumeSeriesOwner).
      The [ALLOCATE_CAPACITY](#tag/volumeSeriesRequest/ALLOCATE_CAPACITY) and [DELETE_SPA](#tag/volumeSeriesRequest/DELETE_SPA) operations require the [cspDomainManagement capability](#tag/capability/cspDomainManagement).
      The [CG_SNAPSHOT_CREATE](#tag/volumeSeriesRequest/CG_SNAPSHOT_CREATE) requires [volumeSeriesOwner capability](#tag/capability/volumeSeriesOwner) and the consistency group being operated upon must be owned by the account.
      The remaining operations require [volumeSeriesOwner capability](#tag/capability/volumeSeriesOwner) and the volume series being operated upon must be owned by the account.
      In addition, all of the operation-specific objects referenced must be visible to the account creating the request.
      See each object's fetch requirements for the required capabilities.

      The *accountId* and *tenantAccountId* properties within the *volumeSeriesCreateSpec* are used to perform
      access control checks. These properties are automatically set when the request is created based on the authentication
      information (see [User](#tag/user)). The [volumeSeriesOwner capability](#tag/capability/volumeSeriesOwner) allows the owner account to fetch, cancel or delete requests for
      that *accountId*. The [cspDomainManagement capability](#tag/capability/cspDomainManagement) allows requests with the *tenantAccountId* set to that tenant's account to be
      fetched, cancelled or deleted. Requests can only be modified by clients holding a trusted credential.

      <h3 id="tag/volumeSeriesRequest/CRUDE">CRUD Events</h3>
      **CRUD event scope map properties** (see [Watchers](#tag/watchers))
      | Property | Notes |
      |----------|-------------|
      | consistencyGroupId | If set |
      | clusterId | |
      | *meta.id* | On creation only |
      | meta.version ||
      | nodeId ||
      | parentId | Present if known to be a child of another VSR |
      | requestedOperations | On creation only. Comma-separated list of operations in normalized order |
      | syncCoordinatorId | Present only when the syncPeers map is not empty |
      | volumeSeriesId ||
      | volumeSeriesRequestState ||

  - name: watchers
    description: |
      A Watcher is a construct used to monitor changes to persistent objects modified by CRUD operations.
      It is created with the [watcherCreate](#operation/watcherCreate) operation and then a stream of
      *CrudEvents* matched by the Watcher can be obtained through a WebSocket created by the
      [watcherFetch](#operation/watcherFetch) operation.

      When creating a Watcher one specifies pattern matching rules that are used to match CRUD operations of
      interest, in terms of the the following properties:
      | Property | Description |
      |----------|-------------|
      | Method   | The HTTP verb used. Only "POST", "PATCH" and "DELETE" are relevant in this context. |
      | URI      | The RequestURI of the call, stripped of its leading base path prefix. |
      | Scope    | A set of object specific contextual property values - see individual object descriptions for details. |

      The *Scope* property is matched against a string composed of space separated sequences of *name:value* pairs
      where each *name* is a (derived) property of the object modified.
      The sequence is ordered in ascending lexicographic order of *name*.

      Note that *CrudEvents* do not contain the object corresponding to the event - it must be explicitly fetched.

      **Access Control**: Any authenticated client can create a Watcher. Events will only be returned to that client if
      the account of that client can fetch the object affected by the CRUD operation based on the credentials used on
      the [watcherFetch](#operation/watcherFetch) operation.
      See each object's fetch requirements for the required capabilities.

# common parameter specifications (not global parameters!)
parameters:
  idPathParam:
    name: id
    description: Specify an object ID.
    in: path
    required: true
    type: string
    minLength: 1
  namePathParam:
    name: name
    description: Specify the name of the object.
    in: path
    required: true
    type: string
    minLength: 1
  accountIdQueryParam:
    name: accountId
    in: query
    required: false
    type: string
    description: The ID of the owner Account object.
  authorizedAccountIdQueryParam:
    name: authorizedAccountId
    in: query
    required: false
    type: string
    description: The ID of the authorized Account object.
  authorizedAccountIdRequiredQueryParam:
    name: authorizedAccountId
    in: query
    required: true
    type: string
    description: The ID of the authorized Account object.
  clusterIdQueryParam:
    name: clusterId
    type: string
    in: query
    required: false
    description: The ID of a Cluster object.
  consistencyGroupIdQueryParam:
    name: consistencyGroupId
    type: string
    in: query
    required: false
    description: The id of a ConsistencyGroup object
  countOnlyQueryParam:
    name: countOnly
    type: boolean
    in: query
    required: false
    description: |
      Suppresses the response body in a list operation.
      The number of items that would be returned can be determined from the **Total-Count** in the response header.
  cspDomainIdQueryParam:
    name: cspDomainId
    in: query
    required: false
    type: string
    description: The ID of a CSPDomain object.
  cspDomainTypeQueryParam:
    name: cspDomainType
    in: query
    type: string
    required: false
    minLength: 1
    description: Specify the name of a Cloud Service Provider domain type.
  listLimitQueryParam:
    name: limit
    in: query
    required: false
    type: integer
    format: int32
    minimum: 1
    description: Limit the number of objects returned in a list.
  listSkipQueryParam:
    name: skip
    in: query
    required: false
    type: integer
    format: int32
    minimum: 1
    description: The number of objects to skip in the returned list.
  nameQueryParam:
    name: name
    description: Specify the name of the object. Names may be unique relative to the object type specific context.
    in: query
    required: false
    type: string
    minLength: 1
  namePatternQueryParam:
    name: namePattern
    description: Specify a pattern to match object names.
    in: query
    required: false
    type: string
    minLength: 1
  nodeIdQueryParam:
    name: nodeId
    type: string
    in: query
    required: false
    description: The ID of a Node object.
  nuvoServiceHeartbeatTimeGEQueryParam:
    name: serviceHeartbeatTimeGE
    in: query
    type: string
    format: date-time
    description: Specify a lower bound for the **service.heartbeatTime** property value.
  nuvoServiceHeartbeatTimeLEQueryParam:
    name: serviceHeartbeatTimeLE
    in: query
    type: string
    format: date-time
    description: Specify an upper bound for the **service.heartbeatTime** property value.
  nuvoServiceStateEQQueryParam:
    name: serviceStateEQ
    in: query
    required: false
    type: string
    description: Specify a **service.state** property value. Do not specify with *serviceStateNE*.
  nuvoServiceStateNEQueryParam:
    name: serviceStateNE
    in: query
    required: false
    type: string
    description: Specify a **service.state** property value to not match. Do not specify with *serviceStateEQ*.
  protectionDomainIdQueryParam:
    name: protectionDomainId
    in: query
    required: false
    type: string
    description: The ID of a ProtectionDomain object.
  protectionDomainIdRequiredQueryParam:
    name: protectionDomainId
    in: query
    required: true
    type: string
    description: The ID of a ProtectionDomain object.
  servicePlanIdQueryParam:
    name: servicePlanId
    type: string
    in: query
    required: false
    description: The ID of a ServicePlan object.
  servicePlanIdRequiredQueryParam:
    name: servicePlanId
    type: string
    in: query
    required: true
    description: The ID of a ServicePlan object.
  servicePlanAllocationIdQueryParam:
    name: servicePlanAllocationId
    type: string
    in: query
    required: false
    description: The ID of a ServicePlanAllocation object.
  storageIdQueryParam:
    name: storageId
    type: string
    in: query
    required: false
    description: The ID of a Storage object.
  poolIdQueryParam:
    name: poolId
    type: string
    in: query
    required: false
    description: The ID of a Pool object.
  snapshotIdQueryParam:
    name: snapshotId
    type: string
    in: query
    required: false
    description: The ID of a Snapshot object.
  snapIdentifierQueryParam:
    name: snapIdentifier
    type: string
    in: query
    required: false
    description: The identifier of a snapshot.
  sortKeysAscendingQueryParam:
    name: sortAsc
    type: array
    in: query
    required: false
    description: |
      Specify keys to sort a list in ascending order.
      The parameter value can be of the following forms:
      | Parameter Form |  Meaning |
      |----------------|----------|
      | Name  | The *Name* refers to a top-level property with a basic data type (i.e. time, int, string, etc). |
      | Name.Field | The *Name* property must be an object, and the *Field* must refer to a key or property within that object. e.g. meta.timeModified |
    items:
      type: string
      minLength: 1
    collectionFormat: csv
  sortKeysDescendingQueryParam:
    name: sortDesc
    type: array
    in: query
    required: false
    description:  |
      Specify keys to sort a list in descending order.
      The parameter value can be of the following forms:
      | Parameter Form |  Meaning |
      |----------------|----------|
      | Name  | The *Name* refers to a top-level property with a basic data type (i.e. time, int, string, etc). |
      | Name.Field | The *Name* property must be an object, and the *Field* must refer to a key or property within that object. e.g. meta.timeModified |
    items:
      type: string
      minLength: 1
    collectionFormat: csv
  sumQueryParam:
    name: sum
    description: |
      Specify aggregation properties of the object whose sum should be computed and returned.
      The parameter value can be of the following forms:
      | Parameter Form |  Meaning |
      |----------------|----------|
      | Name  | The *Name* refers to a top-level property of the object. |
      | Name.Field[.SubField]* | The *Name* property must be an object, and the *Field* must refer to a key or property within that object. Deeply nested properties can be referenced by specifying additional *SubField* properties denoting the path to the desired value. |
      In either case, if the type of the value at the specified name or path is not numeric, the sum will be zero.
      Sums of *meta* attribute fields are not currently supported and will return zero.
    in: query
    required: false
    type: array
    items:
      type: string
      minLength: 1
    collectionFormat: multi
  stateEQQueryParam:
    name: stateEQ
    in: query
    required: false
    type: string
    description: Specify a **state** property value. Do not specify with *stateNE*.
  stateNEQueryParam:
    name: stateNE
    in: query
    required: false
    type: string
    description: Specify a **state** property value to not match. Do not specify with *stateEQ*.
  storageTypeQueryParam:
    name: cspStorageType
    description: Specify the name of a CSP storage type.
    in: query
    required: false
    type: string
    minLength: 1
  systemTagsQueryParam:
    name: systemTags
    description: Specify a list of system tags to match.
    in: query
    required: false
    type: array
    items:
      type: string
      minLength: 1
    collectionFormat: multi
  tagsQueryParam:
    name: tags
    description: Specify a list of tags to match.
    in: query
    required: false
    type: array
    items:
      type: string
      minLength: 1
    collectionFormat: multi
  tenantAccountIdQueryParam:
    name: tenantAccountId
    in: query
    required: false
    type: string
    description: Queries for objects whose tenantAccountId matches the specified value.
    minLength: 1
  updateAppendQueryParam:
    name: append
    description: |
      Specify how attribute values are to be extended. The parameter value can be of the following forms:
      | Parameter Form |  Meaning |
      |----------------|----------|
      | Name  | The *Name* attribute must be an **array** or a **map with string keys**. If an array then the values of this attribute in the body are to be added to the object if they do not already exist. If a map then the keys of this map in the body will be set in the object. |
      It is an error to specify any name other than that of attributes that are permitted to be modified.
      **Append** is processed after the **remove** and before the **set** update parameters.
      Conflicting or ambiguous specification between the update parameters will result in an error.
    in: query
    required: false
    type: array
    items:
      type: string
      minLength: 1
    collectionFormat: multi
  updateRemoveQueryParam:
    name: remove
    description: |
      Specify how attribute values are to be removed. The parameter value can be of the following forms:
      | Parameter Form |  Meaning |
      |----------------|----------|
      | Name  | The *Name* attribute must be an **array** or a **map with string keys**. If an array then the values of this attribute in the body are to be removed from the object if they exist. If a map then the keys of this map in the body will be removed in the object. |
      It is an error to specify any name other than that of attributes that are permitted to be modified.
      **Remove** is processed first among the update parameters.
      Conflicting or ambiguous specification between the update parameters will result in an error.
    in: query
    required: false
    type: array
    items:
      type: string
      minLength: 1
    collectionFormat: multi
  updateSetQueryParam:
    name: set
    description: |
      Specify how attribute values are to be set.  The parameter value can be of the following forms:
      | Parameter Form |  Meaning |
      |----------------|----------|
      | Name  | The *Name* attribute can be of any data type and the value of this attribute in the body will be set in the object. |
      | Name.Field | The *Name* attribute must be a **struct** (object or map with string keys) and the specified *Field* will be set in the object from the corresponding field in the body. |
      | Name.Index | The *Name* attribute must be an **array** and the element at the specified 0 based *Index* position in the object will be set from the corresponding element in the body. |
      It is an error to specify any name other than that of attributes that are permitted to be modified.
      Do not use both the *Name* form and the *Name.X* form for the same name.
      **Set** is processed last among the update parameters.
      Conflicting or ambiguous specification between the update parameters will result in an error.
    in: query
    required: false
    type: array
    items:
      type: string
      minLength: 1
    collectionFormat: multi
  updateVersionQueryParam:
    name: version
    in: query
    required: false
    type: integer
    format: int32
    minimum: 1
    description: |
      Specify the version of the object to be updated. The update will fail if the version in the database
      has changed.  If unspecified no version check will be performed.
  updateRequiredVersionQueryParam:
    name: version
    in: query
    required: true
    type: integer
    format: int32
    minimum: 1
    description: |
      Specify the version of the object to be updated. The update will fail if the version in the database
      has changed.
  volumeSeriesIdQueryParam:
    name: volumeSeriesId
    type: string
    in: query
    required: false
    description: The ID of a [VolumeSeries](#tag/volumeSeries) object.

# common response specifications (not global responses!)
responses:
  default:
    description: Generic error response that returns a message and an optional HTTP code.
    schema:
      $ref: "#/definitions/error"
  idNotFound:
    description: The object specified by the id parameter was not found
  idVersionNotFound:
    description: The object specified by the id parameter was not found or the specified version is not current
  updateConflict:
    description: The update requested invalidates some constraints on this object
  updateInvalidRequest:
    description: An invalid update request was made or no changes were requested

paths:
  /accounts:
    get:
      operationId: accountList
      tags:
        - account
      description: |
        List all Account objects.  Optionally filter the result by specifying a query.
        The *snapshotManagementPolicy* and *vsrManagementPolicy* properties will provide a means to determine if the policy is inherited from the System policy or explicitly set.

        The *accountSecret* parameter is for internal use only and must be specified together with the *clusterId* and *cspDomainId* parameters.
        The *clusterId* parameter is ignored if *accountSecret* is not specified.
        The *cspDomainId* parameter, if not specified with *accountSecret*, constraints the listing to include those Account objects that reference the specified
        [CSPDomain](#tag/cspDomain) in their *protectionDomains* map or locally defined *snapshotCatalogPolicy* properties.
      parameters:
        - $ref: "#/parameters/nameQueryParam"
        - $ref: "#/parameters/tagsQueryParam"
        - $ref: "#/parameters/tenantAccountIdQueryParam"
        - name: userId
          in: query
          type: string
          description: Queries for accounts that contain the userId in the userRoles.
          minLength: 1
        - name: accountSecret
          in: query
          type: string
          description: |
            Searches for an account that is identified by the specified secret value found in
            the [Cluster](#tag/cluster) object specified by the *clusterId* query parameter
            in the [CSPDomain](#tag/cspDomain) object specified by the *cspDomainId* query parameter.
            Internal use only.
        - $ref: "#/parameters/clusterIdQueryParam"
        - $ref: "#/parameters/cspDomainIdQueryParam"
      responses:
        200:
          description: List of Account objects
          schema:
            type: array
            items:
              $ref: "#/definitions/Account"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 403 | Unauthorized access or forbidden operation |
          schema:
            $ref: "#/definitions/error"
    post:
      operationId: accountCreate
      tags:
        - account
      description: |
        Create an Account object. The name must not contain any slash ("/") characters.
        The name must be distinct among all Account objects with the same *tenantAccountId*.
        Names of accounts with no *tenantAccountId* must also be distinct among such accounts.

        The Account name "System" is reserved.

        The *accountRoles* property is reserved for future use and must be empty on creation; it is automatically populated.

        The *snapshotManagementPolicy* and *vsrManagementPolicy* properties are optional at the time of Account creation.
        If they are not specified the global corresponding policies from [System](#tag/system) object will be inherited.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/Account"
      responses:
        201:
          description: Created the Account
          schema:
            $ref: "#/definitions/Account"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 409 | The name is not unique |
          schema:
            $ref: "#/definitions/error"

  /accounts/{id}:
    get:
      operationId: accountFetch
      tags:
        - account
      description: |
        Fetch an Account object by ID.
        The *snapshotManagementPolicy* and *vsrManagementPolicy* properties will provide a means to determine if the policy is inherited from the System policy or explicitly set.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/Account"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: accountUpdate
      tags:
        - account
      description: |
        Update an Account object by replacing the properties specified in the payload.

        It is possible to rename an Account object as long as the new name is distinct,
        except for the **System** account.

        It is possible to set either of *snapshotManagementPolicy* or *vsrManagementPolicy* to corresponding global property
        of the same name in the [System](#tag/system) object by setting their *inherited* field values to "true"
        (other fields within that policy property will be ignored when this is done).
        Any modifications to the existing policy are allowed only when its *inherited* flag is set to "false".
        When the *inherited* field value for either policy gets set to "false" *all* the policy property fields must be specified in order to properly replace the existing settings.
        Fetching or listing Account object(s) prior to making any modifications to either of above policies are helpful in providing an example of what values must be provided.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/AccountMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/Account"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 403 | Unauthorized access or forbidden operation |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | The update requested invalidates some constraints on this object |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: accountDelete
      tags:
        - account
      description: |
        Delete an Account object and associated SLO objects.
        Deleting the **System** Account is not permitted.

        TBD - determine how to release the storage of the account
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        204:
          description: Account deleted
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 403 | Unauthorized access or forbidden operation |
            | 404 | The object specified by the id parameter was not found |
            | 409 | There are still other objects associated with the Account |
          schema:
            $ref: "#/definitions/error"

  /accounts/{id}/protection-domains:
    delete:
      operationId: accountProtectionDomainClear
      tags:
        - account
      description: |
        Remove an association from the **protectionDomains** map.

        If the **cspDomainId** query parameter is set then only the direct association for the
        [ProtectionStore](#tag/protectionStore) represented by the specified [CSPDomain](#tag/cspDomain)
        is removed (though an indirect association may still be defined via the **DEFAULT** association).
        If the **cspDomainId** query parameter is not specified then the **DEFAULT** association is cleared, which impacts all [ProtectionStores](#tag/protectionStore) that
        do not have direct associations.

        It is not possible to remove an association, be it direct or indirect,
        if there are any [VolumeSeries](#tag/volumeSeries) objects owned by the account
        that are mounted or could potentially be mounted in some [Cluster](#tag/cluster) in any of the
        [CSPDomain](#tag/cspDomain) objects impacted by the removal.
        Only unbound [VolumeSeries](#tag/volumeSeries) objects have no association to any
        [CSPDomain](#tag/cspDomain).
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/cspDomainIdQueryParam"
      responses:
        200:
          description: The association was cleared
          schema:
            $ref: "#/definitions/Account"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 403 | Unauthorized use of the method |
            | 409 | There are bound [VolumeSeries](#tag/volumeSeries) objects that reference an impacted protection store |
          schema:
            $ref: "#/definitions/error"
    post:
      operationId: accountProtectionDomainSet
      tags:
        - account
      description: |
        Add an association to the **protectionDomains** map.

        If the **cspDomainId** query parameter is set then a direct association between
        the specified [ProtectionDomain](#tag/protectionDomain) and the
        [ProtectionStore](#tag/protectionStore) represented by that [CSPDomain](#tag/cspDomain)
        is established, replacing any previously established association.
        If the **cspDomainId** query parameter is not set then the **DEFAULT** association
        is created between the specified [ProtectionDomain](#tag/protectionDomain) and any
        [ProtectionStore](#tag/protectionStore) for which a direct association has not been defined.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/cspDomainIdQueryParam"
        - $ref: "#/parameters/protectionDomainIdRequiredQueryParam"
      responses:
        200:
          description: The association was established
          schema:
            $ref: "#/definitions/Account"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 403 | Unauthorized use of the method |
          schema:
            $ref: "#/definitions/error"

  /accounts/{id}/secrets:
    post:
      operationId: accountSecretRetrieve
      tags:
        - account
      description: |
        Return the Account secret for a cluster, creating it if necessary.
        Internal access only.

        **Note**: The implementation may use a single secret for all clusters if determined by policy settings on the [Cluster](#tags/cluster) object.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - name: clusterId
          type: string
          in: query
          required: true
          description: |
            The id of a Cluster object.
      responses:
        200:
          description: |
            Found.
          schema:
            $ref: "#/definitions/valueType"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 403 | Unauthorized use of the method |
            | 404 | The object specified by the id parameter was not found |
            | 409 | There is no protection domain associated with the protection store of the cluster |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: accountSecretReset
      tags:
        - account
      description: |
        Resets the Account secrets.
        Only an authorized user of the account or the account identified by the *tenantAccountId* property may perform this operation.

        The behavior of the operation is affected by the value of the **accountSecretScope** and **recursive**
        parameters as described in the table below:
        | accountSecretScope | recursive | Action |
        |--------------|-----------|----------|
        | CLUSTER      | *NA*     | The CLUSTER scoped secret for the specific [Cluster](#tag/cluster) identified by *clusterId* will be reset |
        | CSPDOMAIN    | false     | The CSPDOMAIN scoped secret for the [CSPDomain](#tag/cspDomain) identified by *cspDomainId* will be reset; CLUSTER scoped secrets issued for individual [Clusters](#tag/cluster) in the domain are not affected |
        | CSPDOMAIN    | true      | The secrets for all [Clusters](#tag/cluster) in the domain identified by *cspDomainId* will be reset |
        | GLOBAL       | false     | The GLOBAL scoped secret is reset; secrets issued with other scope values are not affected |
        | GLOBAL       | true      | All secrets are reset |
      parameters:
        - $ref: "#/parameters/idPathParam"
        - name: accountSecretScope
          in: query
          type: string
          required: true
          description: The secret scope value.
        - name: recursive
          in: query
          type: boolean
          description: Applies the operation recursively within the specified scope.
        - $ref: "#/parameters/clusterIdQueryParam"
        - $ref: "#/parameters/cspDomainIdQueryParam"
      responses:
        204:
          description: Secrets were reset.
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 403 | Unauthorized use of the method |
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"

  /application-groups:
    get:
      operationId: applicationGroupList
      tags:
        - applicationGroup
      description: |
        List all ApplicationGroup objects. Optionally filter the result by specifying a query.

        Unlike most query parameters, the *accountId* and *tenantAccountId* query parameters match objects with
        either specified value, subject to access control. It is generally unnecessary to pass either parameter, the RBAC will automatically filter the returned objects to those the caller can view.
        However, if the caller is a tenant admin, passing the *accountId* can be used to restrict the returned objects to those owned by the tenant account or those of a specific subordinate account.
      parameters:
        - $ref: "#/parameters/accountIdQueryParam"
        - $ref: "#/parameters/nameQueryParam"
        - $ref: "#/parameters/tagsQueryParam"
        - $ref: "#/parameters/tenantAccountIdQueryParam"
        - $ref: "#/parameters/systemTagsQueryParam"
      responses:
        200:
          description: List of ApplicationGroup objects
          schema:
            type: array
            items:
              $ref: "#/definitions/ApplicationGroup"
        default:
          $ref: "#/responses/default"
    post:
      operationId: applicationGroupCreate
      tags:
        - applicationGroup
      description: |
        Create an ApplicationGroup object in the context of an Account object.
        The name must be unique in the context of its Account.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ApplicationGroup"
      responses:
        201:
          description: Created the ApplicationGroup
          schema:
            $ref: "#/definitions/ApplicationGroup"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 409 | The name is not unique |
          schema:
            $ref: "#/definitions/error"

  /application-groups/{id}:
    parameters:
      - $ref: "#/parameters/idPathParam"
    get:
      operationId: applicationGroupFetch
      tags:
        - applicationGroup
      description: |
        Fetch an ApplicationGroup object by ID.
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/ApplicationGroup"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: applicationGroupUpdate
      tags:
        - applicationGroup
      description: |
        Update an ApplicationGroup object by replacing the properties specified in the payload.
        It is possible to rename an ApplicationGroup as long as the new name is distinct
        among its siblings in the context of the related Account object.
      parameters:
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ApplicationGroupMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/ApplicationGroup"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 403 | A specified object is not accessible to this account or an attempt is made to change a non-modifiable property |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | The name is not unique within the account |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: applicationGroupDelete
      tags:
        - applicationGroup
      description: |
        Delete an ApplicationGroup object.
      responses:
        204:
          description: The ApplicationGroup object was deleted.
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
            | 409 | There are still ConsistencyGroup objects associated with the ApplicationGroup |
          schema:
            $ref: "#/definitions/error"

  /audit-log-records:
    get:
      operationId: auditLogList
      tags:
        - auditLog
      description: |
        List AuditLogRecord objects. Optionally filter the result by specifying a query.
        The objects are returned in ascending *recordNum* order.

        When the *related* query parameter is true, some of the other parameters apply to the initial set of records and some
        apply to the result set of related records. A record is considered to be related if its *refObjectId* matches the *objectId*
        of any record in the initial set and subsequently applied transitively to that intermediate result set until all related records are found.
        | Property        | Application |
        |-----------------|-------------|
        | accountId       | initial set |
        | objectId        | initial set, required |
        | tenantAccountId | initial set |
        | userId          | initial set |
        | action          | result set |
        | classification  | result set |
        | count           | result set |
        | error           | result set |
        | name            | result set |
        | objectType      | result set |
        | recordNumGE     | result set |
        | recordNumLE     | result set |
        | timeStampGE     | result set |
        | timeStampLE     | result set |

        *TBD* - support other sorting orders based on GUI requirements
      parameters:
        - $ref: "#/parameters/accountIdQueryParam"
        - $ref: "#/parameters/nameQueryParam"
        - $ref: "#/parameters/tenantAccountIdQueryParam"
        - name: classification
          in: query
          type: string
          description: Selects AuditLogRecord objects with the specified *classification* value, case-insensitive.
        - name: action
          in: query
          type: array
          items:
            type: string
            minLength: 1
          collectionFormat: multi
          description: |
            The action being performed. The values are generally derived from the operations in this specification (without the objectType), case-insensitive.
            The full set of possible values for the "annotation" *classification* is TBD. Typical values are
            - create
            - delete
            - note (default for "annotation" *classification*)
            - update
        - name: count
          in: query
          type: integer
          format: int32
          minimum: 1
          description: Specify the maximum number of AuditLogRecord objects to return.
        - name: error
          in: query
          type: boolean
          description: Selects AuditLogRecord objects with the specified *error* value.
        - name: objectId
          in: query
          type: string
          description: The ID of the object accessed.
        - name: objectType
          in: query
          type: string
          description: The type of object being accessed. The filter is case-insensitive. The type is derived from the tags (object types) in this specification.
        - name: recordNumGE
          in: query
          required: false
          type: integer
          format: int32
          minimum: 1
          description: Specify a lower bound for the *recordNum* value.
        - name: recordNumLE
          in: query
          type: integer
          format: int32
          minimum: 1
          description: Specify an upper bound for the *recordNum* value.
        - name: related
          in: query
          type: boolean
          description: |
            Also select all AuditLogRecord objects related to the records that match the other query parameters.
            The selection depends primarily on the *objectId*, which is required when *related* is specified.
        - name: timeStampGE
          in: query
          type: string
          format: date-time
          description: Specify a lower bound for the *timeStamp* value.
        - name: timeStampLE
          in: query
          type: string
          format: date-time
          description: Specify an upper bound for the *timeStamp* value.
        - name: userId
          in: query
          type: string
          description: The ID of a User object.
      responses:
        200:
          description: List of AuditLogRecord objects
          schema:
            type: array
            items:
              $ref: "#/definitions/AuditLogRecord"
        default:
          $ref: "#/responses/default"
    post:
      operationId: auditLogCreate
      tags:
        - auditLog
      description: |
        Create a new AuditLogRecord object.
        Currently, only records with *classification* property set to "annotation" can be created via this operation.
        Records with *classification* property set to "annotation" require either the *parentNum* or the *objectId* properties to be specified.
        When *parentNum* is specified, the *refObjectId* is cleared, and the *objectId* and *objectType* are automatically
        set from the parent record, which must exist and be visible to the caller.
        The identity properties (*accountId*, *accountName*, *authIdentifier*, *tenantAccountId* and *userId*) are automatically
        set based on the provided authentication information (see [User](#tag/user)).
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/AuditLogRecord"
      responses:
        201:
          description: Created the AuditLogRecord
          schema:
            $ref: "#/definitions/AuditLogRecord"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 403 | Unauthorized access or forbidden operation |
          schema:
            $ref: "#/definitions/error"

  /clusters:
    get:
      operationId: clusterList
      tags:
        - cluster
      description: |
        List all Cluster objects.  Optionally filter the result by specifying a query.
      parameters:
        - $ref: "#/parameters/accountIdQueryParam"
        - $ref: "#/parameters/authorizedAccountIdQueryParam"
        - $ref: "#/parameters/nameQueryParam"
        - $ref: "#/parameters/tagsQueryParam"
        - $ref: "#/parameters/cspDomainIdQueryParam"
        - name: clusterIdentifier
          in: query
          type: string
          description: The unique identifier of the cluster in the CSP domain.
        - name: clusterType
          in: query
          type: string
          description: The type of cluster.
        - name: clusterVersion
          in: query
          type: string
          description: The cluster software version.
        - $ref: "#/parameters/nuvoServiceHeartbeatTimeGEQueryParam"
        - $ref: "#/parameters/nuvoServiceHeartbeatTimeLEQueryParam"
        - $ref: "#/parameters/nuvoServiceStateEQQueryParam"
        - $ref: "#/parameters/nuvoServiceStateNEQueryParam"
        - $ref: "#/parameters/stateEQQueryParam"
        - $ref: "#/parameters/stateNEQueryParam"
      responses:
        200:
          description: List of Cluster objects
          schema:
            type: array
            items:
              $ref: "#/definitions/Cluster"
        default:
          $ref: "#/responses/default"
    post:
      operationId: clusterCreate
      tags:
        - cluster
      description: |
        Create a Cluster object.
        A cluster name must be unique within the context of its [CSPDomain](#tag/cspDomain) object.
        There could be multiple such objects created for a particular CSPDomain.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ClusterCreateArgs"
      responses:
        201:
          description: Created the Cluster
          schema:
            $ref: "#/definitions/Cluster"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 409 | The name or cluster identifier is not unique |
          schema:
            $ref: "#/definitions/error"

  /clusters/{id}:
    get:
      operationId: clusterFetch
      tags:
        - cluster
      description: |
        Fetch an Cluster object by ID.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/Cluster"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: clusterUpdate
      tags:
        - cluster
      description: |
        Update a Cluster object by replacing the properties specified in the payload.
        It is possible to rename an Cluster object as long as the new name is distinct.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ClusterMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/Cluster"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 403 | Unauthorized use of the method |
            | 404 | The object specified by the id parameter was not found |
            | 409 | The update requested invalidates some constraints on this object |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: clusterDelete
      tags:
        - cluster
      description: |
        Delete a Cluster object.

        TBD - determine how to release the Storage and Nodes of the Cluster
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        204:
          description: Cluster deleted
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
            | 409 | There are still Node or active StorageRequest objects associated with the Cluster |
          schema:
            $ref: "#/definitions/error"

  /clusters/{id}/account-secret:
    get:
      operationId: clusterAccountSecretFetch
      tags:
        - cluster
      description: |
        Returns the account secret for a cluster in a format suitable for the cluster type.
        This secret is suitable for pre-provisioned cluster volumes.
        It may also be used for dynamically provisioned cluster volumes if no runtime customization is desired.

        See [servicePlanAllocationCustomizeProvisioning](#operation/servicePlanAllocationCustomizeProvisioning)
        for details on how to customize dynamically provisioned cluster volumes and the format
        of the secret for particular cluster types.

        **Note**: The implementation may use a single secret for all clusters if determined by policy settings on the [Cluster](#tags/cluster) object.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/authorizedAccountIdRequiredQueryParam"
        - name: k8sNamespace
          in: query
          type: string
          description: |
            In a Kubernetes cluster this specifies the namespace of the Secret object.
            If unspecified "default" is used.
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/valueType"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Insufficient data or required properties are invalid or missing |
            | 403 | Unauthorized use of the method |
            | 404 | The object specified by the id parameter was not found |
            | 409 | Invalid cluster object state or there is no protection domain associated with the protection store of the cluster |
          schema:
            $ref: "#/definitions/error"

  /clusters/{id}/orchestrator:
    get:
      operationId: clusterOrchestratorGetDeployment
      tags:
        - cluster
      description: |
        Obtain the deployment configuration necessary to install the Nuvoloso software
        to manage the cluster represented by this object.
        The data should be saved in a file and processed with appropriate cluster
        orchestrator command.

        For example, in a Kubernetes cluster one would use
        `kubectl apply -f filename`.

        The operation requires that the *managementHost* property be present in the
        associated [CSPDomain](#tag/cspDomain) object and that the Cluster object be
        in the DEPLOYABLE state.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - name: orchestratorVersion
          in: query
          type: string
          description: Specify the cluster orchestrator version. If orchestratorType is specified then this must be specified. Default for Kubernetes is "1.14.6".
          required: false
        - name: orchestratorType
          in: query
          type: string
          description: Specify the cluster orchestrator type. If specified then the orchestratorVersion must also be specified. Default is "kubernetes".
          required: false
      responses:
        200:
          description: Cluster configuration returned
          schema:
            type: object
            properties:
              deployment:
                type: string
                description: Configuration data for the appropriate cluster configuration command.
              format:
                type: string
                description: The format of the returned data.
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Insufficient data to process the request |
            | 403 | Unauthorized use of the method |
            | 404 | The object specified by the id parameter was not found |
            | 409 | Invalid cluster object state |
          schema:
            $ref: "#/definitions/error"

  /consistency-groups:
    get:
      operationId: consistencyGroupList
      tags:
        - consistencyGroup
      description: |
        List all ConsistencyGroup objects. Optionally filter the result by specifying a query.
        The *snapshotManagementPolicy* property will provide a means to determine if the policy is inherited from the owner Account policy or explicitly set.

        Unlike most query parameters, the *accountId* and *tenantAccountId* query parameters match objects with
        either specified value, subject to access control. It is generally unnecessary to pass either parameter, the RBAC will automatically filter the returned objects to those the caller can view.
        However, if the caller is a tenant admin, passing the *accountId* can be used to restrict the returned objects to those owned by the tenant account or those of a specific subordinate account.
      parameters:
        - $ref: "#/parameters/accountIdQueryParam"
        - name: applicationGroupId
          type: string
          in: query
          required: false
          description: The id of an ApplicationGroup object
        - $ref: "#/parameters/nameQueryParam"
        - $ref: "#/parameters/tagsQueryParam"
        - $ref: "#/parameters/tenantAccountIdQueryParam"
        - $ref: "#/parameters/systemTagsQueryParam"
      responses:
        200:
          description: List of ConsistencyGroup objects
          schema:
            type: array
            items:
              $ref: "#/definitions/ConsistencyGroup"
        default:
          $ref: "#/responses/default"
    post:
      operationId: consistencyGroupCreate
      tags:
        - consistencyGroup
      description: |
        Create a ConsistencyGroup object in the context of an Account object.
        The name must be unique in the context of its Account.

        The *snapshotManagementPolicy* property is optional at the time of ConsistencyGroup creation.
        If it is not specified the corresponding policy from its [Account](#tag/account) object will be inherited.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ConsistencyGroup"
      responses:
        201:
          description: Created the ConsistencyGroup
          schema:
            $ref: "#/definitions/ConsistencyGroup"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 409 | The name is not unique |
          schema:
            $ref: "#/definitions/error"

  /consistency-groups/{id}:
    parameters:
      - $ref: "#/parameters/idPathParam"
    get:
      operationId: consistencyGroupFetch
      tags:
        - consistencyGroup
      description: |
        Fetch a ConsistencyGroup object by ID.
        The *snapshotManagementPolicy* property will provide a means to determine if the policy is inherited from the owner Account policy or explicitly set.
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/ConsistencyGroup"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: consistencyGroupUpdate
      tags:
        - consistencyGroup
      description: |
        Update a ConsistencyGroup object by replacing the properties specified in the payload.
        It is possible to rename a ConsistencyGroup as long as the new name is distinct
        among its siblings in the context of the related Account object.

        It is possible to set *snapshotManagementPolicy* to the corresponding property in the parent [Account](#tag/account) object
        by setting its *inherited* field value to "true" (other fields within that policy property will be ignored when this is done).
        Any modifications to the existing policy are allowed only when its *inherited* flag is set to "false".
        When the *inherited* field value for the policy gets set to "false" *all* the policy property fields must be specified in order to properly replace the existing settings.
        Fetching or listing ConsistencyGroup object(s) prior to making any modifications to the policy are helpful in providing an example of what values must be provided.
      parameters:
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ConsistencyGroupMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/ConsistencyGroup"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 403 | A specified object is not accessible to this account or an attempt is made to change a non-modifiable property |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | The name is not unique within the account |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: consistencyGroupDelete
      tags:
        - consistencyGroup
      description: |
        Delete a ConsistencyGroup object.
      responses:
        204:
          description: The ConsistencyGroup object was deleted.
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
            | 409 | There are still VolumeSeries objects associated with the ConsistencyGroup |
          schema:
            $ref: "#/definitions/error"

  /csp-credentials:
    get:
      operationId: cspCredentialList
      tags:
        - cspCredential
      description: |
        List all CSPCredential objects.  Optionally filter the result by specifying a query.
      parameters:
        - $ref: "#/parameters/accountIdQueryParam"
        - $ref: "#/parameters/nameQueryParam"
        - $ref: "#/parameters/tagsQueryParam"
        - $ref: "#/parameters/cspDomainTypeQueryParam"
      responses:
        200:
          description: List of CSPCredential objects
          schema:
            type: array
            items:
              $ref: "#/definitions/CSPCredential"
        default:
          $ref: "#/responses/default"
    post:
      operationId: cspCredentialCreate
      tags:
        - cspCredential
      description: |
        Create a CSPCredential object.
        The name must be distinct in the context of the [Account](#tag/account) object that owns the object.
        See [CSPCredential](#tag/cspCredential) for details on supported **credentialAttributes**.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/CSPCredential"
      responses:
        201:
          description: Created the CSPCredential
          schema:
            $ref: "#/definitions/CSPCredential"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 409 | The name is not unique |
          schema:
            $ref: "#/definitions/error"

  /csp-credentials/{id}:
    get:
      operationId: cspCredentialFetch
      tags:
        - cspCredential
      description: |
        Fetch a CSPCredential object by ID.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/CSPCredential"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: cspCredentialUpdate
      tags:
        - cspCredential
      description: |
        Update a CSPCredential object by replacing the properties specified in the payload.
        It is possible to rename an CSPCredential object as long as the new name is distinct.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/CSPCredentialMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/CSPCredential"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 404 | The object specified by the id parameter was not found |
            | 409 | The update requested invalidates some constraints on this object |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: cspCredentialDelete
      tags:
        - cspCredential
      description: |
        Delete a CSPCredential object.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        204:
          description: CSPCredential deleted
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
            | 409 | There are CSPDomain objects associated with the CSPCredential |
          schema:
            $ref: "#/definitions/error"

  /csp-credential-metadata/{cspDomainType}:
    get:
      operationId: cspCredentialMetadata
      tags:
        - cspCredential
      description: |
        Fetch attribute meta-data on a specified cloud service provider type CSPCredential object.

        The following *credentialAttributes* are supported for **AWS**:
        | credentialAttribute | Kind | Required | Mutable | Description |
        |---------------------|------|----------|---------|-------------|
        | aws_access_key_id     | STRING | yes | yes | The access identifier of the account |
        | aws_secret_access_key | SECRET | yes | yes | The secret access key of the account |

        The following *credentialAttributes* are supported for **GCP**:
        | credentialAttribute | Kind | Required | Mutable | Description |
        |---------------------|------|----------|---------|-------------|
        | gc_cred | SECRET | yes | yes | The service account credential JSON |

        The following *credentialAttributes* are supported for **Azure**:
        | credentialAttribute | Kind | Required | Mutable | Description |
        |---------------------|------|----------|---------|-------------|
        | azure_client_id | STRING | yes | yes | The identifier of the service principal used for clusters in the domain |
        | azure_client_secret | SECRET | yes | yes | The secret associated with the service principal |
        | azure_tenant_id | STRING | yes | yes | The Azure ActiveDirectory identifier for the service principal |
      parameters:
        - name: cspDomainType
          in: path
          type: string
          required: true
          minLength: 1
      responses:
        200:
          description: Meta-data for the cloud service provider CSPCredential object.
          schema:
            $ref: "#/definitions/CSPCredentialMetadata"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid domain type was specified |
          schema:
            $ref: "#/definitions/error"

  /csp-domains:
    get:
      operationId: cspDomainList
      tags:
        - cspDomain
      description: |
        List all CSPDomain objects.  Optionally filter the result by specifying a query.
      parameters:
        - $ref: "#/parameters/authorizedAccountIdQueryParam"
        - $ref: "#/parameters/accountIdQueryParam"
        - $ref: "#/parameters/nameQueryParam"
        - $ref: "#/parameters/tagsQueryParam"
        - $ref: "#/parameters/cspDomainTypeQueryParam"
        - name: cspCredentialId
          type: string
          in: query
          required: false
          description: The ID of a [CSPCredential](#tag/cspCredential) object which contains authentication information.
      responses:
        200:
          description: List of CSPDomain objects
          schema:
            type: array
            items:
              $ref: "#/definitions/CSPDomain"
        default:
          $ref: "#/responses/default"
    post:
      operationId: cspDomainCreate
      tags:
        - cspDomain
      description: |
        Create a CSPDomain object.
        The name must be distinct in the context of the [Account](#tag/account) object that owns the object.
        See [CSPDomain](#tag/cspDomain) for details on supported **cspDomainAttributes**.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/CSPDomain"
      responses:
        201:
          description: Created the CSPDomain
          schema:
            $ref: "#/definitions/CSPDomain"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 409 | The name is not unique |
          schema:
            $ref: "#/definitions/error"

  /csp-domains/{id}:
    get:
      operationId: cspDomainFetch
      tags:
        - cspDomain
      description: |
        Fetch a CSPDomain object by ID.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/CSPDomain"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: cspDomainUpdate
      tags:
        - cspDomain
      description: |
        Update a CSPDomain object by replacing the properties specified in the payload.
        It is possible to rename an CSPDomain object as long as the new name is distinct.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/CSPDomainMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/CSPDomain"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 404 | The object specified by the id parameter was not found |
            | 409 | The update requested invalidates some constraints on this object |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: cspDomainDelete
      tags:
        - cspDomain
      description: |
        Delete a CSPDomain object.

        TBD - determine how to release the storage of the CSPDomain
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        204:
          description: CSPDomain deleted
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
            | 409 | There are Storage, Pool or active StorageRequest objects associated with the CSPDomain, or references from Account objects or the System object |
          schema:
            $ref: "#/definitions/error"

  /csp-domains/{id}/service-plan-cost:
    get:
      operationId: cspDomainServicePlanCost
      tags:
        - cspDomain
      description: |
        This method computes the cost of [Storage](#tag/storage) for a given [ServicePlan](#tag/servicePlan).
        The computation is based on costs of individual [CSPStorageTypes](#tag/cspStorageType) set in
        the **storageCost** map of the CSPDomain object and a [StorageFormula](#tag/storageFormula)
        appropriate for the **cspDomainType**.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/servicePlanIdRequiredQueryParam"
      responses:
        200:
          description: Computed cost
          schema:
            $ref: "#/definitions/servicePlanCost"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id or servicePlanId parameters were not found |
          schema:
            $ref: "#/definitions/error"

  /csp-domains/{id}/deployment:
    get:
      operationId: cspDomainDeploymentFetch
      tags:
        - cspDomain
      description: |
        **DEPRECATED - WILL BE REMOVED**

        Obtain the deployment configuration necessary to install the Nuvoloso software to manage a cluster (of a specified type) in this CSP domain.
        The software, once installed, will create the [Cluster](#tag/cluster) and [Node](#tag/node) objects that describe the cluster.
        The data should be saved in a file and processed with appropriate cluster configuration command.
        The operation requires that the *managementHost* property be present.

        Cluster objects are created by applying the deployment configuration with the cluster management software.
        If the name property is not set, it will be assigned an internally generated cluster identifier at this time.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/nameQueryParam"
        - name: clusterType
          in: query
          type: string
          description: |
            Specify the type of cluster. The default if unspecified is "kubernetes".
        - name: force
          in: query
          type: boolean
          description: |
            Obtains a copy of a previously issued deployment configuration for an existing cluster object.
            By default this is not permitted to prevent a duplicate deployment.
      responses:
        200:
          description: Cluster configuration returned
          schema:
            type: object
            properties:
              deployment:
                type: string
                description: Configuration data for the appropriate cluster configuration command.
              format:
                type: string
                description: The format of the returned data.
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Insufficient data to process the request or an invalid cluster type specified |
            | 404 | The object specified by the id parameter was not found |
            | 409 | The name is not unique within the CSP domain |
          schema:
            $ref: "#/definitions/error"

  /csp-domain-metadata/{cspDomainType}:
    get:
      operationId: cspDomainMetadata
      tags:
        - cspDomain
      description: |
        Fetch meta-data on a specified cloud service provider type.

        The following *cspDomainAttributes* are supported for **AWS**:
        | cspDomainAttribute | Kind | Required | Mutable | Description |
        |--------------------|------|----------|---------|-------------|
        | aws_availability_zone | STRING | yes |  no | The name of the availability zone (e.g. us-west-2a) |
        | aws_region            | STRING | yes |  no | The name of the region (e.g. us-west-2) |
        | aws_protection_store_bucket_name | STRING | no | no | The AWS bucket name used for persistent storage. If unspecified at creation a default of \"nuvoloso.*UUID*\" is used |

        The following *cspDomainAttributes* are supported for **GCP**:
        | cspDomainAttribute | Kind | Required | Mutable | Description |
        |---------------------|------|----------|---------|-------------|
        | gc_protection_store_bucket_name | STRING | no | no | The GCP bucket name used for persistent storage. If unspecified at creation a default of \"nuvoloso-*UUID*\" is used |
        | gc_zone | STRING | yes |  no | The name of the GCP zone (e.g. us-west1-b) |

        The following *cspDomainAttributes* are supported for **Azure**:
        | cspDomainAttribute | Kind | Required | Mutable | Description |
        |---------------------|------|----------|---------|-------------|
        | azure_subscription_id | STRING | yes | yes | The Azure subscription identifier |
        | azure_resource_group_name | STRING | yes | no | The resource group used to track Azure resources |
        | azure_storage_account_name | STRING | yes | no | The Azure storage account used for blob storage |
        | azure_protection_store_blob_container_name | STRING | no |  no | The name of the protection store blob container. If unspecified at creation a default of \"nuvoloso-*UUID*\" is used | |
      parameters:
        - name: cspDomainType
          in: path
          type: string
          required: true
          minLength: 1
      responses:
        200:
          description: Meta-data for the cloud service provider
          schema:
            $ref: "#/definitions/CSPDomainMetadata"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid domain type was specified |
          schema:
            $ref: "#/definitions/error"

  /csp-storage-types:
    get:
      operationId: cspStorageTypeList
      tags:
        - cspStorageType
      description: |
        List the supported CSP storage types.
      parameters:
        - $ref: "#/parameters/cspDomainTypeQueryParam"
      responses:
        200:
          description: List of supported CSP storage types.
          schema:
            type: array
            items:
              $ref: "#/definitions/CSPStorageType"
        default:
          $ref: "#/responses/default"

  /csp-storage-types/{name}:
    get:
      operationId: cspStorageTypeFetch
      tags:
        - cspStorageType
      description: |
        Fetch a specific CSP storage type.
      parameters:
        - $ref: "#/parameters/namePathParam"
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/CSPStorageType"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the name parameter was not found |
          schema:
            $ref: "#/definitions/error"

  /debug:
    post:
      operationId: debugPost
      tags:
        - serviceDebug
      description: |
        Perform specified debug operation on a service.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/debugSettings"
      responses:
        204:
          description: Specified debug operation was successfully executed.
        default:
          description: |
            The error response includes a code and a message.
          schema:
            $ref: "#/definitions/error"

  /metrics/storage:
    post:
      operationId: storageIOMetricUpload
      tags:
        - metrics
      description: |
        Upload I/O metric data on [Storage](#tag/storage) objects.
        Multiple object data with possibly different timestamps may be in the payload.
        No ordering is implied across the samples in the payload.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ioMetricData"
      responses:
        204:
          description: The metrics data was uploaded.
        default:
          description: |
            The error response includes a code and a message.
          schema:
            $ref: "#/definitions/error"

  /metrics/volume-series:
    post:
      operationId: volumeSeriesIOMetricUpload
      tags:
        - metrics
      description: |
        Upload I/O metric data on [VolumeSeries](#tag/volumeSeries) objects.
        Multiple object data with possibly different timestamps may be in the payload.
        No ordering is implied across the samples in the payload.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ioMetricData"
      responses:
        204:
          description: The metrics data was uploaded.
        default:
          description: |
            The error response includes a code and a message.
          schema:
            $ref: "#/definitions/error"

  /nodes:
    get:
      operationId: nodeList
      tags:
        - node
      description: |
        List all Node objects.  Optionally filter the result by specifying a query.
      parameters:
        - $ref: "#/parameters/clusterIdQueryParam"
        - $ref: "#/parameters/nameQueryParam"
        - $ref: "#/parameters/tagsQueryParam"
        - name: nodeIdentifier
          in: query
          type: string
          description: The unique identifier of the node in the CSP domain.
        - $ref: "#/parameters/nuvoServiceHeartbeatTimeGEQueryParam"
        - $ref: "#/parameters/nuvoServiceHeartbeatTimeLEQueryParam"
        - $ref: "#/parameters/nuvoServiceStateEQQueryParam"
        - $ref: "#/parameters/nuvoServiceStateNEQueryParam"
        - name: nodeIds
          description: |
            An array of node object identifiers.
            This is intended for internal use in the bulk update of specific node objects.
          in: query
          type: array
          items:
            type: string
            minLength: 1
          collectionFormat: multi
        - $ref: "#/parameters/stateEQQueryParam"
        - $ref: "#/parameters/stateNEQueryParam"
      responses:
        200:
          description: List of Node objects
          schema:
            type: array
            items:
              $ref: "#/definitions/Node"
        default:
          $ref: "#/responses/default"
    post:
      operationId: nodeCreate
      tags:
        - node
      description: |
        Create a Node object. The name must be unique across all Node objects in context of a Cluster object.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/Node"
      responses:
        201:
          description: Created the Node
          schema:
            $ref: "#/definitions/Node"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 409 | The name is not unique |
          schema:
            $ref: "#/definitions/error"

  /nodes/{id}:
    parameters:
      - $ref: "#/parameters/idPathParam"
    get:
      operationId: nodeFetch
      tags:
        - node
      description: |
        Fetch a Node object by ID.
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/Node"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: nodeUpdate
      tags:
        - node
      description: |
        Update a Node object by replacing the properties specified in the payload.
        It is possible to rename an Node object as long as the new name is distinct.
      parameters:
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/NodeMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/Node"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | The update requested invalidates some constraints on this object |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: nodeDelete
      tags:
        - node
      description: |
        Delete a Node object.

        TBD - determine how to release the Storage objects of the Node
      responses:
        204:
          description: Node deleted
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
            | 409 | There are still Storage, Pool or active StorageRequest objects associated with the Node |
          schema:
            $ref: "#/definitions/error"

  /pools:
    get:
      operationId: poolList
      tags:
        - pool
      description: |
        List all Pool objects.  Optionally filter the result by specifying a query.
      parameters:
        - $ref: "#/parameters/authorizedAccountIdQueryParam"
        - $ref: "#/parameters/systemTagsQueryParam"
        - $ref: "#/parameters/clusterIdQueryParam"
        - $ref: "#/parameters/cspDomainIdQueryParam"
        - $ref: "#/parameters/storageTypeQueryParam"
        - $ref: "#/parameters/servicePlanAllocationIdQueryParam"
        - name: accessibilityScope
          in: query
          type: string
        - name: accessibilityScopeObjId
          in: query
          type: string
      responses:
        200:
          description: List of Pool objects
          schema:
            type: array
            items:
              $ref: "#/definitions/Pool"
        default:
          $ref: "#/responses/default"
    post:
      operationId: poolCreate
      tags:
        - pool
      description: |
        Create a Pool object.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/PoolCreateArgs"
      responses:
        201:
          description: Created the Pool
          schema:
            $ref: "#/definitions/Pool"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
          schema:
            $ref: "#/definitions/error"

  /pools/{id}:
    get:
      operationId: poolFetch
      tags:
        - pool
      description: |
        Fetch a Pool object by ID.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/Pool"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: poolUpdate
      tags:
        - pool
      description: |
        Update a Pool object by replacing the properties specified in the payload.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/PoolMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/Pool"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | The update requested invalidates some constraints on this object |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: poolDelete
      tags:
        - pool
      description: |
        Delete a Pool object.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        204:
          description: Pool deleted
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
            | 409 | There are still Storage objects associated with the Pool |
          schema:
            $ref: "#/definitions/error"

  /protection-domain-metadata:
    get:
      operationId: protectionDomainMetadata
      tags:
        - protectionDomain
      description: |
        Return metadata on supported encryption algorithms
      responses:
        200:
          description: List of ProtectionDomainMetadata objects
          schema:
            type: array
            items:
              $ref: "#/definitions/ProtectionDomainMetadata"
        default:
          $ref: "#/responses/default"

  /protection-domains:
    get:
      operationId: protectionDomainList
      tags:
        - protectionDomain
      description: |
        List all ProtectionDomain objects.  Optionally filter the result by specifying a query.
      parameters:
        - $ref: "#/parameters/accountIdQueryParam"
        - $ref: "#/parameters/namePatternQueryParam"
        - $ref: "#/parameters/nameQueryParam"
        - $ref: "#/parameters/systemTagsQueryParam"
        - $ref: "#/parameters/tagsQueryParam"
      responses:
        200:
          description: List of ProtectionDomain objects
          schema:
            type: array
            items:
              $ref: "#/definitions/ProtectionDomain"
        default:
          $ref: "#/responses/default"
    post:
      operationId: protectionDomainCreate
      tags:
        - protectionDomain
      description: |
        Create a ProtectionDomain object.

        The **encryptionPassphrase.kind** property field must have the value "SECRET".
        Leading and trailing whitespace is stripped from the **encryptionPassphrase.value** property field
        and the remaining string must meet the minimum length requirements for the specified **encryptionAlgorithm**.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ProtectionDomainCreateArgs"
      responses:
        201:
          description: Created the ProtectionDomain
          schema:
            $ref: "#/definitions/ProtectionDomain"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
          schema:
            $ref: "#/definitions/error"

  /protection-domains/{id}:
    get:
      operationId: protectionDomainFetch
      tags:
        - protectionDomain
      description: |
        Fetch a ProtectionDomain object by ID.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/ProtectionDomain"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: protectionDomainUpdate
      tags:
        - protectionDomain
      description: |
        Update a ProtectionDomain object by replacing the properties specified in the payload.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ProtectionDomainMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/ProtectionDomain"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | There is a name conflict |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: protectionDomainDelete
      tags:
        - protectionDomain
      description: |
        Delete a ProtectionDomain object.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        204:
          description: ProtectionDomain deleted
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
            | 409 | There are still objects associated with the ProtectionDomain |
          schema:
            $ref: "#/definitions/error"

  /roles:
    get:
      operationId: roleList
      tags:
        - role
      description: |
        List all Role objects.  Optionally filter the result by specifying a query.
      parameters:
        - $ref: "#/parameters/nameQueryParam"
      responses:
        200:
          description: List of Role objects
          schema:
            type: array
            items:
              $ref: "#/definitions/Role"
        default:
          $ref: "#/responses/default"

  /roles/{id}:
    parameters:
      - $ref: "#/parameters/idPathParam"
    get:
      operationId: roleFetch
      tags:
        - role
      description: |
        Fetch a Role object by ID.
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/Role"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"

  /service-plans:
    get:
      operationId: servicePlanList
      tags:
        - servicePlan
      description: |
        List all ServicePlan objects.  Optionally filter the result by specifying a query.
      parameters:
        - $ref: "#/parameters/authorizedAccountIdQueryParam"
        - $ref: "#/parameters/nameQueryParam"
        - $ref: "#/parameters/tagsQueryParam"
        - name: sourceServicePlanId
          in: query
          type: string
          description: |
            Queries for service plans that specify the given service plan as their source service plan.
        # by accounts
      responses:
        200:
          description: List of ServicePlan objects
          schema:
            type: array
            items:
              $ref: "#/definitions/ServicePlan"
        default:
          $ref: "#/responses/default"

  /service-plans/{id}:
    parameters:
      - $ref: "#/parameters/idPathParam"
    get:
      operationId: servicePlanFetch
      tags:
        - servicePlan
      description: |
        Fetch a ServicePlan object by ID.
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/ServicePlan"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: servicePlanUpdate
      tags:
        - servicePlan
      description: |
        Update a ServicePlan object by replacing the properties specified in the payload.

        Some update related idiosyncrasies:
        - Once a ServicePlan object is published the *slos* property may not be modified.
        - Update of an unpublished service plan will fail if there are any VolumeSeries objects
        referencing the plan.  All such "experimental" VolumeSeries objects should be deleted before the
        plan can be modified.
        - It is possible to rename an ServicePlan object as long as the new name is distinct.
        - Removing an Account from the ServicePlan only impacts future use of the ServicePlan
        by that Account.
        It does not affect any VolumeSeries objects from that Account which currently reference this object.
      parameters:
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ServicePlanMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/ServicePlan"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | The update requested invalidates some constraints on this object |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: servicePlanDelete
      tags:
        - servicePlan
      description: |
        Delete a ServicePlan object.

        It is not possible to delete a ServicePlan object that is referenced
        by any VolumeSeries object.
      responses:
        204:
          description: ServicePlan deleted
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 403 | The ServicePlan is built in |
            | 404 | The object specified by the id parameter was not found |
            | 409 | There are VolumeSeries or source ServicePlan objects associated with the ServicePlan |
          schema:
            $ref: "#/definitions/error"

  /service-plans/{id}/clone:
    post:
      operationId: servicePlanClone
      tags:
        - servicePlan
      description: |
        Create a new ServicePlan object as a copy of the specified ServicePlan object.
        The name of the new ServicePlan must be unique across all ServicePlan objects.

        The new ServicePlan object will be identical to the specified ServicePlan object except as follows:
        | Property | New value |
        |----------|-----------|
        | meta | The metadata is different as this is a new object |
        | sourceServicePlanId | This is set to the identifier of this ServicePlan object |
        | state | This value will be UNPUBLISHED |
        | name | The name will be set from the payload |
      parameters:
        - $ref: "#/parameters/idPathParam"
        - name: version
          in: query
          required: false
          type: integer
          format: int32
          minimum: 1
          description: |
            Specify the object version of the ServicePlan to be cloned.
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ServicePlanCloneArgs"
      responses:
        201:
          description: Created the ServicePlan
          schema:
            $ref: "#/definitions/ServicePlan"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | The name is not unique |
          schema:
            $ref: "#/definitions/error"

  /service-plans/{id}/publish:
    post:
      operationId: servicePlanPublish
      tags:
        - servicePlan
      description: |
        Publish a ServicePlan object.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateRequiredVersionQueryParam"
      responses:
        200:
          description: Published
          schema:
            $ref: "#/definitions/ServicePlan"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found, the specified version is not current, or the current state is already PUBLISHED |
          schema:
            $ref: "#/definitions/error"

  /service-plans/{id}/retire:
    post:
      operationId: servicePlanRetire
      tags:
        - servicePlan
      description: |
        Retire a ServicePlan object such that new VolumeSeries cannot be provisioned with this ServicePlan.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateRequiredVersionQueryParam"
      responses:
        200:
          description: Retired
          schema:
            $ref: "#/definitions/ServicePlan"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 403 | The ServicePlan is built in |
            | 404 | The object specified by the id parameter was not found, the specified version is not current, or the current state is not PUBLISHED |
          schema:
            $ref: "#/definitions/error"

  /service-plan-allocations:
    get:
      operationId: servicePlanAllocationList
      tags:
        - servicePlanAllocation
      description: |
        List all ServicePlanAllocation objects.  Optionally filter the result by specifying a query.
      parameters:
        - $ref: "#/parameters/accountIdQueryParam"
        - $ref: "#/parameters/authorizedAccountIdQueryParam"
        - $ref: "#/parameters/clusterIdQueryParam"
        - $ref: "#/parameters/cspDomainIdQueryParam"
        - name: reservationState
          description: Specify reservation states to match.
          in: query
          required: false
          type: array
          items:
            type: string
            minLength: 1
          collectionFormat: multi
        - name: reservationStateNot
          description: |
            Specify reservation series states to filter out.
            Setting this parameter overrides the *reservationState* parameter.
          in: query
          required: false
          type: array
          items:
            type: string
            minLength: 1
          collectionFormat: multi
        - $ref: "#/parameters/servicePlanIdQueryParam"
        - name: storageFormulaName
          type: string
          in: query
          description: The name of a [StorageFormula](#tag/storageFormula).
        - $ref: "#/parameters/poolIdQueryParam"
        - $ref: "#/parameters/systemTagsQueryParam"
        - $ref: "#/parameters/tagsQueryParam"
      responses:
        200:
          description: List of ServicePlanAllocation objects
          schema:
            type: array
            items:
              $ref: "#/definitions/ServicePlanAllocation"
        default:
          $ref: "#/responses/default"
    post:
      operationId: servicePlanAllocationCreate
      tags:
        - servicePlanAllocation
      description: |
        Create a ServicePlanAllocation object.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ServicePlanAllocationCreateArgs"
      responses:
        201:
          description: Created the ServicePlanAllocation object
          schema:
            $ref: "#/definitions/ServicePlanAllocation"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 409 | The combination of *authorizedAccountId*, *servicePlanId* and *clusterId* is not unique  |
          schema:
            $ref: "#/definitions/error"

  /service-plan-allocations/{id}:
    parameters:
      - $ref: "#/parameters/idPathParam"
    get:
      operationId: servicePlanAllocationFetch
      tags:
        - servicePlanAllocation
      description: |
        Fetch a ServicePlanAllocation object by ID.
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/ServicePlanAllocation"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: servicePlanAllocationUpdate
      tags:
        - servicePlanAllocation
      description: |
        Update a ServicePlanAllocation object by replacing the properties specified in the payload.

      parameters:
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/ServicePlanAllocationMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/ServicePlanAllocation"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | The update requested invalidates some constraints on this object |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: servicePlanAllocationDelete
      tags:
        - servicePlanAllocation
      description: |
        Delete a ServicePlanAllocation object.

        It is not possible to delete a ServicePlanAllocation object that is referenced by a VolumeSeries object
        or one that has references to [Pool](#tag/pool) objects.
      responses:
        204:
          description: ServicePlanAllocation deleted
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 403 | The ServicePlanAllocation is built in |
            | 404 | The object specified by the id parameter was not found |
            | 409 | There are other objects associated with the ServicePlanAllocation |
          schema:
            $ref: "#/definitions/error"

  /service-plan-allocations/{id}/customize-provisioning:
    parameters:
      - $ref: "#/parameters/idPathParam"
    post:
      operationId: servicePlanAllocationCustomizeProvisioning
      tags:
        - servicePlanAllocation
      description: |
        The names of the [ConsistencyGroup](#tag/consistencyGroup) and
        [ApplicationGroup](#tag/applicationGroup) objects referenced by dynamically provisioned
        [VolumeSeries](#tag/volumeSeries) object are automatically generated by the system,
        and no special tags set in them or in the provisioned [VolumeSeries](#tag/volumeSeries) object.

        This method provides the mechanism to create a cluster specific **customization object** to control
        these properties in dynamically provisioned [VolumeSeries](#tag/volumeSeries) objects
        of the associated [ServicePlan](#tag/servicePlan) in the associated [Cluster](#tag/cluster).
        The object encodes the following properties:
        | Property | Description |
        |----------|-------------|
        | accountSecret | The value is the same as that available in cluster encoded form from [clusterAccountSecretFetch](#operation/clusterAccountSecretFetch) and is automatically set. |
        | applicationGroupName | The name of the [ApplicationGroup](#tag/applicationGroup) object to be used when creating the [ConsistencyGroup](#tag/consistencyGroup) object for the dynamically provisioned [VolumeSeries](#tag/volumeSeries). The object will be created if necessary or reused otherwise. |
        | applicationGroupDescription | The description of the [ApplicationGroup](#tag/applicationGroup) object when the object is created. |
        | applicationGroupTags | A list of string tags for the [ApplicationGroup](#tag/applicationGroup) object when the object is created. |
        | consistencyGroupName | The name of the [ConsistencyGroup](#tag/consistencyGroup) object to be used for the dynamically provisioned [VolumeSeries](#tag/volumeSeries). The object will be created if necessary or reused otherwise. A default value is provided by the **consistencyGroupName** property of the effective **clusterUsagePolicy**. |
        | consistencyGroupDescription | The description of the [ConsistencyGroup](#tag/consistencyGroup) object when the object is created. |
        | consistencyGroupTags | A list of string tags for the [ConsistencyGroup](#tag/consistencyGroup) object when the object is created. |
        | volumeTags | A list of string tags for the dynamically provisioned [VolumeSeries](#tag/volumeSeries). |

        The property values (other than that of **accountSecret**) are specified by query parameters; at least one query parameter must be provided.

        User settable property values are treated as *templates* that support replacement of "$variable" or "${variable}" by provisioning-time contextual values.
        The following variables are defined:
          | Variable name | Substituted value |
          |---------------|-------------------|
          | ${account.id} | The identifier of the [Account](#tag/account) object. |
          | ${account.name} | The name of the [Account](#tag/account) object. |
          | ${cluster.id} | The identifier of the [Cluster](#tag/cluster) object. |
          | ${cluster.name} | The name of the [Cluster](#tag/cluster) object. |
          | ${cspDomain.id} | The identifier of the [CSPDomain](#tag/cspDomain) object. |
          | ${cspDomain.name} | The name of the [CSPDomain](#tag/cspDomain) object. |
          | ${k8sPod.controller.uid} | The UID of the first controller found in the ownerReferences list of a Pod in a Kubernetes cluster. |
          | ${k8sPod.controller.name} | The name of the first controller found in the ownerReferences list of a Pod in a Kubernetes cluster. |
          | ${k8sPod.labels['*label*']} | The value of *label* in the Pod labels map in a Kubernetes cluster. |
          | ${k8sPod.namespace} | The Pod namespace in a Kubernetes cluster. |
          | ${k8sPod.name} | The Pod name in a Kubernetes cluster. |
          | ${volumeSeries.id} | The identifier of the [VolumeSeries](#tag/volumeSeries) object. |
          | ${volumeSeries.name} | The name of the [VolumeSeries](#tag/volumeSeries) object. |
        If a value is not present in the context the empty string is substituted.

        <h2>Customizing dynamic provisioning in Kubernetes clusters</h2>
        The default behavior during dynamic provisioning in a Kubernetes cluster is to group
        [VolumeSeries](#tag/volumeSeries) objects from the same pod
        into the same [ConsistencyGroup](#tag/consistencyGroup) to synchronize their snapshots.
        The [ConsistencyGroup](#tag/consistencyGroup) itself will be associated with
        an [ApplicationGroup](#tag/applicationGroup) named for the Controller object.

        The default behavior stems from the effective value computation algorithm for the
        **consistencyGroupName** and **applicationGroupName** property values (described below)
        and the fact that the **account secret**
        (obtained from the [clusterAccountSecretFetch](#operation/clusterAccountSecretFetch) method)
        contains no customization data.
        The **account secret** is the Secret object referenced by the sample PersistentVolumeClaim
        provided for dynamic provisioning in the **k8sPvcYaml** key of the **clusterDescriptor** map of the
        [ServicePlanAllocation](tag/servicePlanAllocation) object;
        it is the same Secret required to use pre-provisioned volumes.

        Making PersistentVolumeClaim objects reference alternative customization Secret objects, created with the
        help of this method, facilitates *per-[VolumeSeries](#tag/volumeSeries)* customization for
        dynamically provisioned volumes.
        This provides the highest possible granularity of customization, but it does require the
        creation of such Secret objects and references to them from the individual PersistentVolumeClaims.

        Per-pod annotations provide a slightly simpler way to customize without the use of Secrets,
        albeit at a per-Pod granularity.

        Pod annotations can also be used to supplement a Secret that deliberately leaves some
        customization property values unspecified.
        This could, for example, provide simple customization even while using the
        [**account secret**](#operation/clusterAccountSecretFetch),
        such as specifying tag values for the newly provisioned [VolumeSeries](#tag/volumeSeries).

        Note that customization via PersistentVolumeClaim annotations is not possible with CSI.

        <h3>Secret object</h3>
        In a Kubernetes cluster the customization object takes the form of a Secret whose value is
        the base64 encoded serialized JSON representation of the customization object.
        The secret returned by [clusterAccountSecretFetch](#operation/clusterAccountSecretFetch)
        is the customization object with only the **accountSecret** property set.

        The Secret should be created in the same namespace as the PersistentVolumeClaim (PVC)
        used to dynamically provision a PersistentVolume,
        and the PVC must contain a *nuvoloso.com/provisioning-secret* annotation that identifies the Secret object.
        To illustrate:
        ```yaml
        ---
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          namespace: pvc-namespace
          name: pvc-name
          annotations:
            nuvoloso.com/provisioning-secret: customization-secret-name
        ...
        ```
        The sample PVC provided in the **k8sPvcYaml** key of the **clusterDescriptor** map of the
        [ServicePlanAllocation](#tag/servicePlanAllocation) object references the
        [**account secret**](#operation/clusterAccountSecretFetch)
        which contains no customization information.
        The sample can be modified to reference a customization object secret created by this method instead.

        A customization object secret can be referenced by multiple PVC objects in the same namespace.
        The use of variable substituted strings aids in such sharing.

        <h3>Pod Annotations</h3>
        Pod annotations, specified in the metadata of a Pod object, can be used to provide
        the *same* default values for the customization object properties for *all* of the
        dynamically provisioned [VolumeSeries](#tag/volumeSeries) requested by the pod concerned.

        The following Pod annotations are supported:
        | Annotation                                 | Description |
        |--------------------------------------------|-------------|
        | nuvoloso.com/application-group-name        | Default for the **applicationGroupName** property |
        | nuvoloso.com/application-group-description | Default for the **applicationGroupDescription** property |
        | nuvoloso.com/application-group-tag-*N*     | Default for the **applicationGroupTags** property. |
        | nuvoloso.com/consistency-group-name        | Default for the **consistencyGroupName** property |
        | nuvoloso.com/consistency-group-description | Default for the **consistencyGroupDescription** property |
        | nuvoloso.com/consistency-group-tag-*N*     | Default for the **consistencyGroupTags** property. |
        | nuvoloso.com/volume-tag-*N*                | Default for the **volumeTags** property. |

        All of the annotation values are subject to variable substitution.
        In the tag cases, values for *N* start with 1 and must be consecutive.
        To illustrate:
        ```yaml
        ---
        apiVersion: apps/v1
        kind: Deployment
        ...
        spec:
          ...
          template:
            metadata:
              annotations:
                nuvoloso.com/volume-tag-1: "${k8sPod.labels['app']}"
                nuvoloso.com/volume-tag-2: "${k8sPod.controller.name}"
        ```

        <h3>Effective value computation</h3>
        The customization process for a Kubernetes cluster
        determines the *effective* value of each customization property by
        first considering the expanded value specified in the referenced Secret object, and then,
        if it is the empty string, the expanded value from the corresponding Pod annotation.
        This too may result in an empty string which is acceptable for most properties with the exception
        of the following special cases:

        - If the value of the **consistencyGroupName** property computed with the algorithm above
        results in the empty string, the effective value is constructed from the expansion of
        ```"${cluster.id}-${k8sPod.namespace}-${k8sPod.name}"```.

        - If the value of the **applicationGroupName** property computed with the algorithm above
        results in the empty string, the value of the expansion of
        ```"${k8sPod.controller.name}"``` is then considered.
        If this too results in the empty string (all Pods do not *have* to have controllers) then the
        the effective value of the **consistencyGroupName** property is used as the effective value
        of the **applicationGroupName** property.

      parameters:
        - name: applicationGroupName
          type: string
          in: query
          description: |
            The name of the [ApplicationGroup](#tag/applicationGroup) object to be used for cluster volumes that are
            dynamically provisioned with this secret.
            The string is subject to variable substitution.
            The object will be created if necessary.
        - name: applicationGroupDescription
          type: string
          in: query
          description: |
            The description of the [ApplicationGroup](#tag/applicationGroup) object.
            The string is subject to variable substitution.
            Applicable only if the object gets created.
        - name: applicationGroupTag
          in: query
          description: |
            A tag to set in the [ApplicationGroup](#tag/applicationGroup) object at creation time.
            The string is subject to variable substitution.
            Repeat as necessary.
            Applicable only if the object gets created.
          type: array
          items:
            type: string
            minLength: 1
          collectionFormat: multi
        - name: consistencyGroupName
          type: string
          in: query
          description: |
            The name of the [ConsistencyGroup](#tag/consistencyGroup) object to be used for cluster volumes that are
            dynamically provisioned with this secret.
            The string is subject to variable substitution.
            The object will be created if necessary.
        - name: consistencyGroupDescription
          type: string
          in: query
          description: |
            The description of the [ConsistencyGroup](#tag/consistencyGroup) object.
            The string is subject to variable substitution.
            Applicable only if the object gets created.
        - name: consistencyGroupTag
          in: query
          description: |
            A tag to set in the [ConsistencyGroup](#tag/consistencyGroup) object at creation time.
            The string is subject to variable substitution.
            Repeat as necessary.
            Applicable only if the object gets created.
          type: array
          items:
            type: string
            minLength: 1
          collectionFormat: multi
        - name: volumeSeriesTag
          in: query
          description: |
            A tag to set in the [VolumeSeries](#tag/volumeSeries) object at creation time.
            The string is subject to variable substitution.
            Repeat as necessary.
          type: array
          items:
            type: string
            minLength: 1
          collectionFormat: multi
        - name: k8sName
          in: query
          type: string
          description: |
            In a Kubernetes cluster this specifies the name of the Secret object.
            If unspecified a default name is used.
        - name: k8sNamespace
          in: query
          type: string
          description: |
            In a Kubernetes cluster this specifies the namespace of the Secret object.
            If unspecified the "default" namespace is used.
      responses:
        200:
          description: |
            Found.
          schema:
            $ref: "#/definitions/valueType"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 403 | Unauthorized use of the method |
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"

  /slos:
    get:
      operationId: sloList
      tags:
        - slo
      description: |
        List the available SLO names.
      parameters:
        - $ref: "#/parameters/namePatternQueryParam"
      responses:
        200:
          description: List of SLO objects
          schema:
            type: array
            items:
              $ref: "#/definitions/SLO"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | The namePattern is not a valid regular expression pattern |
          schema:
            $ref: "#/definitions/error"

  /snapshots:
    get:
      operationId: snapshotList
      tags:
        - snapshot
      description: |
        List Snapshot objects. Optionally filter the result by specifying a query.
        The *cspDomainId* parameter de-references the *location* property.

        Unlike most query parameters, the *accountId* and *tenantAccountId* query parameters match objects with
        either specified value, subject to access control. It is generally unnecessary to pass either parameter, the RBAC will automatically filter the returned objects to those the caller can view.
        However, if the caller is a tenant admin, passing the *accountId* can be used to restrict the returned objects to those owned by the tenant account or those of a specific subordinate account.
      parameters:
        - $ref: "#/parameters/accountIdQueryParam"
        - $ref: "#/parameters/consistencyGroupIdQueryParam"
        - $ref: "#/parameters/countOnlyQueryParam"
        - $ref: "#/parameters/cspDomainIdQueryParam"
        - $ref: "#/parameters/protectionDomainIdQueryParam"
        - name: deleteAfterTimeLE
          in: query
          required: false
          type: string
          format: date-time
          description: Specify an upper bound for the *deleteAfterTime* value.
        - $ref: "#/parameters/snapIdentifierQueryParam"
        - name: snapTimeLE
          in: query
          required: false
          type: string
          format: date-time
          description: Specify an upper bound for the *snapTime* value.
        - name: snapTimeGE
          in: query
          required: false
          type: string
          format: date-time
          description: Specify a lower bound for the *snapTime* value.
        - $ref: "#/parameters/systemTagsQueryParam"
        - $ref: "#/parameters/tagsQueryParam"
        - $ref: "#/parameters/tenantAccountIdQueryParam"
        - $ref: "#/parameters/volumeSeriesIdQueryParam"
        - name: pitIdentifiers
          in: query
          type: array
          description: A list of PiT identifiers to match.
          items:
            type: string
            minLength: 1
        - $ref: "#/parameters/sortKeysAscendingQueryParam"
        - $ref: "#/parameters/sortKeysDescendingQueryParam"
        - $ref: "#/parameters/listLimitQueryParam"
        - $ref: "#/parameters/listSkipQueryParam"
      responses:
        200:
          description: List of Snapshot objects
          headers:
            Total-Count:
              description: Count of matching objects
              type: integer
              format: int64
          schema:
            type: array
            items:
              $ref: "#/definitions/Snapshot"
        default:
          $ref: "#/responses/default"
    post:
      operationId: snapshotCreate
      tags:
        - snapshot
      description: |
        Create a [Snapshot](#tag/snapshot) object.
        At least one protection store location must be specified.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/Snapshot"
      responses:
        201:
          description: Created the Snapshot
          schema:
            $ref: "#/definitions/Snapshot"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
          schema:
            $ref: "#/definitions/error"

  /snapshots/{id}:
    parameters:
      - $ref: "#/parameters/idPathParam"
    get:
      operationId: snapshotFetch
      tags:
        - snapshot
      description: |
        Fetch a Snapshot object by ID.  Note that the ID is not the *snapIdentifier*.
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/Snapshot"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: snapshotUpdate
      tags:
        - snapshot
      description: |
        Update a Snapshot object by replacing the properties specified in the payload.

        It is not permitted to delete all the location elements.
      parameters:
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/SnapshotMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/Snapshot"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 403 | A specified object is not accessible to this account or an attempt is made to change a non-modifiable property |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | The location property cannot be empty |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: snapshotDelete
      tags:
        - snapshot
      description: |
        Delete a Snapshot object.
      responses:
        204:
          description: The Snapshot object was deleted.
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"

  /storage:
    get:
      operationId: storageList
      tags:
        - storage
      description: |
        List all Storage objects.  Optionally filter the result by specifying a query.
        If any aggregation parameters are specified, only the aggregation is returned in the headers; the list will be empty.
        If no aggregation parameters are specified, a count of matching objects is still returned.

        Unlike most query parameters, the *accountId* and *tenantAccountId* query parameters match objects with
        either specified value, subject to access control. It is generally unnecessary to pass either parameter, the RBAC will automatically filter the returned objects to those the caller can view.
        However, if the caller is a tenant admin, passing the *accountId* can be used to restrict the returned objects to those owned by the tenant account or those of a specific subordinate account.
      parameters:
        - $ref: "#/parameters/accountIdQueryParam"
        - $ref: "#/parameters/cspDomainIdQueryParam"
        - $ref: "#/parameters/clusterIdQueryParam"
        - $ref: "#/parameters/storageTypeQueryParam"
        - $ref: "#/parameters/sumQueryParam"
        - $ref: "#/parameters/poolIdQueryParam"
        - $ref: "#/parameters/tenantAccountIdQueryParam"
        - name: accessibilityScope
          in: query
          type: string
        - name: accessibilityScopeObjId
          in: query
          type: string
        - name: attachedNodeId
          in: query
          type: string
          description: |
            The ID of a node.
            This automatically also filters out attachmentState of DETACHED, unless the attachmentState query parameter is explicitly set.
        - name: availableBytesGE
          in: query
          type: integer
          format: int64
          description: |
            Filters out Storage objects whose availableBytes property value is less than this number.
        - name: availableBytesLT
          in: query
          type: integer
          format: int64
          description: |
            Filters out Storage objects whose availableBytes property value is greater than or equal to this number.
        - name: attachmentState
          in: query
          type: string
          description: |
            Selects Storage objects whose storageState.attachmentState value is equal to this value.
        - name: provisionedState
          in: query
          type: string
          description: |
            Selects Storage objects whose storageState.provisionedState value is equal to this value.
        - name: deviceState
          in: query
          type: string
          description: |
            Selects Storage objects whose storageState.deviceState value is equal to this value.
        - name: mediaState
          in: query
          type: string
          description: |
            Selects Storage objects whose storageState.mediaState value is equal to this value.
        - name: isProvisioned
          in: query
          type: boolean
          description: |
            Selects Storage objects whose storageState.provisionedState value is *PROVISIONED* or *UNPROVISIONING*.
            Setting this parameter overrides the *provisionedState* parameter.
        - $ref: "#/parameters/systemTagsQueryParam"
      responses:
        200:
          description: List of Storage objects
          headers:
            Total-Count:
              description: Count of matching objects
              type: integer
              format: int64
            Aggregations:
              description: |
                The requested aggregations. Each item is of the form key:aggregation:value.
                The keys match the requested aggregation fields from the query.
                The aggregation specifies the type of aggregation (e.g. sum).
                The value is the computed aggregation of the field.
              type: array
              collectionFormat: csv
              items:
                type: string
          schema:
            type: array
            items:
              $ref: "#/definitions/Storage"
        default:
          $ref: "#/responses/default"
    post:
      operationId: storageCreate
      tags:
        - storage
      description: |
        Create a Storage object.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/Storage"
      responses:
        201:
          description: Created the Storage
          schema:
            $ref: "#/definitions/Storage"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 409 | The storageIdentifier is not unique in the CSP domain |
          schema:
            $ref: "#/definitions/error"

  /storage/{id}:
    get:
      operationId: storageFetch
      tags:
        - storage
      description: |
        Fetch a Storage object by ID.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/Storage"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: storageUpdate
      tags:
        - storage
      description: |
        Update a Storage object by replacing the properties specified in the payload.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateRequiredVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/StorageMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/Storage"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: storageDelete
      tags:
        - storage
      description: |
        Delete a Storage object.  The *provisionedState* must be *UNPROVISIONED* or *UNPROVISIONING*.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        204:
          description: Storage deleted
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
            | 409 | THe object is in the wrong provisionedState or there are VolumeSeries objects using the Storage object |
          schema:
            $ref: "#/definitions/error"

  /storage-formulas:
    get:
      operationId: storageFormulaList
      tags:
        - storageFormula
      description: |
        List all StorageFormula objects.  Optionally filter the result by specifying a query.
      parameters:
        - $ref: "#/parameters/nameQueryParam"
        - $ref: "#/parameters/cspDomainTypeQueryParam"
      responses:
        200:
          description: List of StorageFormula objects
          schema:
            type: array
            items:
              $ref: "#/definitions/StorageFormula"
        default:
          $ref: "#/responses/default"

  /storage-requests:
    get:
      operationId: storageRequestList
      tags:
        - storageRequest
      description: |
        List all StorageRequest objects.  Optionally filter the result by specifying a query.
      parameters:
        - name: storageRequestState
          in: query
          type: string
        - $ref: "#/parameters/clusterIdQueryParam"
        - $ref: "#/parameters/cspDomainIdQueryParam"
        - $ref: "#/parameters/nodeIdQueryParam"
        - $ref: "#/parameters/storageIdQueryParam"
        - $ref: "#/parameters/poolIdQueryParam"
        - name: activeOrTimeModifiedGE
          in: query
          type: string
          format: date-time
          description: |
            Selects active StorageRequest objects, or those modified since the time specified by
            the parameter value (inclusively).
            Note that modified request objects include those that have terminated in this period.
            Setting this parameter overrides the *isTerminated* and *storageRequestState* parameters.
        - name: isTerminated
          in: query
          type: boolean
          description: |
            Selects StorageRequest objects whose storageRequestState is *SUCCEEDED* or *FAILED*.
            Setting this parameter overrides the *storageRequestState* parameter.
        - $ref: "#/parameters/systemTagsQueryParam"
        - name: volumeSeriesRequestId
          in: query
          type: string
          description: |
            The identifier of a [VolumeSeriesRequest](#tag/volumeSeriesRequest) object that
            has claims on the [Storage](#tag/storage) provisioned by this request.
      responses:
        200:
          description: List of StorageRequest objects
          schema:
            type: array
            items:
              $ref: "#/definitions/StorageRequest"
        default:
          $ref: "#/responses/default"
    post:
      operationId: storageRequestCreate
      tags:
        - storageRequest
      description: |
        Create a StorageRequest object.
        See [StorageRequest](#tag/storageRequest) for details on how to set the properties.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/StorageRequestCreateArgs"
      responses:
        201:
          description: Created the StorageRequest
          schema:
            $ref: "#/definitions/StorageRequest"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 409 | There is a conflict with active operations |
          schema:
            $ref: "#/definitions/error"

  /storage-requests/{id}:
    get:
      operationId: storageRequestFetch
      tags:
        - storageRequest
      description: |
        Fetch a StorageRequest object by ID.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/StorageRequest"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: storageRequestUpdate
      tags:
        - storageRequest
      description: |
        Update a StorageRequest object by replacing the properties specified in the payload.
        The version of the StorageRequest object is mandatory.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateRequiredVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/StorageRequestMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/StorageRequest"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | The update requested invalidates some constraints on this object |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: storageRequestDelete
      tags:
        - storageRequest
      description: |
        Delete a StorageRequest object.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        204:
          description: StorageRequest deleted
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
            | 409 | The object cannot be deleted at this time |
          schema:
            $ref: "#/definitions/error"

  /system:
    get:
      operationId: systemFetch
      tags:
        - system
      description: |
        Fetch the System object. The ID of the System object is the unique identifier of this central Nuvoloso deployment.
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/System"
        default:
          $ref: "#/responses/default"
    patch:
      operationId: systemUpdate
      tags:
        - system
      description: |
        Update the System object by replacing the properties specified in the payload.
      parameters:
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/SystemMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/System"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 403 | Unauthorized access or forbidden operation |
          schema:
            $ref: "#/definitions/error"

  /system/hostname:
    get:
      operationId: systemHostnameFetch
      tags:
        - system
      description: |
        Fetch the hostname for the Nuvoloso management service.

        If the **managementHostCName** property of the System object is set then it returns that value.
        Otherwise in a Kubernetes system this is obtained from the **nuvo-https** LoadBalancer Service object
        in the `nuvoloso-management` namespace.
      responses:
        200:
          description: Found hostname
          schema:
            type: string
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | Hostname unknown |
          schema:
            $ref: "#/definitions/error"

  /tasks:
    get:
      operationId: taskList
      tags:
        - task
      description: |
        List all Task objects in the addressed service.
        Optionally filter the result by specifying a query.
        Completed Task objects are deleted automatically after a brief delay.
      parameters:
        - name: operation
          in: query
          type: string
          description: Specify an operation name.
      responses:
        200:
          description: List of Task objects.
          schema:
            type: array
            items:
              $ref: "#/definitions/Task"
        default:
          $ref: "#/responses/default"
    post:
      operationId: taskCreate
      tags:
        - task
      description: |
        Create a Task object in the addressed service.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/TaskCreateOnce"
      responses:
        201:
          description: Created the Task
          schema:
            $ref: "#/definitions/Task"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 409 | The operation is not supported |
          schema:
            $ref: "#/definitions/error"

  /tasks/{id}:
    get:
      operationId: taskFetch
      tags:
        - task
      description: |
        Fetch a Task object.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/Task"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found, or the request has completed |
          schema:
            $ref: "#/definitions/error"

  /tasks/{id}/cancel:
    post:
      operationId: taskCancel
      tags:
        - task
      description: |
        Cancel a Task if possible. The actual cancellation occurs asynchronously.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        200:
          description: Canceled
          schema:
            $ref: "#/definitions/Task"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found, or the request has completed |
          schema:
            $ref: "#/definitions/error"

  /users:
    get:
      operationId: userList
      tags:
        - user
      description: |
        List all User objects.  Optionally filter the result by specifying a query.
      parameters:
        - name: userNamePattern
          in: query
          type: string
          description: Specify a pattern to match profile user names.
        - name: authIdentifier
          in: query
          type: string
          description: The unique identifier of a user, used by the Authentication Service.
      responses:
        200:
          description: List of User objects
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 403 | Unauthorized access or forbidden operation |
          schema:
            $ref: "#/definitions/error"
    post:
      operationId: userCreate
      tags:
        - user
      description: |
        Create a User object. The authIdentifier must be unique across all User objects.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: Created the User
          schema:
            $ref: "#/definitions/User"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 409 | The authIdentifier is not unique |
          schema:
            $ref: "#/definitions/error"

  /users/{id}:
    get:
      operationId: userFetch
      tags:
        - user
      description: |
        Fetch a User object by ID.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/User"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: userUpdate
      tags:
        - user
      description: |
        Update a User object by replacing the properties specified in the payload.
        It is possible to update the authIdentifier as long as the new value is distinct,
        except for the built-in **admin** User.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/UserMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/User"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 403 | Unauthorized access or forbidden operation |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | The update requested invalidates some constraints on this object |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: userDelete
      tags:
        - user
      description: |
        Delete a User object and remove all references to that User Object from Account objects.
        Deleting the **admin** User is not permitted.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        204:
          description: User deleted
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 403 | Unauthorized access or forbidden operation |
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"

  /volume-series:
    get:
      operationId: volumeSeriesList
      tags:
        - volumeSeries
      description: |
        List VolumeSeries objects. The listing may further be constrained by additional query parameters.
        The *name* query parameter overrides the *namePattern* query parameter.
        If any aggregation parameters are specified, only the aggregation is returned in the headers; the list will be empty.
        If no aggregation parameters are specified, a count of matching objects is still returned.

        Unlike most query parameters, the *accountId* and *tenantAccountId* query parameters match objects with
        either specified value, subject to access control. It is generally unnecessary to pass either parameter, the RBAC will automatically filter the returned objects to those the caller can view.
        However, if the caller is a tenant admin, passing the *accountId* can be used to restrict the returned objects to those owned by the tenant account or those of a specific subordinate account.
      parameters:
        - $ref: "#/parameters/accountIdQueryParam"
        - $ref: "#/parameters/nameQueryParam"
        - $ref: "#/parameters/namePatternQueryParam"
        - $ref: "#/parameters/servicePlanAllocationIdQueryParam"
        - $ref: "#/parameters/servicePlanIdQueryParam"
        - $ref: "#/parameters/storageIdQueryParam"
        - $ref: "#/parameters/poolIdQueryParam"
        - $ref: "#/parameters/sumQueryParam"
        - $ref: "#/parameters/tagsQueryParam"
        - $ref: "#/parameters/tenantAccountIdQueryParam"
        - $ref: "#/parameters/systemTagsQueryParam"
        - name: boundClusterId
          type: string
          in: query
          description: The id of a [Cluster](#tag/cluster) object
        - name: boundCspDomainId
          type: string
          in: query
          description: The id of a [CSPDomain](#tag/cspDomain) object
        - name: configuredNodeId
          type: string
          in: query
          description: The id of a Node object
        - name: mountedNodeId
          type: string
          in: query
          description: The id of a Node object referenced in any element of the mounts array
        - $ref: "#/parameters/consistencyGroupIdQueryParam"
        - name: volumeSeriesState
          description: Specify volume series states to match.
          in: query
          required: false
          type: array
          items:
            type: string
            minLength: 1
          collectionFormat: multi
        - name: volumeSeriesStateNot
          description: |
            Specify volume series states to filter out.
            Setting this parameter overrides the *volumeSeriesState* parameter.
          in: query
          required: false
          type: array
          items:
            type: string
            minLength: 1
          collectionFormat: multi
        - name: nextSnapshotTimeLE
          in: query
          required: false
          type: string
          format: date-time
          description: Specify an upper bound for the *lifecycleManagementData.nextSnapshotTime* value.
      responses:
        200:
          description: List of VolumeSeries objects
          headers:
            Total-Count:
              description: Count of matching objects
              type: integer
              format: int64
            Aggregations:
              description: |
                The requested aggregations. Each item is of the form key:aggregation:value.
                The keys match the requested aggregation fields from the query.
                The aggregation specifies the type of aggregation (e.g. sum).
                The value is the computed aggregation of the field.
              type: array
              collectionFormat: csv
              items:
                type: string
          schema:
            type: array
            items:
              $ref: "#/definitions/VolumeSeries"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 403 | Unauthorized use of the accountId query parameter |
          schema:
            $ref: "#/definitions/error"
    post:
      operationId: volumeSeriesCreate
      tags:
        - volumeSeries
      description: |
        Create a VolumeSeries object in the context of an Account object.
        VolumeSeries object names must be distinct in the context of their Account.
        Related VolumeSeries are identified by their tags.

        The internal user can specify the identifier for the new VolumeSeries object as the value
        of the "volumeSeriesId" key in the *systemTags*.
        The identifier must have been fetched previously by a call to the [volumeSeriesNewId](#operation/volumeSeriesNewId) method.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/VolumeSeriesCreateArgs"
      responses:
        201:
          description: Created the VolumeSeries object
          schema:
            $ref: "#/definitions/VolumeSeries"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 403 | A specified object is not accessible to this account or unauthorized use of the method |
            | 409 | The name is not unique within the account |
          schema:
            $ref: "#/definitions/error"

  /volume-series/{id}:
    parameters:
      - $ref: "#/parameters/idPathParam"
    get:
      operationId: volumeSeriesFetch
      tags:
        - volumeSeries
      description: |
        Fetch a VolumeSeries object by ID.
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/VolumeSeries"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: volumeSeriesUpdate
      tags:
        - volumeSeries
      description: |
        Update a VolumeSeries object by replacing the properties specified in the payload.
        It is possible to rename a VolumeSeries as long as the new name is distinct
        among its siblings in the context of the related Account object.

        The **boundCspDomainId** property is automatically set when **boundClusterId** is set;
        an attempt to set it explicitly will result in an error.
      parameters:
        - $ref: "#/parameters/updateVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/VolumeSeriesMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/VolumeSeries"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 403 | A specified object is not accessible to this account or an attempt is made to change a non-modifiable property |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | The name is not unique within the account or there is a conflict with active operations |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: volumeSeriesDelete
      tags:
        - volumeSeries
      description: |
        Delete a VolumeSeries object.
      responses:
        204:
          description: The VolumeSeries object was deleted.
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
            | 409 | There are still parcels or capacity reservations associated with the VolumeSeries |
          schema:
            $ref: "#/definitions/error"

  /volume-series/{id}/persistent-volume-spec:
    get:
      operationId: volumeSeriesPVSpecFetch
      tags:
        - volumeSeries
      description: |
        Obtain the persistent volume specification that defines a Nuvoloso volume series object bound to a cluster. Deploy this specification in the cluster to which the volume series is bound.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - name: fsType
          in: query
          type: string
          description: Specify a filesystem type. Currently we support ext4 and xfs. If not set default is ext4.
          required: false
          default: "ext4"
        - name: clusterVersion
          in: query
          type: string
          description: Specify the cluster version. Default is pulled from the [Cluster](#tag/cluster).
          required: false
        - name: capacity
          in: query
          description: The capacity of the persistent volume. If not set we will use the Nuvoloso volumes size minus 1GiB to allow for filesystem formatting overhead.
          type: integer
          format: int64
          minimum: 0
          required: false
      responses:
        200:
          description: Volume series persistent volume specification returned
          schema:
            type: object
            properties:
              pvSpec:
                type: string
                description: Configuration data for the appropriate cluster configuration command.
              format:
                type: string
                description: The format of the returned data.
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Insufficient data to process the request |
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"

  /volume-series-id:
    get:
      operationId: volumeSeriesNewId
      tags:
        - volumeSeries
      description: |
        This method returns an identifier for a new VolumeSeries object without creating the object.
        It is required in some circumstances where an existential declaration of a VolumeSeries object must
        be made to an external entity before sufficient information is available to actually construct the
        object.

        The returned identifier should be specified as the value of the "volumeSeriesId" key
        in the *systemTags* provided to the [volumeSeriesCreate](#operation/volumeSeriesCreate) call
        to ensure that the object will have this identifier when created.

        This method is for internal use only.
      responses:
        200:
          description: Identifier generated
          schema:
            $ref: "#/definitions/valueType"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 403 | Unauthorized use of the method |
          schema:
            $ref: "#/definitions/error"

  /volume-series-requests:
    get:
      operationId: volumeSeriesRequestList
      tags:
        - volumeSeriesRequest
      description: |
        List all VolumeSeriesRequest objects. Optionally filter the result by specifying a query.

        Unlike most query parameters, the *accountId* and *tenantAccountId* query parameters match objects with
        either specified value, subject to access control. It is generally unnecessary to pass either parameter, the RBAC will automatically filter the returned objects to those the caller can view.
        However, if the caller is a tenant admin, passing the *accountId* can be used to restrict the returned objects to those owned by the tenant account or those of a specific subordinate account.
      parameters:
        - name: volumeSeriesRequestState
          in: query
          type: array
          items:
            type: string
            minLength: 1
        - $ref: "#/parameters/accountIdQueryParam"
        - $ref: "#/parameters/clusterIdQueryParam"
        - $ref: "#/parameters/consistencyGroupIdQueryParam"
        - $ref: "#/parameters/nodeIdQueryParam"
        - $ref: "#/parameters/protectionDomainIdQueryParam"
        - $ref: "#/parameters/poolIdQueryParam"
        - $ref: "#/parameters/servicePlanAllocationIdQueryParam"
        - $ref: "#/parameters/servicePlanIdQueryParam"
        - $ref: "#/parameters/snapshotIdQueryParam"
        - $ref: "#/parameters/storageIdQueryParam"
        - name: syncCoordinatorId
          in: query
          type: string
        - $ref: "#/parameters/tenantAccountIdQueryParam"
        - $ref: "#/parameters/volumeSeriesIdQueryParam"
        - name: requestedOperations
          description: Specify operations to match
          in: query
          required: false
          type: array
          items:
            type: string
            minLength: 1
          collectionFormat: multi
        - name: requestedOperationsNot
          description: |
            Specify operations to filter out.
            Setting this parameter overrides the *requestedOperations* query parameter.
          in: query
          required: false
          type: array
          items:
            type: string
            minLength: 1
          collectionFormat: multi
        - name: activeOrTimeModifiedGE
          in: query
          type: string
          format: date-time
          description: |
            Selects active VolumeSeriesRequest objects, or those modified since the time specified by
            the parameter value (inclusively).
            Note that modified request objects include those that have terminated in this period.
            Setting this parameter overrides the *isTerminated* and *volumeSeriesRequestState* parameters.
        - name: isTerminated
          in: query
          type: boolean
          description: |
            Selects VolumeSeriesRequest objects whose *volumeSeriesRequestState* is *SUCCEEDED*, *FAILED* or *CANCELED*.
            Setting this parameter overrides the *volumeSeriesRequestState* parameter.
        - $ref: "#/parameters/systemTagsQueryParam"
      responses:
        200:
          description: List of VolumeSeriesRequest objects
          schema:
            type: array
            items:
              $ref: "#/definitions/VolumeSeriesRequest"
        default:
          $ref: "#/responses/default"
    post:
      operationId: volumeSeriesRequestCreate
      tags:
        - volumeSeriesRequest
      description: |
        Create a VolumeSeriesRequest object.
        See [VolumeSeriesRequest](#tag/volumeSeriesRequest) for details on how to set the properties.

        The following properties are set automatically for a VOL_SNAPSHOT_CREATE operation:
        | Property | Value |
        |----------|-------|
        | *snapshot.pitIdentifier* | A new UUID |
        | *snapIdentifier* | Either the value of the *syncCoordinatorId* property if specified, or else a new UUID |
        | *nodeId* | A mounted node identifier, preferably that of the HEAD |
        | *clusterId* | The volume's bound cluster identifier |
        | *consistencyGroupId* | The volume's consistency group identifier |
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/VolumeSeriesRequestCreateArgs"
      responses:
        201:
          description: Created the VolumeSeriesRequest
          schema:
            $ref: "#/definitions/VolumeSeriesRequest"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
            | 403 | A specified object is not accessible to the account specified for the CREATE operation |
            | 409 | There is a conflict with active operations |
          schema:
            $ref: "#/definitions/error"

  /volume-series-requests/{id}:
    get:
      operationId: volumeSeriesRequestFetch
      tags:
        - volumeSeriesRequest
      description: |
        Fetch a VolumeSeriesRequest object by ID.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        200:
          description: Found
          schema:
            $ref: "#/definitions/VolumeSeriesRequest"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"
    patch:
      operationId: volumeSeriesRequestUpdate
      tags:
        - volumeSeriesRequest
      description: |
        Update a VolumeSeriesRequest object by replacing the properties specified in the payload.
        The version of the VolumeSeriesRequest object is mandatory.
      parameters:
        - $ref: "#/parameters/idPathParam"
        - $ref: "#/parameters/updateRequiredVersionQueryParam"
        - $ref: "#/parameters/updateAppendQueryParam"
        - $ref: "#/parameters/updateRemoveQueryParam"
        - $ref: "#/parameters/updateSetQueryParam"
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/VolumeSeriesRequestMutable"
      responses:
        200:
          description: Updated
          schema:
            $ref: "#/definitions/VolumeSeriesRequest"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | An invalid update request was made or no changes were requested |
            | 404 | The object specified by the id parameter was not found or the specified version is not current |
            | 409 | The update requested invalidates some constraints on this object |
          schema:
            $ref: "#/definitions/error"
    delete:
      operationId: volumeSeriesRequestDelete
      tags:
        - volumeSeriesRequest
      description: |
        Delete a VolumeSeriesRequest object.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        204:
          description: VolumeSeriesRequest deleted
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
            | 409 | The object cannot be deleted at this time |
          schema:
            $ref: "#/definitions/error"

  /volume-series-requests/{id}/cancel:
    post:
      operationId: volumeSeriesRequestCancel
      tags:
        - volumeSeriesRequest
      description: |
        Cancel a VolumeSeriesRequest if possible. This operation sets the *cancelRequested* flag in the object immediately
        if it is not already set. The actual cancellation occurs asynchronously.
      parameters:
        - $ref: "#/parameters/idPathParam"
      responses:
        200:
          description: Canceled
          schema:
            $ref: "#/definitions/VolumeSeriesRequest"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found, or the request has completed |
          schema:
            $ref: "#/definitions/error"

  /watchers:
    post:
      operationId: watcherCreate
      tags:
        - watchers
      description: |
        Create a Watcher. The returned identifier must be provided to the
        [watcherFetch](#operation/watcherFetch) operation in order to stream *CrudEvents*.
        The identifier is valid for only 30 seconds and can only be used once.
      parameters:
        - name: payload
          in: body
          schema:
            $ref: "#/definitions/CrudWatcherCreateArgs"
      responses:
        201:
          description: Created the Watcher
          schema:
            $ref: "#/definitions/objId"
        default:
          description: |
            The error response includes a code and a message.
            | Code | Description |
            |------|-------------|
            | 400 | Required properties are invalid or missing |
          schema:
            $ref: "#/definitions/error"

  /watchers/{id}:
    parameters:
      - $ref: "#/parameters/idPathParam"
    get:
      operationId: watcherFetch
      tags:
        - watchers
      description: |
        The invoker should use a WebSocket client for this method.
        The method hijacks the connection and uses a WebSocket to stream *CrudEvent* objects
        for the watcher described by the identifer.
      responses:
        200:
          description: |
            The return value here is just shown for documentation purposes.
            The WebSocket will stream these objects to the invoker.
          schema:
            $ref: "#/definitions/CrudEvent"
        default:
          description: |
            The error response includes a code and a message.
            If the WebSocket handshake fails additional errors may be returned.
            | Code | Description |
            |------|-------------|
            | 404 | The object specified by the id parameter was not found |
          schema:
            $ref: "#/definitions/error"

definitions:
  attributeDescriptor:
    type: object
    description: |
      This object provides meta-data on the associated attribute.
    properties:
      kind:
        type: string
        # note: keep the description in sync with valueType
        description: |
          The data type of the attribute. Possible values are:
          | Kind      | Data Type |
          |-----------|-----------|
          |DURATION   | float with unit |
          |INT        | integer   |
          |PERCENTAGE | float with percent sign |
          |STRING     | string    |
          |SECRET     | secret string |
          When the dimension is "DURATION", the values are strings that encode the interval as floating point numbers and unit suffixes.
          Possible suffixes are:
          | Suffix   | Description |
          |----------|-------------|
          | d | days (24 hours) |
          | h | hours |
          | m | minutes |
          | s | seconds |
          | ms | milliseconds |
          | us (or Âµs) | microseconds |
          These may not be combined. For example "2s500ms" should be represented as "2500ms" or "2.5s".
          For any of the values, "N/A" is used to specify that it is not applicable.
      description:
        type: string
        description: |
          The purpose of the attribute.
      optional:
        type: boolean
        description: |
          If true it indicates that specifying attribute is not required.
      immutable:
        type: boolean
        description: |
          If true it indicates that the attribute cannot be changed.

  authRole:
    type: object
    description: |
      A data structure that tracks the role assigned to a user in the context of an account.
    properties:
      roleId:
        $ref: "#/definitions/objIdMutable"
      disabled:
        type: boolean
        description: |
          The role is disabled for the user if true.

  cacheAllocation:
    type: object
    description: |
      This data structure tracks how much of a particular cache is used by a VolumeSeries.
    properties:
      allocatedSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: The number of bytes of this cache that are allotted to the related VolumeSeries.
      requestedSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: The number of bytes that were requested for the related VolumeSeries according to the StoragePlan.

  capacityAllocation:
    type: object
    description: |
      This data structure tracks the amount of storage reserved and consumed by a VolumeSeries from a particular Pool.
    properties:
      reservedBytes:
        type: integer
        format: int64
        minimum: 0
        description: The number of bytes of available storage of a Pool reserved by the related VolumeSeries.
      consumedBytes:
        type: integer
        format: int64
        minimum: 0
        description: The total number of bytes of available storage of a Pool consumed by the related VolumeSeries.

  storageTypeReservation:
    type: object
    properties:
      sizeBytes:
        description: |
          The estimated amount of capacity needed (per mirror).
          The storage layout algorithm used, usage context and other constraints may effect the actual capacity requisitioned.
        type: integer
        format: int64
        minimum: 0
      numMirrors:
        description: This specifies how many mirrors are used.
        type: integer
        format: int32
        minimum: 1

  capacityReservationPlan:
    type: object
    description: |
      This describes how the storage capacity required by the selected [ServicePlanAllocation](#tag/servicePlanAllocation)
      is to be obtained.
    properties:
      storageTypeReservations:
        type: object
        description:
          This is a map keyed on [CSPStorageTypes](#tag/cspStorageType) name describing
          how much capacity of each type is to be reserved.
        additionalProperties:
          $ref: "#/definitions/storageTypeReservation"

  poolReservation:
    type: object
    properties:
      sizeBytes:
        description: |
          The estimated amount of capacity needed (per mirror).
          The storage layout algorithm used, usage context and other constraints may effect the actual capacity requisitioned.
        type: integer
        format: int64
        minimum: 0
      numMirrors:
        description: This specifies how many mirrors are used.
        type: integer
        format: int32
        minimum: 1

  capacityReservationResult:
    type: object
    description: |
      This contains the result of executing the *capacityReservationPlan* as the operation progresses.
      On completion the [VolumeSeries](#tag/volumeSeries) will be updated with this data.

      Note that if *planOnly* is *true* then no actual change is made to the concerned
      [VolumeSeries](#tag/volumeSeries) and [Pool](#tag/pool) objects.
    properties:
      desiredReservations:
        type: object
        description: |
          The property is a map keyed on [Pool](#tag/pool) object identifier.
          The value is the amount of capacity to be reserved in that pool for the
          [ServicePlanAllocation](#tag/servicePlanAllocation) in context after the operation completes.
        additionalProperties:
          $ref: "#/definitions/poolReservation"
      currentReservations:
        type: object
        description: |
          The property is a map keyed on [Pool](#tag/pool) object identifier.
          The value is the amount of capacity reserved in that pool for the
          [ServicePlanAllocation](#tag/servicePlanAllocation) in context prior to the operation.
        additionalProperties:
          $ref: "#/definitions/poolReservation"

  clusterDescriptor:
    type: object
    description: |
      The property is a map keyed on a cluster specific attribute.
      Attribute semantics may also depend on the object in which the property is found.

      The following attributes are defined for Kubernetes clusters:
      | Name    |  Object Context         | Description |
      |------------|----------------------|-----------------------|
      | k8sPvcYaml | [VolumeSeries](#tag/volumeSeries)  | A sample **Persistent Volume Claim** (in YAML) with a selector for the volume series. The PVC is valid only in the [Cluster](#tag/cluster) to which the volume is bound. |
      | k8sPvcYaml | [ServicePlanAllocation](#tag/servicePlanAllocation) | A sample **Persistent Volume Claim** (in YAML) to dynamically provision from the **Storage Class** representing the associated [ServicePlan](#tag/servicePlan). The PVC is valid only in the associated [Cluster](#tag/cluster). |
      | pvName     | [VolumeSeries](#tag/volumeSeries) | The name of a **Persistent Volume** describing a [VolumeSeries](#tag/volumeSeries) in a [Cluster](#tag/cluster). |

    additionalProperties:
      $ref: "#/definitions/valueType"

  clusterOrchestratorIdentity:
    type: object
    description: |
      This contains a cluster orchestrator object that provides identification
      data for the cluster instance.
    properties:
      data:
        type: string
        description: The object representation.
      format:
        type: string
        description: |
          The format of the data. Typically 'yaml' or 'json'.

  clusterUsagePolicy:
    type: object
    description: |
      This contains policy related properties that influence managed cluster operations.
      The policy defined at the [CSPDomain](#tag/cspDomain) level has purview over all related
      [Cluster](#tag/cluster) objects unless overridden on a per-[Cluster](#tag/cluster) object basis.
      The policy defined in the [System](#tag/system) object has purview over all
      [CSPDomain](#tag/cspDomain) objects unless overridden on a per-[CSPDomain](#tag/cspDomain) object basis.

      Not all properties may be appropriate to every cluster type.

      **Caution**: Policy changes may adversely effect the operation of existing clusters impacted by the change.
    properties:
      accountSecretScope:
        type: string
        description: |
          Defines the scope of the account identity secret. Possible values are:
          | Scope     | Description |
          |-----------|-------------|
          | CLUSTER   | The secret is valid only within the [Cluster](#tag/cluster) for which it was issued |
          | CSPDOMAIN | The secret can be used in any [Cluster](#tag/cluster) within the same [CSPDomain](#tag/cspDomain) |
          | GLOBAL    | The secret can be used in any [Cluster](#tag/cluster) in any [CSPDomain](#tag/cspDomain) |
          The possible scope values that may be set depend on the object in which the policy resides: the scope value cannot be greater than the object's purview.
          For example, it is not permitted to set a CSPDOMAIN scope locally in a [Cluster](#tag/cluster) object.
        enum:
          - CLUSTER
          - CSPDOMAIN
          - GLOBAL
      consistencyGroupName:
        type: string
        description: |
          This specifies the default *name template* used to create [ConsistencyGroup](#tag/consistencyGroup)
          objects for dynamically provisioned volumes.
          See [servicePlanAllocationCustomizeProvisioning](#operation/servicePlanAllocationCustomizeProvisioning)
          for details on the substitution variables within the template.
      volumeDataRetentionOnDelete:
        type: string
        description: |
          This property controls the impact on the data within a cluster volume
          associated with a [VolumeSeries](#tag/volumeSeries) object,
          when the cluster volume gets deleted in the cluster.
          Possible values are:
            | Value | Description |
            |--------|----------|
            | DELETE | Delete the data by deleting the associated [VolumeSeries](#tag/volumeSeries) object and all its snapshots |
            | RETAIN | Preserve the data by only releasing cluster storage resources consumed by the associated [VolumeSeries](#tag/volumeSeries) object |
          The value may be overridden by a property of the same name in the effective **snapshotManagementPolicy** set on
          the [ConsistencyGroup](#tag/consistencyGroup) object of the associated [VolumeSeries](#tag/volumeSeries) object.

          Note that in the Kubernetes case this policy property applies only to a *dynamically provisioned*
          PersistentVolume that is deleted from the cluster.
          The PersistentVolume reclaim policy controls *when* and *how* the object is deleted from the
          cluster; accordingly, the deletion operation may have been automatically or manually initiated in the cluster.
      inherited:
        type: boolean
        description: |
          Flag indicating if policy is inherited.
          Setting this value to true in an inferior object forces inheritance from its superior object.

  cspDomainType:
    type: string
    description: |
      The type of Cloud Service Provider.
      In some cases the value is the same as the CSP vendor name.
    minLength: 1
    readOnly: true

  cspDomainTypeMutable:
    type: string
    description: |
      The type of Cloud Service Provider.
      In some cases the value is the same as the CSP vendor name.
    minLength: 1

  cspStorageType:
    type: string
    description: |
      The name assigned to a type of storage provided by a storage service of a Cloud Service Provider.
    minLength: 1
    readOnly: true

  error:
    type: object
    description: |
      Generic error type that returns a message and an optional HTTP code.
    required:
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string

  ioPattern:
    type: object
    properties:
        name:
          type: string
          description: |
            The size and access pattern of the I/Os
            | Pattern    | Definition           | Workload Types |
            |------------|----------------------|----------------|
            | random     | <= 16KB I/O| user-oriented applications |
            | sequential | > 16KB, <= 64KB I/O | logging, infrastructure applications, batch processing |
            | streaming  | > 64KB I/O| backup, archive, streaming analytics |
          enum:
            - random
            - sequential
            - streaming
        minSizeBytesAvg:
          type: integer
          format: int32
          minimum: 0
        maxSizeBytesAvg:
          type: integer
          format: int32
          minimum: 0

  readWriteMix:
    type: object
    properties:
      name:
        type: string
        description: |
          The mix of reads/writes.
          NOTE: Remember that local memory cache may affect the read/write mix to the data management systems.
          | Read/Write Mix| Definition |
          |------------|----------------|
          | read-mostly | >= 70% of data accesses are reads |
          | read-write| neither reads nor writes comprise > 70% of data accesses |
          | write-mostly | >= 70% of accesses are writes |
        enum:
          - read-mostly
          - read-write
          - write-mostly
      minReadPercent:
        type: integer
        format: int32
        minimum: 0
      maxReadPercent:
        type: integer
        format: int32
        minimum: 0

  ioProfile:
    type: object
    description: |
      A characterization of a user I/O workload based on access pattern and read-write mix.
    properties:
      ioPattern:
        $ref: "#/definitions/ioPattern"
      readWriteMix:
        $ref: "#/definitions/readWriteMix"

  nameValuePair:
    type: object
    properties:
      name:
        type: string
        minLength: 1
      value:
        # note: no oneOf support in 2.0
        type: string
    required:
      - name

  volumeSeriesMinMaxSize:
    type: object
    description: |
      The minimum and maximum Volume Series size that a Service Plan supports.
    properties:
      minSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: The minimum VolumeSeries size that this Service Plan can support.
      maxSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: The maximum VolumeSeries size that this Service Plan can support.

  provisioningUnit:
    type: object
    description: |
      The unit of performance/GiB that an object supports. This allows the customer to size the object to meet both capacity and performance requirements, and then measure the compliance of that object.
      The performance will either be expressed in *IOPS/GiB* or *Throughput/GiB* but not both.
    properties:
      iOPS:
        type: integer
        format: int64
        minimum: 0
        description: The number of Input/Output operations per second that an object should generate for each 1GiB of capacity. A value of 0 means "Not Applicable".

      throughput:
        type: integer
        format: int64
        minimum: 0
        description: The number of bytes per second that an object should generate for each 1GiB of capacity. A value of 0 means "Not Applicable".

  servicePlanName:
    type: string
    description: |
      The name of a ServicePlan object.
      The name must be unique across all ServicePlan objects.
    minLength: 1

  storageFormulaName:
    type: string
    description: |
      The name of a StorageFormula object.
      The name must be unique across all StorageFormula objects.
    minLength: 1

  stringList:
    type: array
    items:
      type: string
      minLength: 1

  timestampedString:
    type: object
    properties:
      time:
        type: string
        format: date-time
      message:
        type: string

  objId:
    type: string
    description: Opaque object identifier.
    maxLength: 128
    readOnly: true

  objIdMutable:
    type: string
    description: Opaque object identifier.
    maxLength: 128

  objMeta:
    type: object
    description: Object meta-data.
    readOnly: true
    properties:
      objType:
        type: string
      id:
        $ref: "#/definitions/objId"
      version:
        $ref: "#/definitions/objVersion"
      timeCreated:
        type: string
        format: date-time
        description: The time the object was created.
      timeModified:
        type: string
        format: date-time
        description: The time the object was last modified.

  objName:
    type: string
    description: |
      The name of the object.
      Depending on the object type, the name may be required to be distinct in some related context.
    minLength: 1
    maxLength: 128
    pattern: ^\S.*$

  objDescription:
    type: string
    description: The description of the object.
    maxLength: 256

  objTags:
    description: |
      A list of arbitrary strings that could be used for searching or grouping.
      A common pattern is to use a ":" to format the string into a "key:value" pair.
      User settable tags are usually stored in a separate property from internal tags
      but some user settable tags may be recognized by the system.
    type: array
    items:
      type: string
      minLength: 1

  objVersion:
    description: |
      A monotonically increasing value that is incremented every time an object is modified.
    type: integer
    format: int32

  serviceState:
    type: object
    description: |
      The health of a service component.
    properties:
      state:
        type: string
        description: |
          The state of a service component. Possible values are:
          | State    | Meaning |
          |----------|---------|
          | UNKNOWN  | No heartbeat information is available |
          | STARTING | The service is initializing itself |
          | NOT_READY | The service is waiting on external entities |
          | READY    | The service is running normally |
          | STOPPING | The service is terminating |
          | ERROR    | The service has encountered some error |
      heartbeatTime:
        type: string
        format: date-time
        description: The time the service last reported its state.
      heartbeatPeriodSecs:
        type: integer
        description: The service heartbeat period in seconds.

  nuvoService:
    type: object
    description: |
      The associated service deployment characteristics and runtime state.
    allOf:
      - properties:
          serviceType:
            type: string
            description: The type of service.
          serviceVersion:
            type: string
            description: The version of the service software.
          serviceIP:
            type: string
            description: |
              The IP address of the service, valid within a domain defined by the type of service.
              This is typically *not* the hostname of the service node. Not all services will set this value.
              | Service Type | Service IP Domain |
              |--------------|-------------------|
              | agentd       | The managed cluster namespace in which the service runs. The same IP is used for the data management sub-system service. |
              | clusterd     | The managed cluster namespace in which the service runs. |
              | centrald     | The value is not set. |
          serviceLocator:
            type: string
            description: A cluster specific locator for the service. May not be set by all services.
          serviceAttributes:
            description: A map of attributes describing the service.
            type: object
            additionalProperties:
              $ref: "#/definitions/valueType"
          messages:
            type: array
            description: |
              Recent status messages for the service.
            items:
              $ref: "#/definitions/timestampedString"
      - $ref: "#/definitions/serviceState"

  identity:
    type: object
    description: |
      This encapsulates the identity information of the creator of the object.
      It is normally populated automatically from the provided authentication information.
    properties:
      accountId:
        $ref: "#/definitions/objIdMutable"
      tenantAccountId:
        $ref: "#/definitions/objId"
      userId:
        $ref: "#/definitions/objIdMutable"

  debugSettings:
    type: object
    description: |
      This encapsulates the settings for support of various debug operation.
    properties:
      stack:
        type: boolean
        description: |
          Specifies if service needs to dump all stack traces to the log (stdout) to capture what the process is doing.
        default: true

  ioMetricData:
    type: object
    properties:
      data:
        description: An array of I/O metric data samples
        type: array
        items:
          $ref: "#/definitions/ioMetricDatum"

  ioMetricDatum:
    type: object
    description: |
      This describes a single metric data point for an object at a specific point in time.
    properties:
      timestamp:
        type: string
        format: date-time
        description: |
          The timestamp of the data sample.
      objectId:
        $ref: "#/definitions/objIdMutable"
      version:
        type: integer
        format: int32
        description: The protocol version of the data sample.
      sample:
        type: string
        description: |
          A JSON encoded string with the sample data.

  mount:
    type: object
    description: |
      This encapsulates the properties required to track where the head or a snapshot of a VolumeSeries is mounted.
    properties:
      snapIdentifier:
        type: string
        description: |
          The identifier for the snapshot that is mounted, typically a snapIdentifier within the VolumeSeries *snapshots*.
          The value **HEAD** is denotes the head of the VolumeSeries rather than a snapshot.
      pitIdentifier:
        type: string
        description: The UUID of the point-in-time.
      mountedNodeId:
        $ref: "#/definitions/objIdMutable"
      mountedNodeDevice:
        type: string
        description: |
          The OS specific name for the device through which the storage can be accessed on a Node.
      mountMode:
        type: string
        description: |
          This describes the ways in which the device can be accessed. The possible values are:
          | Mode       | Meaning |
          |------------|---------|
          | READ_ONLY  | The data on the device can only be read |
          | READ_WRITE | The data on the device can be read and written |
      mountState:
        type: string
        description: |
          This describes the mount state. The possible values are:
          | State      | Meaning |
          |------------|---------|
          | ERROR      | The attempt to mount the snapshot failed |
          | MOUNTING   | The snapshot is being mounted on the mountedNodeId |
          | MOUNTED    | The snapshot is mounted on the mountedNodeId and is accessible via the mountedNodeDevice with the mountMode |
          | UNMOUNTING | The snapshot is being unmounted from the mountedNodeId |
      mountTime:
        type: string
        format: date-time
        description: The time at which the snapshot was mounted.

  nodeStorageDevice:
    type: object
    description: |
      This contains information on a single ephemeral, node-scoped storage device.
    properties:
      deviceName:
        type: string
        description: |
          The OS specific name for the device through which the storage can be accessed on a Node.
      deviceState:
        type: string
        description: |
          This describes the use of the underlying storage device from the Nuvoloso data management sub-system perspective. Possible values are:
          | State      | Description |
          |------------|-------------|
          |UNUSED      | The device is not currently being used |
          |CACHE       | The device is being used for caching by the Nuvoloso storage layer |
          |RESTRICTED  | The device cannot be used as a cache device, e.g. because it has been formatted with a filesystem |
          |ERROR       | There was an error accessing the device |
      deviceType:
        type: string
        description: |
          The type of storage device. Possible values are:
          | Type       | Description |
          |------------|-------------|
          | HDD        | The device is a HDD |
          | SSD        | The device is an SSD |
      sizeBytes:
        description: The raw size of the device.
        type: integer
        format: int64
        minimum: 0
      usableSizeBytes:
        description: |
          The amount of bytes that are available for caching. The value is only valid when the deviceState
          is CACHE. It must be less than or equal to the sizeBytes.
        type: integer
        format: int64
        minimum: 0

  progress:
    type: object
    description: |
      This contains information on the progress of an operation.
      It is present only if progress data is available and all fields may not be set.
    properties:
      totalBytes:
        type: integer
        format: int64
        description: An estimate of the total number of bytes under consideration by the operation, if applicable.
      offsetBytes:
        type: integer
        format: int64
        description: The current byte position in the operation, with value in the range [0, totalBytes], if applicable.
      transferredBytes:
        type: integer
        format: int64
        description: The number of bytes transferred, if applicable.
      percentComplete:
        type: integer
        format: int32
        minimum: 0
        maximum: 100
        description: The percentage of the operation that has completed.  The semantics depend on the operation concerned.
      timestamp:
        type: string
        format: date-time
        description: The time at which this progress was recorded.  If the time is zero then the progress data is not valid.

  snapshotData:
    type: object
    description: |
      This encapsulates the properties of a single snapshot of a VolumeSeries.
    properties:
      consistencyGroupId:
        $ref: "#/definitions/objIdMutable"
      deleteAfterTime:
        type: string
        format: date-time
        description: The time after which the snapshot can be purged.
      locations:
        type: array
        items:
          $ref: "#/definitions/snapshotLocation"
      pitIdentifier:
        type: string
        description: The UUID of the point-in-time.
      protectionDomainId:
        $ref: "#/definitions/objIdMutable"
      sizeBytes:
        description: The size of the [VolumeSeries](#tag/volumeSeries) object when the PiT was established.
        type: integer
        format: int64
        minimum: 0
      snapIdentifier:
        type: string
        description: |
          An identifier for the snapshot. It is either the identifier of the
          consistency group snapshot request or the volume snapshot request if the
          snapshot was not made via the consistency group.
      snapTime:
        type: string
        format: date-time
        description: The time at which the point-in-time was created.
      volumeSeriesId:
        $ref: "#/definitions/objIdMutable"

  snapshotLocation:
    type: object
    description: |
      This describes a snapshot copy in a protection store.
    properties:
      cspDomainId:
        $ref: "#/definitions/objIdMutable"
      creationTime:
        type: string
        format: date-time
        description: The time that the snapshot data was copied to the protection store.

  snapshotCatalogPolicy:
    type: object
    description: |
      This property identifies the [protection store](#tag/protectionStore) to be used to store the
      metadata on snapshots of accounts in the *scope of this policy*, along with
      the [ProtectionDomain](#tag/protectionDomain) used to secure the snapshot metadata in the
      protection store.

      An *effective policy* must be established for an account to enable [MOUNT](#tag/volumeSeriesRequest/MOUNT)
      operations on [VolumeSeries](#tag/volumeSeries) owned by that account.
      However, it is not mandatory to set this policy in every [Account](#tag/account) object;
      instead, the policy is searched for during [Snapshot](#tag/snapshot) object creation,
      in the following order:
      - In the [Account](#tag/account) object of the account creating the [Snapshot](#tag/snapshot)
      - In the [Account](#tag/account) object identified by the **tenantAccountId** property of the account creating
        the [Snapshot](#tag/snapshot)
      - In the [System](#tag/system) object

      The specification of this policy in the [System](#tag/system) object has scope over all [Account](#tag/account) objects
      in the system unless a narrower scope is present.
      The specification of this policy in a **Tenant Account** overrides the specification inherited from the [System](#tag/system) object
      and has scope over the tenant account and *all* of its subordinate (normal) accounts
      unless an individual subordinate account specifies the policy.
      The specification of this policy in a normal account overrides any inherited specification and has scope over that account only.
      Once set in an [Account](#tag/account) the policy may not be cleared unless an inherited policy value exists.

      The [Account](#tag/account) that defines this policy must be authorized
      to use the [protection store](#tag/protectionStore) represented by the [CSPDomain](#tag/cspDomain) object
      specified by the **cspDomainId** field,
      and must own the [ProtectionDomain](#tag/protectionDomain) object specified by the **protectionDomainId** field.
      Note that [Account](#tag/account) objects in the effective scope of the policy may not be authorized to view these objects
      though the policy still applies to them.
    properties:
      cspDomainId:
        $ref: "#/definitions/objIdMutable"
      protectionDomainId:
        $ref: "#/definitions/objIdMutable"
      inherited:
        type: boolean
        description: Flag indicating if policy is inherited. It is automatically set.

  snapshotManagementPolicy:
    type: object
    description: |
      This contains properties that establish volume data protection policy.
      The policy defined at the [Account](#tag/account) level has purview over all
      [VolumeSeries](#tag/volumeSeries) objects in the account, but may be overridden at the
      [ConsistencyGroup](#tag/consistencyGroup) levels.

      The [System](#tag/system) object contains default values for newly created [Account](#tag/account) objects.
    properties:
      disableSnapshotCreation:
        type: boolean
        description: Disable creation of snapshots in [VolumeSeries](#tag/volumeSeries) objects in the purview of this policy.
      noDelete:
        type: boolean
        description: Disable deletion of snapshots of [VolumeSeries](#tag/volumeSeries) objects in the purview of this policy.
      deleteLast:
        type: boolean
        description: Enable deletion of the last snapshot of a [VolumeSeries](#tag/volumeSeries) object.
      deleteVolumeWithLast:
        type: boolean
        description: Enable deletion of the [VolumeSeries](#tag/volumeSeries) object when its last snapshot gets deleted.
      retentionDurationSeconds:
        type: integer
        format: int32
        minimum: 0
        description: |
          This specifies the duration (in seconds) for which a snapshot will be retained.
      volumeDataRetentionOnDelete:
        type: string
        description: |
          If not the empty string, this overrides the field of the same name in the effective **clusterUsagePolicy** of the
          [Cluster](#tag/cluster) object to which a [VolumeSeries](#tag/volumeSeries) is bound
          when the associated cluster volume is deleted from within the cluster.
      inherited:
        type: boolean
        description: Flag indicating if policy is inherited from the corresponding [System](#tag/system) object (for Account) or [Account](#tag/account) object (for ConsistencyGroup).

      # TBD: retention related properties

  lifecycleManagementData:
    type: object
    description: |
      Internal data used to manage a [VolumeSeries](#tag/volumeSeries) object when bound to a [Cluster](#tag/cluster).
      Also used in a [VolumeSeriesRequest](#tag/volumeSeriesRequest) to store intermediate values.
    properties:
      estimatedSizeBytes:
        type: integer
        format: int64
        description: The estimated size of the next snapshot in bytes.
      finalSnapshotNeeded:
        type: boolean
        description: |
          Set to true if a snapshot is needed after the HEAD is unmounted.
      layoutAlgorithm:
        type: string
        description: The name of the layout algorithm used.
      genUUID:
        type: string
        description: The generation UUID of the data management layer at the time the PiT was created.
      writeIOCount:
        type: integer
        format: int64
        description: The write IO count at the time the PiT was created.
      sizeEstimateRatio:
        type: number
        format: double
        description: The measured ratio of estimated size to actual size transferred.
      nextSnapshotTime:
        type: string
        format: date-time
        description: The time at which the next snapshot should be scheduled in order to meet the (RPO).
      lastSnapTime:
        type: string
        format: date-time
        description: The PiT *snapTime* of the last successful snapshot.
      lastUploadTime:
        type: string
        format: date-time
        description: The time at which the last snapshot upload was started.
      lastUploadSizeBytes:
        type: integer
        format: int64
        description: |
          The size of the last data upload in bytes.
          Note that this is not indicative of the snapshot size.
      lastUploadTransferRateBPS:
        type: integer
        format: int32
        description: The transfer rate of the last upload in bytes per second.

  vsrManagementPolicy:
    type: object
    description: |
      This contains policy related properties that influence the [VolumeSeriesRequest](#tag/volumeSeriesRequest) life cycle.
      The policy defined at the [Account](#tag/account) level has purview over all [VolumeSeriesRequest](#tag/volumeSeriesRequest)
      objects related to the account.

      The [System](#tag/system) object contains default values for newly created [Account](#tag/account) objects.
    properties:
      noDelete:
        type: boolean
        description: Disable deletion of [VolumeSeriesRequest](#tag/volumeSeriesRequest) objects in the purview of this policy.
      retentionDurationSeconds:
        type: integer
        format: int32
        minimum: 0
        description: |
          This specifies the duration (in seconds) for which a [VolumeSeriesRequest](#tag/volumeSeriesRequest) will be retained.
      inherited:
        type: boolean
        description: Flag indicating if policy is inherited from the corresponding [System](#tag/system) object.

  parcelAllocation:
    type: object
    description: |
      This data structure tracks how much of a particular Storage object is used by a VolumeSeries.
    properties:
      sizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: The number of bytes of this Storage object that are allotted to the related VolumeSeries.

  sloList:
    allOf:
      - $ref: "#/definitions/sloListMutable"
    readOnly: true

  sloListMutable:
    type: object
    description: |
      A collection of SLOs in a map. The *kind* and *immutable* properties cannot be modified.
    additionalProperties:
      $ref: "#/definitions/restrictedValueType"

  restrictedValueType:
    type: object
    allOf:
      - $ref: "#/definitions/valueType"
      - properties:
          immutable:
            type: boolean
            description: The value is immutable if true.

  sscList:
    allOf:
      - $ref: "#/definitions/sscListMutable"
    readOnly: true

  sscListMutable:
    type: object
    description: |
      Storage Service Capabilities represented in a map.
    additionalProperties:
      $ref: "#/definitions/valueType"

  storageAccessibility:
    allOf:
      - $ref: "#/definitions/storageAccessibilityMutable"
    readOnly: true

  storageAccessibilityMutable:
    type: object
    description: |
      This defines the accessibility of a Storage object with respect to a Node object.
      See [Pool](#tag/pool) for more details.
    properties:
      accessibilityScope:
        $ref: "#/definitions/storageAccessibilityScopeType"
      accessibilityScopeObjId:
        $ref: "#/definitions/objIdMutable"

  storageAccessibilityScopeType:
    type: string
    description: |
      This defines the accessibility scope of storage with respect to a node. Possible values are:
      | Scope     | Meaning |
      |-----------|---------|
      | NODE      | The storage is only accessible from a specified node host |
      | CSPDOMAIN | The storage is accessible from any node host in any cluster in the specified CSPDomain |

  servicePlanCost:
    type: object
    description: |
      Returns the cost of a [ServicePlan](#tag/servicePlan) in a [CSPDomain](#tag/cspDomain).
    properties:
      costPerGiB:
        type: number
        format: double
        description: |
          Computed cost per GiB for storage of the specified [ServicePlan](#tag/servicePlan)
          in this CSPDomain.
      costPerGiBWithoutCache:
        type: number
        format: double
        description: |
          Computed cost per GiB for storage of the specified [ServicePlan](#tag/servicePlan)
          in this CSPDomain ignoring cache storage.
      costBreakdown:
        type: object
        description: |
          The contribution of each individual [CSPStorageTypes](#tag/cspStorageType)
          to the costPerGiB calculation in a map keyed on storage type.
        additionalProperties:
          $ref: "#/definitions/storageCostFraction"
      storageFormula:
        $ref: "#/definitions/StorageFormula"

  storageCost:
    type: object
    description: |
      This contains the customer assessed cost of storage of a particular type.
    properties:
      costPerGiB:
        type: number
        format: double
        description: Storage cost per GiB.

  storageCostFraction:
    type: object
    description: |
      This contains the proportional cost contribution of storage of a particular type
      to the storage provided by a [ServicePlan](#tag/servicePlan).
    properties:
      contributedBytes:
        type: integer
        format: int64
        description: The number of bytes of storage of this type needed for 1 GiB of [ServicePlan](#tag/servicePlan) storage.
      costContributed:
        type: number
        format: double
        description: The cost contribution to the total.
      costPerGiB:
        type: number
        format: double
        description: Storage cost per GiB.

  storageFormulaTypeElement:
    type: object
    description: |
      This describes the use of a specific CSPStorageType in a StorageFormula.
      The StorageFormula keeps these objects in a map keyed on CSPStorageType name.
    properties:
      percentage:
        type: integer
        description: The percentage of the total allocation to be allocated on this CSPStorageType.
        format: int32
        minimum: 0
        maximum: 100
      overhead:
        type: integer
        description: The allocation overhead for this element required by the storage layer implementation, also expressed as a percentage.
        format: int32
        minimum: 0
        maximum: 100

  storageLayout:
    type: string
    description: |
      A string defining the type of layout to use for parcels.
    enum:
      - standalone
      - mirrored

  storageParcelElement:
    type: object
    description: |
      This data structure tracks actual and planned [Storage](#tag/storage) object capacity
      in a [VolumeSeriesRequest](#tag/volumeSeriesRequest) object.
    properties:
      sizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: The number of bytes of this Storage object that are allotted to the related VolumeSeries.
      shareableStorage:
        type: boolean
        description: Value to be set in the [StorageRequest](#tag/storageRequest) *shareableStorage* property if provisioning.
      provMinSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: The amount of bytes to specify in a [StorageRequest](#tag/storageRequest) *minSizeBytes* property if provisioning.
      provRemainingSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The amount of capacity that would be left in a provisioned [Storage](#tag/storage) object on completion.
          This determines if the object can be shared.
      provParcelSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The value to be specified in a [StorageRequest](#tag/storageRequest) *parcelSizeBytes* property if provisioning.
      provNodeId:
        type: string
        description:
          The node from which additional Storage is to be accessed.  If not set then the node on which
          the [VolumeSeries](#tag/volumeSeries) object is to be accessed is assumed.
      provStorageRequestId:
        type: string
        description:
          The identifier of an existing active (at the time of planning) [StorageRequest](#tag/storageRequest)
          object that should be used to fulfil the request.
          The [VolumeSeriesRequest](#tag/volumeSeriesRequest) object should record its claim for the desired
          capacity in the [StorageRequest](#tag/storageRequest) object's *volumeSeriesRequestClaims* property.

  storagePlan:
    type: object
    description: |
      The storage plan expresses the desired [Storage](#tag/storage) and cache allocation and layout for a *BOUND*
      [VolumeSeries](#tag/volumeSeries) object. The plan is expressed generically in
      terms of storage elements and the algorithm specifying how the storage units that compose the
      [VolumeSeries](#tag/volumeSeries) object are to be assembled.

      Such a plan is typically computed in the *SIZING* state of a [VolumeSeriesRequest](#tag/volumeSeriesRequest)
      and gets updated during the *PLACEMENT* state.

      The storage plan is also used for deletion and reattachment purposes.
      In these cases, as layout is not an issue, the plan is "flattened" and only relevant properties set.
    properties:
      storageLayout:
        $ref: "#/definitions/storageLayout"
      layoutAlgorithm:
        type: string
        description: The name of the layout algorithm used.
      placementHints:
        type: object
        description:
          Properties that impact node and Storage selection.  *TBD*
        additionalProperties:
          $ref: "#/definitions/valueType"
      storageElements:
        type: array
        description: |
          Each array item corresponds to a distinct set of [Storage](#tag/storage) objects
          that may not overlap with [Storage](#tag/storage) objects corresponding to other
          array items even if they are of the same storage type.
        items:
          $ref: "#/definitions/storagePlanStorageElement"

  storagePlanStorageElement:
    type: object
    description: |
      This object describes a distinct set of [Storage](#tag/storage) objects that are
      a part of a [VolumeSeries](#tag/volumeSeries) object.
      A single [Pool](#tag/pool) will provide all the [Storage](#tag/storage)
      of the element.

      When the *intent* is CACHE, the *poolId* will be empty and the *storageParcels.provMinSizeBytes*
      reflects the minimum amount of cache that is required.
    properties:
      intent:
        type: string
        description: |
          The intent of this storage element. e.g. DATA, MIRROR#, STRIPE#, CACHE, etc.
      poolId:
        $ref: "#/definitions/objIdMutable"
      sizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The minimum capacity that should be provided by this storage element.
      storageParcels:
        type: object
        description: |
          This is a map of actual and planned [Storage](#tag/storage) object capacity for this element.
          The map keys are either the actual [Storage](#tag/storage) object identifiers that are selected
          by this request or pseudo-keys representing planned activity to obtain such objects.
          **The map does not reflect the current use of [Storage](#tag/storage) objects in the associated
          [VolumeSeries](#tag/volumeSeries) object at the time the request was created**.
          The presence of such [Storage](#tag/storage) object keys is only because *additional capacity*
          will be obtained from these objects.

          The SIZING state initializes the map with a single item with the pseudo-key *"STORAGE"* to
          reflect the remaining capacity to be allocated to the storage element. The presence of this
          pseudo-key is an indication that PLACEMENT planning has not yet commenced. In the case of CACHE,
          The SIZING and RESIZING_CACHE states use the pseudo-keys *"SSD"* and *"HDD"* to reflect the specific cache type required. These keys are
          not changed during PLACEMENT but are used during VOLUME_EXPORT and REALLOCATING_CACHE to select the correct type of cache.

          After placement planning, the *"STORAGE"* key will be replaced by
          - 0 or more pseudo-key prefix *"STORAGE-"* items, each representing a [StorageRequest](#tag/storageRequest)
            object that will be created to obtain new [Storage](#tag/storage) objects.
            The element may identify a specific active [StorageRequest](#tag/storageRequest) to wait on and
            the [Node](#tag/node) on which the [Storage](#tag/storage) object is to be provisioned.
          - 0 or more existing [Storage](#tag/storage) object key items that have been selected to provide additional
            capacity

          As the placement plan is executed, the *"STORAGE-"* key items will be replaced with the identifiers
          of the newly provisioned [Storage](#tag/storage) objects.
        additionalProperties:
          $ref: "#/definitions/storageParcelElement"

  poolState:
    allOf:
      - $ref: "#/definitions/poolStateMutable"
    readOnly: true

  poolStateMutable:
    type: object
    properties:
      messages:
        type: array
        description: |
          Recent messages on state changes including the reasons for **ERROR**.
        items:
          $ref: "#/definitions/timestampedString"

  protectionDomainMap:
    type: object
    description: |
      The association of [protection stores](#tag/protectionStore) (represented by [CSPDomain](#tag/cspDomain)
      objects) to the [ProtectionDomain](#tag/protectionDomain) objects that secure an account's data.
      This takes the form of a map with key a [CSPDomain](#tag/cspDomain) object ID and value the
      associated [ProtectionDomain](#tag/protectionDomain) object ID, saved in the
      [Account](#tag/account) object that owns the [ProtectionDomain](#tag/protectionDomain) objects.
      It is modifiable only via the [accountProtectionDomainSet](#operation/accountProtectionDomainSet) and
      [accountProtectionDomainClear](#operation/accountProtectionDomainClear) methods.

      The special key **"DEFAULT"** is used to establish a default association for
      [CSPDomain](#tag/cspDomain) objects not assigned specific associations.

      An effective association must always be present for those [CSPDomain](#tag/cspDomain) objects
      where there exist [VolumeSeries](#tag/volumeSeries) that are mounted, or are capable of being mounted,
      in [Clusters](#tag/cluster) within the [CSPDomain](#tag/cspDomain).
    additionalProperties:
      $ref: "#/definitions/objIdMutable"

  storageState:
    allOf:
      - $ref: "#/definitions/storageStateMutable"
    readOnly: true

  storageStateMutable:
    type: object
    description: |
      This contains various properties that maintain the state of a Storage object.
    properties:
      provisionedState:
        type: string
        description: |
          This describes the availability of the physical storage underlying this object. Possible values are:
          | State         | Description |
          |---------------|-------------|
          |UNPROVISIONED  | The physical storage has not yet been provisioned |
          |PROVISIONING   | The physical storage is being provisioned |
          |PROVISIONED    | The physical storage has been provisioned and assigned to a [Cluster](#tag/cluster) |
          |UNPROVISIONING | The physical storage is being released |
          |ERROR          | Provisioning of the physical storage has encountered an error |
      attachmentState:
        type: string
        description: |
          This describes the attachment of the physical storage to a Node. Possible values are:
          | State     | Description |
          |-----------|-------------|
          |DETACHED   | The storage is not attached to any Node |
          |ATTACHED   | The storage is attached to the Node specified by attachedNodeId and is accessible via the attachedNodeDevice |
          |DETACHING  | The storage is in the process of being detached from the Node specified by attachedNodeId |
          |ATTACHING  | The storage is in the process of being attached to the Node specified by attachedNodeId |
          |ERROR      | The process of attaching or detaching has encountered an error |
      attachedNodeId:
        $ref: "#/definitions/objIdMutable"
      attachedNodeDevice:
        type: string
        description: |
          The OS specific name for the device through which the storage can be accessed on a Node.
      mediaState:
        type: string
        description: |
          This describes the content of the physical storage. Possible values are:
          | State      | Description |
          |------------|-------------|
          |UNFORMATTED | The physical storage has not been formatted |
          |FORMATTED   | The physical storage has been formatted by the Nuvoloso data management sub-system |
      deviceState:
        type: string
        description: |
          This describes the use of the underlying storage device from the Nuvoloso data management sub-system perspective. Possible values are:
          | State      | Description |
          |------------|-------------|
          |UNUSED      | The device is not currently being used |
          |FORMATTING  | The device is in the process of being formatted |
          |OPENING     | The device is being opened |
          |OPEN        | The device is being used by the Nuvoloso data management sub-system |
          |CLOSING     | The device is being closed |
          |ERROR       | There was an error accessing the device |
      messages:
        type: array
        description: |
          Recent messages on state changes including the reason for **ERROR**.
        items:
          $ref: "#/definitions/timestampedString"

  syncPeer:
    type: object
    description: |
      This tracks the state of an individual request object involved in synchronization with a set of other objects.
      Each participating object is expected to maintain its current state in its tracking data structure.
    properties:
      id:
        $ref: "#/definitions/objIdMutable"
      state:
        type: string
        description: The state of the object.
      genCounter:
        type: integer
        format: int32
        description: The synchronization session generation counter.
      annotation:
        type: string
        description: An arbitrary string.

  syncPeerMap:
    type: object
    description: |
      A map containing the state of request objects that synchronize with each other at run time.
      Entries in the map are keyed on mutually agreed upon discriminating string values, one for each participating object.
      The map must be created with empty values for each key and the coordinating objects will fill in the details
      as part of the synchronization protocol.
      The *syncCoordinatorId* property of each participating object will be set to the identity of the coordination object that contains this map.
      A synchronization session should be attempted only when all participant objects have the same *genCounter* value.
      A participant must increment its *genCounter* value when it detects synchronization in order to enable a subsequent session.
    additionalProperties:
      $ref: "#/definitions/syncPeer"

  userAccountRole:
    type: object
    properties:
      accountId:
        $ref: "#/definitions/objId"
      roleId:
        $ref: "#/definitions/objId"
      accountName:
        type: string
        description: The name associated with the accountId at the time of the query.
      tenantAccountName:
        type: string
        description: If present, the account is a subordinate of the named tenant account.
      roleName:
        type: string
        description: The name associated with the roleId.

  valueType:
    type: object
    # note: keep the description in sync with attributeDescriptor
    description: |
      A unified data type. The *kind* property identifies the actual datatype in the *value* string property.
      Possible values are:
        | Kind      | Data Type |
        |-----------|-----------|
        |DURATION   | float with unit |
        |INT        | integer   |
        |PERCENTAGE | float with percent sign |
        |STRING     | string    |
        |SECRET     | secret string |
        When the dimension is "DURATION", the values are strings that encode the interval as floating point numbers and unit suffixes.
        Possible suffixes are:
        | Suffix   | Description |
        |----------|-------------|
        | d | days (24 hours) |
        | h | hours |
        | m | minutes |
        | s | seconds |
        | ms | milliseconds |
        | us (or Âµs) | microseconds |
        These may not be combined. For example "2s500ms" should be represented as "2500ms" or "2.5s".
        For any of the values, "N/A" is used to specify that it is not applicable.
    properties:
      kind:
        type: string
      value:
        type: string

  vsrClaim:
    type: object
    description: |
      Records the amount of capacity multiple [VolumeSeriesRequest](#tag/volumeSeriesRequest)
      have claimed from the [Storage](#tag/storage) object being provisioned by
      a [StorageRequest](#tag/storageRequest).
    properties:
      remainingBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The amount of bytes remaining to be allocated.  A value of 0 indicates that the entire
          [Storage](#tag/storage) object has been exclusively claimed.
      claims:
        type: object
        description: |
          A map of [VolumeSeriesRequest](#tag/volumeSeriesRequest) identifier to its claim.
        additionalProperties:
          $ref: "#/definitions/vsrClaimElement"

  vsrClaimElement:
    type: object
    description: |
      Records the amount of capacity a single [VolumeSeriesRequest](#tag/volumeSeriesRequest)
      has claimed from the [Storage](#tag/storage) object being provisioned by
      a [StorageRequest](#tag/storageRequest).
    properties:
      sizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The amount of bytes claimed.
      annotation:
        type: string
        description: |
          An arbitrary string that the [VolumeSeriesRequest](#tag/volumeSeriesRequest) uses
          to track this claim.

  Account:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
          tenantAccountId:
            $ref: "#/definitions/objIdMutable"
          accountRoles:
            type: array
            description: |
              A list of Role object IDs that can be assigned to the userRoles of this account.
            minItems: 1
            uniqueItems: true
            items:
              $ref: "#/definitions/objIdMutable"
      - $ref: "#/definitions/AccountMutable"

  AccountMutable:
    type: object
    properties:
      name:
        $ref: "#/definitions/objName"
      secrets:
        type: object
        description: Map of secrets for account identity in clusters. Not exposed through the API.
        additionalProperties:
          type: string
      description:
        $ref: "#/definitions/objDescription"
      disabled:
        type: boolean
        description: |
          The account is disabled if true.
      tags:
        $ref: "#/definitions/objTags"
      messages:
        type: array
        description: |
          Recent messages on changes to the account.
        items:
          $ref: "#/definitions/timestampedString"
      protectionDomains:
        $ref: "#/definitions/protectionDomainMap"
      userRoles:
        type: object
        description: |
          A map of userId to authorization roleId.
        additionalProperties:
          $ref: "#/definitions/authRole"
      snapshotCatalogPolicy:
        $ref: "#/definitions/snapshotCatalogPolicy"
      snapshotManagementPolicy:
        $ref: "#/definitions/snapshotManagementPolicy"
      vsrManagementPolicy:
        $ref: "#/definitions/vsrManagementPolicy"

  ApplicationGroup:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
      - $ref: "#/definitions/ApplicationGroupCreateOnce"
      - $ref: "#/definitions/ApplicationGroupMutable"

  ApplicationGroupCreateOnce:
    type: object
    properties:
      accountId:
        $ref: "#/definitions/objIdMutable"
      tenantAccountId:
        $ref: "#/definitions/objIdMutable"

  ApplicationGroupMutable:
    type: object
    properties:
      name:
        $ref: "#/definitions/objName"
      description:
        $ref: "#/definitions/objDescription"
      tags:
        $ref: "#/definitions/objTags"
      systemTags:
        $ref: "#/definitions/objTags"

  AuditLogRecord:
    type: object
    properties:
      recordNum:
        type: integer
        format: int32
        description: Each record is identified by a unique, ascending sequence number.
        readOnly: true
      timestamp:
        type: string
        format: date-time
        description: The timestamp of the record.
        readOnly: true
      parentNum:
        type: integer
        format: int32
        description: The record number of the parent record when the classification is "annotation".
      classification:
        type: string
        description: The classification of the record. One of "audit", "event" or "annotation".
      action:
        type: string
        description: |
          The action being performed. One of "create", "delete" or "update" for "audit" and "event" records.
          The full semantics for "annotation" records are TBD, however the value "note" is set by default.
      error:
        type: boolean
        description: If true, the record reports an error, e.g. an unauthorized access.
      message:
        type: string
        description: Additional information regarding the access.
      name:
        type: string
        description: |
          The name of object being accessed, if any.
          In the case of [User](#tag/user) objects, the *authIdentifier* is recorded in this field.
          The semantics of this field for "annotation" records is TBD.
      objectId:
        $ref: "#/definitions/objIdMutable"
      objectType:
        type: string
        description: The type of object being accessed. The type is derived from the tags (object types) in this specification.
      refObjectId:
        $ref: "#/definitions/objIdMutable"
      tenantAccountId:
        $ref: "#/definitions/objIdMutable"
      accountId:
        $ref: "#/definitions/objIdMutable"
      accountName:
        type: string
        description: The name corresponding to the *accountId* at the time of the action.
      userId:
        $ref: "#/definitions/objIdMutable"
      authIdentifier:
        type: string
        description: The *authIdentifier* corresponding to the *userId* at the time of the action.

  Cluster:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
      - $ref: "#/definitions/ClusterCreateOnce"
      - $ref: "#/definitions/ClusterMutable"

  ClusterMutable:
    type: object
    allOf:
      - properties:
          clusterVersion:
            type: string
            description: The version of the cluster software.
          clusterUsagePolicy:
            $ref: "#/definitions/clusterUsagePolicy"
          service:
            $ref: "#/definitions/nuvoService"
      - $ref: "#/definitions/ClusterCreateMutable"

  ClusterCreateArgs:
    type: object
    allOf:
      - $ref: "#/definitions/ClusterCreateOnce"
      - $ref: "#/definitions/ClusterCreateMutable"

  ClusterCreateOnce:
    type: object
    properties:
      accountId:
        $ref: "#/definitions/objId"
      cspDomainId:
        $ref: "#/definitions/objIdMutable"
      clusterType:
        type: string
        description: The kind of cluster software. e.g. Kubernetes

  ClusterCreateMutable:
    type: object
    properties:
      name:
        $ref: "#/definitions/objName"
      description:
        $ref: "#/definitions/objDescription"
      authorizedAccounts:
        type: array
        description: |
          A list of Account object IDs that may use the Cluster.
        items:
          $ref: "#/definitions/objIdMutable"
      tags:
        $ref: "#/definitions/objTags"
      clusterAttributes:
        type: object
        description: |
          Cluster specific properties specified in a map.
        additionalProperties:
          $ref: "#/definitions/valueType"
      clusterIdentifier:
        type: string
        description: |
          The unique identifier of the cluster in the CSPDomain.
          Only an internal user is permitted to set this property.
      state:
        type: string
        description: |
          Specifies the state of the Cluster object.
          Only an internal user is permitted to set the state.
      messages:
        type: array
        description: |
          Recent messages relating to Cluster state changes.
        items:
          $ref: "#/definitions/timestampedString"

  ConsistencyGroup:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
      - $ref: "#/definitions/ConsistencyGroupCreateOnce"
      - $ref: "#/definitions/ConsistencyGroupMutable"

  ConsistencyGroupCreateOnce:
    type: object
    properties:
      accountId:
        $ref: "#/definitions/objIdMutable"
      tenantAccountId:
        $ref: "#/definitions/objIdMutable"

  ConsistencyGroupMutable:
    type: object
    properties:
      name:
        $ref: "#/definitions/objName"
      description:
        $ref: "#/definitions/objDescription"
      tags:
        $ref: "#/definitions/objTags"
      systemTags:
        $ref: "#/definitions/objTags"
      applicationGroupIds:
        type: array
        description: |
          A list of the IDs of ApplicationGroup objects associated with this ConsistencyGroup.
        items:
          $ref: "#/definitions/objIdMutable"
      snapshotManagementPolicy:
        $ref: "#/definitions/snapshotManagementPolicy"

  CrudEvent:
    type: object
    properties:
      timestamp:
        type: string
        format: date-time
        description: The time of the event.
      ordinal:
        type: integer
        format: int64
        description: A unique ordinal number.
      method:
        type: string
        description: |
          The name of the HTTP method used. (i.e. *POST*, *DELETE* or *PATCH*)
      trimmedURI:
        type: string
        description: |
          The request URI with the base path prefix removed. For example:
          | Request URI | Trimmed Request URI |
          |-------------|---------------------|
          | /api/v1/accounts/*ObjectId*?set=name | /accounts/*ObjectId*?set=name |
      scope:
        type: object
        description: |
          Map of contextual properties. The content depends on the object and method, and could be empty.
        additionalProperties:
          type: string

  CrudMatcher:
    type: object
    description: A set of patterns to match against CrudEvents. At least one pattern property must be specified.
    properties:
      methodPattern:
        type: string
        description: A regular expression to match method names, if not empty.
      uriPattern:
        type: string
        description: A regular expression to match the trimmedURI, if not empty.
      scopePattern:
        type: string
        description: A regular expression to match the scope properties, if not empty.

  CrudWatcherCreateArgs:
    type: object
    properties:
      name:
        type: string
        description: Name of the CrudEvent Watcher. Optional and doesn't have to be unique.
      matchers:
        type: array
        description: An array of matchers. If empty every event is returned.
        items:
          $ref: "#/definitions/CrudMatcher"

  CSPCredential:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
          cspDomainType:
            $ref: "#/definitions/cspDomainTypeMutable"
          accountId:
            $ref: "#/definitions/objIdMutable"
      - $ref: "#/definitions/CSPCredentialMutable"

  CSPCredentialMutable:
    type: object
    properties:
      name:
        $ref: "#/definitions/objName"
      description:
        $ref: "#/definitions/objDescription"
      tags:
        $ref: "#/definitions/objTags"
      credentialAttributes:
        type: object
        description: |
          Cloud Service Provider vendor specific credential properties specified in a map.
        additionalProperties:
          $ref: "#/definitions/valueType"

  CSPCredentialMetadata:
    type: object
    description: |
      Meta-data on a cloud service provider credential objects.
    properties:
      attributeMetadata:
        type: object
        description: |
          A map with names and descriptions of attributes that can be set in the *credentialAttributes* property of a
          CSPCredential object of this type.
        additionalProperties:
          $ref: "#/definitions/attributeDescriptor"

  CSPDomain:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
          cspDomainType:
            $ref: "#/definitions/cspDomainTypeMutable"
          accountId:
            $ref: "#/definitions/objIdMutable"
          cspDomainAttributes:
            type: object
            description: |
              CSPDomain vendor specific properties specified in a map.

              **Note**: The *credentialAttributes* of the associated [CSPCredential](#tag/cspCredential) object
              are copied into this map when the object is accessed by the internal user.
              **Internal subsystems should not cache this object in case domain attributes are changed externally.**
            additionalProperties:
              $ref: "#/definitions/valueType"
      - $ref: "#/definitions/CSPDomainMutable"

  CSPDomainMutable:
    type: object
    properties:
      name:
        $ref: "#/definitions/objName"
      description:
        $ref: "#/definitions/objDescription"
      cspCredentialId:
        $ref: "#/definitions/objIdMutable"
      managementHost:
        type: string
        description: |
          A persistent, fully qualified domain name or an IPv4 address of the Nuvoloso management service
          that is reachable from hosts within the CSP domain.  This name is used in the Kubernetes
          YAML configuration that configures the Nuvoloso software in a cluster in the CSP domain.
      authorizedAccounts:
        type: array
        description: |
          A list of Account object IDs that may use the Domain.
        items:
          $ref: "#/definitions/objIdMutable"
      tags:
        $ref: "#/definitions/objTags"
      clusterUsagePolicy:
        $ref: "#/definitions/clusterUsagePolicy"
      storageCosts:
        type: object
        description: |
          The cost of storage for this CSP domain maintained in a map keyed
          on the storage types available from this CSP vendor.
        additionalProperties:
          $ref: "#/definitions/storageCost"

  CSPDomainMetadata:
    type: object
    description: |
      Meta-data on a cloud service provider domain object.
    properties:
      attributeMetadata:
        type: object
        description: |
          A map with names and descriptions of attributes that can be set in the *cspDomainAttributes* property
          of a CSPDomain object of this type.
        additionalProperties:
          $ref: "#/definitions/attributeDescriptor"

  CSPStorageType:
    type: object
    properties:
      name:
        $ref: "#/definitions/cspStorageType"
      description:
        $ref: "#/definitions/objDescription"
      cspDomainType:
        $ref: "#/definitions/cspDomainType"
      sscList:
        $ref: "#/definitions/sscList"
      minAllocationSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The minimum size that may be allocated to a Storage object.
      maxAllocationSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The maximum size that may be allocated to a Storage object.
      preferredAllocationSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The preferred size that should be allocated for a Storage object.
      preferredAllocationUnitSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The preferred unit size that should be allocated for a Storage object.
      provisioningUnit:
        $ref: "#/definitions/provisioningUnit"
      parcelSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The parcel size for a Storage object.
      accessibilityScope:
        $ref: "#/definitions/storageAccessibilityScopeType"
      cspStorageTypeAttributes:
        type: object
        description: |
          CSPDomain vendor specific properties specified in a map.
        additionalProperties:
          $ref: "#/definitions/valueType"
      deviceType:
        type: string
        description: |
          The device type associated with a Storage object. Possible values are:
          | Type       | Description |
          |------------|-------------|
          | HDD        | The device is a HDD |
          | SSD        | The device is an SSD |

  Node:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
          accountId:
            $ref: "#/definitions/objIdMutable"
          clusterId:
            $ref: "#/definitions/objIdMutable"
          nodeIdentifier:
            type: string
            description: The unique identifier of the node in the CSP domain.
      - $ref: "#/definitions/NodeMutable"

  NodeMutable:
    type: object
    properties:
      name:
        $ref: "#/definitions/objName"
      description:
        $ref: "#/definitions/objDescription"
      tags:
        $ref: "#/definitions/objTags"
      localStorage:
        type: object
        description: |
          Ephemeral, physical storage that is accessible only on the node. This storage may be used as cache
          to improve the performance of [VolumeSeries](#tag/volumeSeries) objects mounted on the node, based
          on their [ServicePlan](#tag/servicePlan). The key is a UUID used by the storage layer to identify
          the storage device.
        additionalProperties:
          $ref: "#/definitions/nodeStorageDevice"
      availableCacheBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The amount of cache that is available for allocation to [VolumeSeries](#tag/volumeSeries) objects
          mounted on this node.
          The value will automatically be adjusted during update if totalCacheBytes changes.
      cacheUnitSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The cache allocation unit size. When allocating cache to a [VolumeSeries](#tag/volumeSeries) object,
          the allocation must be in multiples of this size.
      totalCacheBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The total physical cache storage capacity that may be allocated on this node.
      nodeAttributes:
        type: object
        description: |
          Node specific properties specified in a map.
        additionalProperties:
          $ref: "#/definitions/valueType"
      service:
        $ref: "#/definitions/nuvoService"
      state:
        type: string
        description: |
          Specifies the state of the Node object.
          Only an internal user is permitted to set the state.

  Pool:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
      - $ref: "#/definitions/PoolCreateOnce"
      - $ref: "#/definitions/PoolMutable"

  PoolMutable:
    type: object
    allOf:
      - properties:
          servicePlanReservations:
            type: object
            description: |
              This is a map of ServicePlanAllocation ID to the capacity reserved in this object by the plan.
              This includes any overhead that may be required.
            additionalProperties:
              $ref: "#/definitions/storageTypeReservation"
      - $ref: "#/definitions/PoolCreateMutable"

  PoolCreateArgs:
    type: object
    allOf:
      - $ref: "#/definitions/PoolCreateOnce"
      - $ref: "#/definitions/PoolCreateMutable"

  PoolCreateOnce:
    type: object
    properties:
      accountId:
        $ref: "#/definitions/objIdMutable"
      authorizedAccountId:
        $ref: "#/definitions/objIdMutable"
      clusterId:
        $ref: "#/definitions/objIdMutable"
      cspDomainId:
        $ref: "#/definitions/objIdMutable"
      cspStorageType:
        type: string
        description: |
          The name assigned to a type of storage provided by a storage service of a Cloud Service Provider.
        minLength: 1
      storageAccessibility:
        $ref: "#/definitions/storageAccessibilityMutable"

  PoolCreateMutable:
    type: object
    properties:
      systemTags:
        $ref: "#/definitions/objTags"

  ProtectionDomain:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
      - $ref: "#/definitions/ProtectionDomainCreateOnce"
      - $ref: "#/definitions/ProtectionDomainMutable"

  ProtectionDomainCreateArgs:
    type: object
    allOf:
      - $ref: "#/definitions/ProtectionDomainCreateOnce"
      - $ref: "#/definitions/ProtectionDomainMutable"

  ProtectionDomainCreateOnce:
    type: object
    properties:
      accountId:
        $ref: "#/definitions/objIdMutable"
      encryptionAlgorithm:
        type: string
        description: The name of the encryption algorithm to use.
      encryptionPassphrase:
        $ref: "#/definitions/valueType"

  ProtectionDomainMutable:
    type: object
    properties:
      name:
        $ref: "#/definitions/objName"
      description:
        $ref: "#/definitions/objDescription"
      tags:
        $ref: "#/definitions/objTags"
      systemTags:
        $ref: "#/definitions/objTags"

  ProtectionDomainMetadata:
    type: object
    properties:
      encryptionAlgorithm:
        type: string
        description: The name of an encryption algorithm.
      description:
        type: string
        description: A description of the encryption algorithm.
      minPassphraseLength:
        type: number
        format: int32
        description: The minimum length of the pass phrase or 0 if the pass phrase is not required.

  Role:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
      - $ref: "#/definitions/RoleMutable"

  RoleMutable:
    type: object
    properties:
      name:
        $ref: "#/definitions/objName"
      capabilities:
        type: object
        description: |
          A map specifying the security [capabilities](#tag/capability) or rights enabled for users with this role.
        additionalProperties:
          type: boolean

  ServicePlan:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
          sourceServicePlanId:
            $ref: "#/definitions/objIdMutable"
          state:
            type: string
            description: |
              The state of a service plan. Possible state values are:
              | State       | Meaning |
              |-------------|---------|
              | UNPUBLISHED | The service plan can be modified by the Nuvoloso administrator |
              | PUBLISHED   | The SLOs of the service plan are immutable |
              | RETIRED     | The service plan cannot be used to provision new volumes |
          ioProfile:
            $ref: "#/definitions/ioProfile"
          volumeSeriesMinMaxSize:
            $ref: "#/definitions/volumeSeriesMinMaxSize"
          provisioningUnit:
            $ref: "#/definitions/provisioningUnit"
      - $ref: "#/definitions/ServicePlanMutable"

  ServicePlanMutable:
    type: object
    properties:
      name:
        $ref: "#/definitions/servicePlanName"
      description:
        $ref: "#/definitions/objDescription"
      tags:
        $ref: "#/definitions/objTags"
      slos:
        $ref: "#/definitions/sloListMutable"
      accounts:
        type: array
        description: |
          A list of Account object IDs that may use the ServicePlan.
        items:
          $ref: "#/definitions/objIdMutable"

  ServicePlanCloneArgs:
    type: object
    properties:
      name:
        $ref: "#/definitions/servicePlanName"

  ServicePlanAllocation:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
          cspDomainId:
            $ref: "#/definitions/objIdMutable"
      - $ref: "#/definitions/ServicePlanAllocationCreateOnce"
      - $ref: "#/definitions/ServicePlanAllocationMutable"

  ServicePlanAllocationMutable:
    type: object
    allOf:
      - properties:
          reservableCapacityBytes:
            type: integer
            format: int64
            minimum: 0
            description: |
              The amount of capacity remaining that may be reserved by [VolumeSeries](#tag/volumeSeries) objects.
              The value will automatically be adjusted during update if totalCapacityBytes changes.
              This must always be <= (totalCapacityBytes - VolumeSeries.sizeBytes) for all
              [VolumeSeries](tags/volumeSeries) objects that reference this object by their *servicePlanAllocationId* property.
          clusterDescriptor:
            $ref: "#/definitions/clusterDescriptor"
          chargedCostPerGiB:
            type: number
            format: double
            description: Charged cost per GiB.
      - $ref: "#/definitions/ServicePlanAllocationCreateMutable"

  ServicePlanAllocationCreateArgs:
    type: object
    allOf:
      - $ref: "#/definitions/ServicePlanAllocationCreateOnce"
      - $ref: "#/definitions/ServicePlanAllocationCreateMutable"

  ServicePlanAllocationCreateOnce:
    type: object
    properties:
      accountId:
        $ref: "#/definitions/objIdMutable"
      authorizedAccountId:
        $ref: "#/definitions/objIdMutable"
      clusterId:
        $ref: "#/definitions/objIdMutable"
      servicePlanId:
        $ref: "#/definitions/objIdMutable"

  ServicePlanAllocationCreateMutable:
    type: object
    properties:
      totalCapacityBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The total capacity of [VolumeSeries](tags/volumeSeries) objects with this
          [ServicePlan](#tag/servicePlan) that may be provisioned by the authorized [Account](#tag/account)
          in the specified [Cluster](#tag/cluster).
      storageReservations:
        type: object
        description: |
          This is a map of poolId to the capacity reserved by this object in the pool.
          This includes any overhead that may be required.
        additionalProperties:
          $ref: "#/definitions/storageTypeReservation"
      tags:
        $ref: "#/definitions/objTags"
      provisioningHints:
        type: object
        description: |
          Properties that influence the provisioning of capacity to [VolumeSeries](tags/volumeSeries) objects
          owned by the authorized [Account](#tag/account).
        additionalProperties:
          $ref: "#/definitions/valueType"
      reservationState:
        type: string
        description: |
          This describes the ability to reserve additional capacity. Possible values are:
          | State      | Meaning |
          |------------|---------|
          | OK         | There is capacity that may be reserved |
          | NOCAPACITY | There is no more capacity available for reservation |
          | DISABLED   | Capacity reservation has been disabled |
          | UNKNOWN    | The reservation state has not yet been computed |
      messages:
        type: array
        description: |
          Recent messages on state changes.
        items:
          $ref: "#/definitions/timestampedString"
      storageFormula:
        $ref: "#/definitions/storageFormulaName"
      systemTags:
        $ref: "#/definitions/objTags"

  SLO:
    type: object
    properties:
      name:
        $ref: "#/definitions/objName"
      description:
        $ref: "#/definitions/objDescription"
      choices:
        type: array
        description: |
          If the SLO is an enumerated data type this array will contain the possible values.
        items:
            $ref: "#/definitions/restrictedValueType"

  Snapshot:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
          accountId:
            $ref: "#/definitions/objId"
          consistencyGroupId:
            $ref: "#/definitions/objId"
          pitIdentifier:
            type: string
            description: The UUID of the point-in-time.
          protectionDomainId:
            $ref: "#/definitions/objIdMutable"
          sizeBytes:
            description: The size of the [VolumeSeries](#tag/volumeSeries) object when the PiT was established.
            type: integer
            format: int64
            minimum: 0
            readOnly: true
          snapIdentifier:
            type: string
            description: |
              An identifier for the snapshot. It is either the identifier of the
              consistency group snapshot request or the volume snapshot request if the
              snapshot was not made via the consistency group.
          snapTime:
            type: string
            format: date-time
            description: The time at which the point-in-time was created.
          tenantAccountId:
            $ref: "#/definitions/objId"
          volumeSeriesId:
            $ref: "#/definitions/objIdMutable"
      - $ref: "#/definitions/SnapshotMutable"

  SnapshotMutable:
    type: object
    properties:
      deleteAfterTime:
        type: string
        format: date-time
        description: The time after which the snapshot can be purged.
      locations:
        type: object
        description: |
          A map of CSPDomainID to SnapshotLocation.
        additionalProperties:
          $ref: "#/definitions/snapshotLocation"
      messages:
        type: array
        description: |
          Recent messages involving this object.
        items:
          $ref: "#/definitions/timestampedString"
      systemTags:
        $ref: "#/definitions/objTags"
      tags:
        $ref: "#/definitions/objTags"

  Storage:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
          accountId:
            $ref: "#/definitions/objId"
          tenantAccountId:
            $ref: "#/definitions/objId"
          poolId:
            $ref: "#/definitions/objIdMutable"
          clusterId:
            $ref: "#/definitions/objId"
          cspDomainId:
            $ref: "#/definitions/objId"
          cspStorageType:
            $ref: "#/definitions/cspStorageType"
          sizeBytes:
            type: integer
            format: int64
            minimum: 0
            description: The size of the physical storage in bytes.
          storageAccessibility:
            $ref: "#/definitions/storageAccessibility"
      - $ref: "#/definitions/StorageMutable"

  StorageMutable:
    type: object
    properties:
      storageIdentifier:
        type: string
        description: |
          The unique identifier of the Storage object in the CSPDomain that provisioned the physical storage.
          The storageIdentifier must be set when the provisionedState is PROVISIONED or UNPROVISIONING.
      shareableStorage:
        type: boolean
        description: |
          If **true** the storage capacity may be utilized by multiple [VolumeSeries](#tag/volumeSeries) objects.
          If **false** capacity should not be assigned to any [VolumeSeries](#tag/volumeSeries) object
          other than the one that currently uses it.
      storageState:
        $ref: "#/definitions/storageStateMutable"
      availableBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The amount of free space in this Storage object.
          This must always be <= (sizeBytes - Sum(ParcelAllocation.sizeBytes)) for all related ParcelAllocation objects.
      parcelSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The parcel size for this Storage object. The parcel size is set while the storageState.deviceState is
          FORMATTING and remains fixed until the device is re-formatted. When allocating parcels to a VolumeSeries object,
          the allocation must be in multiples of the parcel size.
      totalParcelCount:
        type: integer
        format: int64
        minimum: 0
        description: |
          The total number of parcels in the Storage object after formatting. The value is valid only when the
          *mediaState* is *FORMATTED*.
      systemTags:
        $ref: "#/definitions/objTags"

  StorageFormula:
    type: object
    properties:
      name:
        $ref: "#/definitions/storageFormulaName"
      description:
        $ref: "#/definitions/objDescription"
      ioProfile:
        $ref: "#/definitions/ioProfile"
      sscList:
        $ref: "#/definitions/sscListMutable"
      storageComponent:
        type: object
        description: |
          A map defining the use of different CSPStorageTypes in the formula.
        additionalProperties:
          $ref: "#/definitions/storageFormulaTypeElement"
      cacheComponent:
        type: object
        description: |
          A map defining the use of different CSPStorageTypes for the cache.
        additionalProperties:
          $ref: "#/definitions/storageFormulaTypeElement"
      storageLayout:
        $ref: "#/definitions/storageLayout"
      cspDomainType:
        $ref: "#/definitions/cspDomainType"

  StorageRequest:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
      - $ref: "#/definitions/StorageRequestCreateOnce"
      - $ref: "#/definitions/StorageRequestMutable"

  StorageRequestMutable:
    type: object
    allOf:
      - properties:
          storageRequestState:
            type: string
            description: |
              The state of the provisioning request.  Possible values could be:
                | State Label   | Description |
                |---------------|-------------|
                | NEW           | Initial state |
                | CAPACITY_WAIT | Waiting for a suitable pool to have a capacity. |
                | PROVISIONING  | Obtaining storage from a selected pool |
                | ATTACHING     | Attaching the storage to the specified [Node](#tag/node) |
                | FORMATTING    | Formatting the storage on the specified [Node](#tag/node) |
                | USING         | Using the storage on the specified [Node](#tag/node) |
                | CLOSING       | Closing the storage on the specified [Node](#tag/node) |
                | DETACHING     | Detaching storage |
                | REATTACHING   | Initiating attachment of the storage on the *reattachNodeId* [Node](#tag/node) |
                | RELEASING     | Releasing storage |
                | REMOVING_TAG  | Remove tag from the CSP volume |
                | UNDO_PROVISIONING | A PROVISION operation is being undone |
                | UNDO_ATTACHING | An ATTACH operation is being undone |
                | UNDO_DETACHING | A DETACH operation is being undone |
                | SUCCEEDED     | All operations completed successfully |
                | FAILED        | Operations failed to complete within the deadline |
          requestMessages:
            type: array
            description: |
              Activity record.
            items:
              $ref: "#/definitions/timestampedString"
      - $ref: "#/definitions/StorageRequestCreateMutable"

  StorageRequestCreateArgs:
    type: object
    allOf:
      - $ref: "#/definitions/StorageRequestCreateOnce"
      - $ref: "#/definitions/StorageRequestCreateMutable"

  StorageRequestCreateOnce:
    type: object
    properties:
      requestedOperations:
        type: array
        minItems: 1
        uniqueItems: true
        items:
          type: string
          enum:
            - ATTACH
            - CLOSE
            - DETACH
            - FORMAT
            - PROVISION
            - REATTACH
            - RELEASE
            - USE
      cspStorageType:
        type: string
        description: |
          The name assigned to a type of storage provided by a storage service of a Cloud Service Provider.
        readOnly: true
      accountId:
        $ref: "#/definitions/objId"
      tenantAccountId:
        $ref: "#/definitions/objId"
      cspDomainId:
        $ref: "#/definitions/objId"
      clusterId:
        $ref: "#/definitions/objId"
      poolId:
        $ref: "#/definitions/objIdMutable"
      minSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The minimum capacity of storage requested.  It should be less than the maximum allocation size
          of the specified cspStorageType.
      parcelSizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The size of the device parcel to use when formatting the storage media.
      reattachNodeId:
        $ref: "#/definitions/objIdMutable"
      shareableStorage:
        type: boolean
        description: |
          The initial value of the property of the same name in the new [Storage](#tag/storage) object.
      completeByTime:
        type: string
        format: date-time
        description: |
          The time by which the request should be processed.
    required:
      - requestedOperations

  StorageRequestCreateMutable:
    type: object
    properties:
      nodeId:
        $ref: "#/definitions/objIdMutable"
      storageId:
        $ref: "#/definitions/objIdMutable"
      systemTags:
        $ref: "#/definitions/objTags"
      volumeSeriesRequestClaims:
        $ref: "#/definitions/vsrClaim"

  System:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
          service:
            $ref: "#/definitions/nuvoService"
      - $ref: "#/definitions/SystemMutable"

  SystemMutable:
    type: object
    properties:
      name:
        $ref: "#/definitions/objName"
      description:
        $ref: "#/definitions/objDescription"
      clusterUsagePolicy:
        $ref: "#/definitions/clusterUsagePolicy"
      snapshotCatalogPolicy:
        $ref: "#/definitions/snapshotCatalogPolicy"
      snapshotManagementPolicy:
        $ref: "#/definitions/snapshotManagementPolicy"
      userPasswordPolicy:
        type: object
        description: |
          This contains policy related properties that influence the values accepted in the *password* field of the [User](#tag/User) object.
        properties:
          minLength:
            type: integer
            format: int32
            minimum: 1
            description: |
              The minimum length of a password. The length is enforced when a *password* is set or updated.
      vsrManagementPolicy:
        $ref: "#/definitions/vsrManagementPolicy"
      systemTags:
        $ref: "#/definitions/objTags"
      managementHostCName:
        type: string
        description: The management host DNS CName.

  Task:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
          cancelRequested:
            type: boolean
            description: The task has been requested to cancel itself.
          messages:
            type: array
            description: |
              Messages generated by the Task.
            items:
              $ref: "#/definitions/timestampedString"
          progress:
            $ref: "#/definitions/progress"
          state:
            type: string
            description: |
              The state of the Task. Possible values are
              | State     | Description |
              |-----------|-------------|
              | NEW       | The Task has not yet been started |
              | ACTIVE    | The Task is being executed |
              | CANCELED  | The Task has been canceled |
              | FAILED    | The Task has completed unsuccessfully |
              | SUCCEEDED | The Task has completed successfully |
              | WAITING   | The Task is paused waiting for an external resource to become available |
      - $ref: "#/definitions/TaskCreateOnce"

  TaskCreateOnce:
    type: object
    properties:
      operation:
        type: string
        description: The type of work performed by the Task.
      objectId:
        $ref: "#/definitions/objIdMutable"
      serviceStates:
        type: object
        description: |
          This is a map keyed on object identifier describing the state of a service.
        additionalProperties:
          $ref: "#/definitions/serviceState"

  User:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
          accountRoles:
            type: array
            description: |
              A synthesized array of the current accounts and roles for which this user is authorized.
              Disabled accounts or roles are not included.
            items:
              $ref: "#/definitions/userAccountRole"
            readOnly: true
      - $ref: "#/definitions/UserMutable"

  UserMutable:
    type: object
    properties:
      authIdentifier:
        type: string
        description: The unique identifier of the user, used by the Authentication Service.
      disabled:
        type: boolean
        description: |
          The user is disabled if true.
      password:
        type: string
        minLength: 1
        description: |
          The string of characters used by the Authentication Service to authenticate the user.
          The value is not used when an external authentication provider is used to authenticate the user (TBD).
          The actual value is never returned by the REST API, but a value is accepted on the
          [userCreate](#operation/userCreate) and [userUpdate](#operation/userUpdate). Leading and trailing whitespace is stripped, and
          the remaining value must meet the requirements specified in the *userPasswordPolicy* of the [System](#tag/system) object.
      profile:
        type: object
        description: |
          Properties related to personal data associated with the user, including GUI preferences.

          The following profile property names are well-known:

          | property | Kind | Required | Description |
          |--------------------|------|----------|-------------|
          | userName | STRING | no | The user's display name |
        additionalProperties:
          $ref: "#/definitions/valueType"

  VolumeSeries:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
          rootParcelUUID:
            type: string
            readOnly: true
            description: |
              The UUID to be assigned to the root parcel of the VolumeSeries during provisioning.
              This property is internally set on object creation.
      - $ref: "#/definitions/VolumeSeriesCreateOnce"
      - $ref: "#/definitions/VolumeSeriesMutable"

  VolumeSeriesMutable:
    type: object
    allOf:
      - properties:
          nuvoVolumeIdentifier:
            type: string
            description: |
              The UUID of the underlying Nuvoloso volume.
              This will be re-generated every time before the Nuvoloso volume is (re-)created
              along with the rootStorageId property.
          rootStorageId:
            $ref: "#/definitions/objIdMutable"
          boundClusterId:
            $ref: "#/definitions/objIdMutable"
          boundCspDomainId:
            $ref: "#/definitions/objIdMutable"
          configuredNodeId:
            $ref: "#/definitions/objIdMutable"
          servicePlanAllocationId:
            $ref: "#/definitions/objIdMutable"
          mounts:
            type: array
            description: |
              A list of mount objects. Each entry in the list represents a location where the
              VolumeSeries head or a snapshot is mounted.
            items:
              $ref: "#/definitions/mount"
          cacheAllocations:
            type: object
            description: |
              This is a map of nodeId to cache allocation in bytes.
            additionalProperties:
              $ref: "#/definitions/cacheAllocation"
          capacityAllocations:
            type: object
            description: |
              This is a map of poolId to capacity allocation data
            additionalProperties:
              $ref: "#/definitions/capacityAllocation"
          storageParcels:
            type: object
            description: |
              This is a map of storageId to parcel related data
            additionalProperties:
              $ref: "#/definitions/parcelAllocation"
          volumeSeriesState:
            type: string
            description: |
              The state of a VolumeSeries object. Possible values are:
              | State    | Meaning |
              |----------|---------|
              | UNBOUND      | Initial state |
              | BOUND        | The volume series is bound to a cluster but is not mounted nor in use in other ways |
              | PROVISIONED  | The volume series has been provisioned with storage in a cluster |
              | CONFIGURED   | The volume series is configured on a node but is not in use |
              | IN_USE       | The volume series head or a snapshot is being used (mounting, mounted, taking a snapshot, etc) |
              | DELETING     | The volume series is being deleted |
          messages:
            type: array
            description: |
              Recent messages reporting changes to the VolumeSeries.
            items:
              $ref: "#/definitions/timestampedString"
      - $ref: "#/definitions/VolumeSeriesCreateMutable"

  VolumeSeriesCreateArgs:
    type: object
    allOf:
      - $ref: "#/definitions/VolumeSeriesCreateOnce"
      - $ref: "#/definitions/VolumeSeriesCreateMutable"

  VolumeSeriesCreateOnce:
    type: object
    properties:
      accountId:
        $ref: "#/definitions/objIdMutable"
      tenantAccountId:
        $ref: "#/definitions/objIdMutable"

  VolumeSeriesCreateMutable:
    type: object
    properties:
      name:
        $ref: "#/definitions/objName"
      description:
        $ref: "#/definitions/objDescription"
      consistencyGroupId:
        $ref: "#/definitions/objIdMutable"
      servicePlanId:
        $ref: "#/definitions/objIdMutable"
      sizeBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          The size of the logical address space of the volume.
          This quantity is reserved in the [ServicePlanAllocation](#tag/servicePlanAllocation) object associated with this volume.
      spaAdditionalBytes:
        type: integer
        format: int64
        minimum: 0
        description: |
          Additional capacity beyond *sizeBytes* that is reserved in the [ServicePlanAllocation](#tag/servicePlanAllocation) object associated with this volume.
          It does not affect the size of the logical address space of the volume but will affect the
          [ServicePlan](#tag/servicePlan) IO violation calculations.
      tags:
        $ref: "#/definitions/objTags"
      systemTags:
        $ref: "#/definitions/objTags"
      lifecycleManagementData:
        $ref: "#/definitions/lifecycleManagementData"
      clusterDescriptor:
        $ref: "#/definitions/clusterDescriptor"

  VolumeSeriesRequest:
    type: object
    allOf:
      - properties:
          meta:
            $ref: "#/definitions/objMeta"
          cancelRequested:
            type: boolean
            description: |
              When true, the [volumeSeriesRequestCancel](#operation/volumeSeriesRequestCancel) was called successfully.
              The request animator detects when this property is true and cancels the request, if possible.
      - $ref: "#/definitions/VolumeSeriesRequestCreateOnce"
      - $ref: "#/definitions/VolumeSeriesRequestMutable"

  VolumeSeriesRequestCreateArgs:
    type: object
    allOf:
      - $ref: "#/definitions/VolumeSeriesRequestCreateOnce"
      - $ref: "#/definitions/VolumeSeriesRequestCreateMutable"

  VolumeSeriesRequestCreateOnce:
    type: object
    properties:
      requestedOperations:
        type: array
        minItems: 1
        uniqueItems: true
        items:
          type: string
          enum:
          - ALLOCATE_CAPACITY
          - ATTACH_FS
          - BIND
          - CG_SNAPSHOT_CREATE
          - CHANGE_CAPACITY
          - CONFIGURE
          - CREATE
          - CREATE_FROM_SNAPSHOT
          - DELETE
          - DELETE_SPA
          - DETACH_FS
          - MOUNT
          - NODE_DELETE
          - PUBLISH
          - RENAME
          - UNBIND
          - UNMOUNT
          - UNPUBLISH
          - VOL_DETACH
          - VOL_SNAPSHOT_CREATE
          - VOL_SNAPSHOT_RESTORE
      applicationGroupIds:
        type: array
        description: |
          A list of ApplicationGroup object IDs to which the ConsistencyGroup belongs.
        items:
          $ref: "#/definitions/objIdMutable"
      clusterId:
        $ref: "#/definitions/objIdMutable"
      protectionDomainId:
        $ref: "#/definitions/objIdMutable"
      snapshotID:
        $ref: "#/definitions/objIdMutable"
      snapIdentifier:
        type: string
        description: |
          The identifier for the snapshot to be mounted or unmounted.
      volumeSeriesCreateSpec:
        $ref: "#/definitions/VolumeSeriesCreateArgs"
      servicePlanAllocationCreateSpec:
        $ref: "#/definitions/ServicePlanAllocationCreateArgs"
      planOnly:
        type: boolean
        description: |
          If set to *true* the request will plan operations but not actually implement them.
          In particular, no [Storage](#tag/storage) will be reserved from [Pool](#tag/pool) objects
          nor will any format or volume operation be performed.  The [VolumeSeries](#tag/volumeSeries) object
          will not be modified (including no state change).

          Some states may be skipped if the request is in planning mode.
        default: false
      creator:
        $ref: "#/definitions/identity"
      completeByTime:
        type: string
        format: date-time
        description: |
          The time by which the request should be processed.
      syncCoordinatorId:
          $ref: "#/definitions/objIdMutable"
      fsType:
        type: string
        description: |
          The file system type.
      driverType:
        type: string
        description: |
          The volume driver type.
      targetPath:
        type: string
        description: |
          A host specific filesystem pathname.
      readOnly:
        type: boolean
        description: |
          Indicates that the volume is to be attached for read-only access.
    required:
      - requestedOperations

  VolumeSeriesRequestCreateMutable:
    type: object
    properties:
      consistencyGroupId:
        $ref: "#/definitions/objIdMutable"
      nodeId:
        $ref: "#/definitions/objIdMutable"
      servicePlanAllocationId:
        $ref: "#/definitions/objIdMutable"
      snapshot:
        $ref: "#/definitions/snapshotData"
      volumeSeriesId:
        $ref: "#/definitions/objIdMutable"
      systemTags:
        $ref: "#/definitions/objTags"

  VolumeSeriesRequestMutable:
    type: object
    allOf:
      - properties:
          volumeSeriesRequestState:
            type: string
            description: |
              The state of the volume series request. Possible values could be:
              | State Label               | Description |
              |---------------------------|-------------|
              | ALLOCATING_CAPACITY       | An ALLOCATE_CAPACITY operation is being performed |
              | ATTACHING_FS              | An ATTACH_FS operation is being performed |
              | BINDING                   | This is the state in which the [VolumeSeries](#tag/volumeSeries) is bound to a [Cluster](#tag/cluster) |
              | CANCELED                  | The operation was canceled |
              | CANCELING_REQUESTS        | Canceling operations |
              | CAPACITY_WAIT             | BINDING or CHANGING_CAPACITY is waiting for [Pool](#tag/pool) capacity to become available |
              | CG_SNAPSHOT_FINALIZE      | This is the state in which post-processing for the [ConsistencyGroup](#tag/consistencyGroup) snapshot is done |
              | CG_SNAPSHOT_VOLUMES       | This is the state in which a consistency group creates coordinated snapshots of member [VolumeSeries](#tag/volumeSeries) objects |
              | CG_SNAPSHOT_WAIT          | This is the state in which the VSR waits for [VolumeSeries](#tag/volumeSeries) snapshots to complete |
              | CHANGING_CAPACITY         | A CHANGE_CAPACITY operation is being performed |
              | CHOOSING_NODE             | A healthy node is chosen for subsequent states requiring a node to which physical storage can be attached |
              | CREATED_PIT               | A point-in-time position in the volume has been created. I/O has not been resumed |
              | CREATING                  | A new [VolumeSeries](#tag/volumeSeries) object is being created |
              | CREATING_FROM_SNAPSHOT    | A new [VolumeSeries](#tag/volumeSeries) object is being created from a snapshot |
              | CREATING_PIT              | An attempt will be made to create a point-in-time position in the volume |
              | DELETING_NODE             | Deleting a [Node](#tag/node) object |
              | DELETING_SPA              | A DELETE_SPA operation is being performed |
              | DETACHING_STORAGE         | Launching operations to clean up [Storage](#tag/storage) on a failed [Node](#tag/node) |
              | DETACHING_VOLUMES         | Launching operations to clean up [VolumeSeries](#tag/volumeSeries) on a failed [Node](#tag/node) |
              | DRAINING_REQUESTS         | Waiting for operations to complete |
              | FAILED                    | Operations failed to complete within the deadline |
              | FINALIZING_SNAPSHOT       | Older point-in-time positions are being deleted and the snapshot finalized |
              | NEW                       | Initial state |
              | PAUSED_IO                 | Application I/O has been paused on the volume HEAD |
              | PAUSING_IO                | Application I/O will be paused on the volume HEAD |
              | PLACEMENT                 | Obtaining [Storage](#tag/storage) parcels from the selected pools on the appropriate nodes, acquiring and/or attaching [Storage](#tag/storage) as necessary |
              | PLACEMENT_REATTACH        | Reattaching previously allocated [Storage](#tag/storage) as necessary (no undo path) |
              | PUBLISHING                | A [VolumeSeries](#tag/volumeSeries) object is being exposed in a [Cluster](#tag/cluster) |
              | PUBLISHING_SERVICE_PLAN   | A [ServicePlan](#tag/servicePlan) is being exposed in a [Cluster](#tag/cluster) |
              | REALLOCATING_CACHE        | The amount of cache allocated to the [VolumeSeries](#tag/volumeSeries) is being changed on the node where it is mounted |
              | RENAMING                  | The [VolumeSeries](#tag/volumeSeries), its [ConsistencyGroup](#tag/consistencyGroup) and [ApplicationGroup](#tag/applicationGroup) are being renamed |
              | RESIZING_CACHE            | The new amount of cache to be allocated to the [VolumeSeries](#tag/volumeSeries) is being determined |
              | SIZING                    | The initial physical size is being determined |
              | SNAPSHOT_RESTORE          | A snapshot is being restored |
              | SNAPSHOT_RESTORE_DONE     | Snapshot restoration has completed |
              | SNAPSHOT_RESTORE_FINALIZE | Snapshot restoration related metadata is being updated |
              | SNAPSHOT_UPLOADING        | I/O has been resumed and snapshot upload will take place |
              | SNAPSHOT_UPLOAD_DONE      | Snapshot upload has completed |
              | STORAGE_WAIT              | The VSR is waiting for [Storage](#tag/storage) operations to complete |
              | SUCCEEDED                 | All operations completed successfully |
              | UNDO_ALLOCATING_CAPACITY  | An ALLOCATE_CAPACITY operation is being discarded |
              | UNDO_ATTACHING_FS         | An ATTACH_FS operation is being discarded or a DETACH_FS operation is in progress |
              | UNDO_BINDING              | The [VolumeSeries](#tag/volumeSeries) is being unbound from the [Cluster](#tag/cluster) |
              | UNDO_CG_SNAPSHOT_VOLUMES  | Discard CG_SNAPSHOT_VOLUMES actions |
              | UNDO_CHANGING_CAPACITY    | A CHANGE_CAPACITY operation is being discarded |
              | UNDO_CREATED_PIT          | Discard CREATED_PIT and earlier actions |
              | UNDO_CREATING             | The [VolumeSeries](#tag/volumeSeries) object is being deleted |
              | UNDO_CREATING_FROM_SNAPSHOT | The [VolumeSeries](#tag/volumeSeries) object is being deleted |
              | UNDO_CREATING_PIT         | Discard CREATING_PIT and earlier actions |
              | UNDO_PAUSED_IO            | Discard PAUSED_IO and earlier actions |
              | UNDO_PAUSING_IO           | Discard PAUSING_IO actions |
              | UNDO_PLACEMENT            | Storage parcels are being released |
              | UNDO_PUBLISHING           | Discard PUBLISHING actions |
              | UNDO_REALLOCATING_CACHE   | The cache reallocation is being undone |
              | UNDO_RENAMING             | The renaming is being undone |
              | UNDO_RESIZING_CACHE       | The cache resize calculations are being discarded |
              | UNDO_SIZING               | The physical size calculations are being discarded |
              | UNDO_SNAPSHOT_RESTORE     | Discard SNAPSHOT_RESTORE and earlier actions  |
              | UNDO_SNAPSHOT_UPLOADING   | Discard SNAPSHOT_UPLOADING and earlier actions  |
              | UNDO_SNAPSHOT_UPLOAD_DONE | Discard SNAPSHOT_UPLOAD_DONE and earlier actions  |
              | UNDO_VOLUME_CONFIG        | The [VolumeSeries](#tag/volumeSeries) device configuration is being undone |
              | UNDO_VOLUME_EXPORT        | The [VolumeSeries](#tag/volumeSeries) device is being withdrawn from visibility |
              | VOLUME_CONFIG             | The [VolumeSeries](#tag/volumeSeries) device configuration is taking place |
              | VOLUME_DETACH_WAIT        | Waiting for references to a [Node](#tag/node) to be removed |
              | VOLUME_DETACHED           | Removed references to a [Node](#tag/node) from [VolumeSeries](#tag/volumeSeries) objects |
              | VOLUME_DETACHING          | Removing references to a [Node](#tag/node) from [VolumeSeries](#tag/volumeSeries) objects |
              | VOLUME_EXPORT             | The [VolumeSeries](#tag/volumeSeries) device is being exposed to the operating system |
          requestMessages:
            type: array
            description: |
              Activity record.
            items:
              $ref: "#/definitions/timestampedString"
          storageFormula:
            $ref: "#/definitions/storageFormulaName"
          capacityReservationPlan:
            $ref: "#/definitions/capacityReservationPlan"
          capacityReservationResult:
            $ref: "#/definitions/capacityReservationResult"
          storagePlan:
            $ref: "#/definitions/storagePlan"
          mountedNodeDevice:
            type: string
            description: |
              The OS specific name for the device through which the VolumeSeries can be accessed on a Node.
          progress:
            $ref: "#/definitions/progress"
          lifecycleManagementData:
            $ref: "#/definitions/lifecycleManagementData"
          syncPeers:
            $ref: "#/definitions/syncPeerMap"
      - $ref: "#/definitions/VolumeSeriesRequestCreateMutable"
