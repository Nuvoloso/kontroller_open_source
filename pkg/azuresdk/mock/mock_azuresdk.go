// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nuvoloso/kontroller/pkg/azuresdk (interfaces: API,CCC,SPT,GC,AC,BCC,DC,DCCreateOrUpdateFuture,DCDisksDeleteFuture,DCListIterator,DCDisksUpdateFuture,VMC,VMCreateOrUpdateFuture)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	compute "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2019-07-01/compute"
	resources "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2019-05-01/resources"
	storage "github.com/Azure/azure-sdk-for-go/services/storage/mgmt/2019-04-01/storage"
	autorest "github.com/Azure/go-autorest/autorest"
	azuresdk "github.com/Nuvoloso/kontroller/pkg/azuresdk"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// NewAccountsClient mocks base method
func (m *MockAPI) NewAccountsClient(arg0 string, arg1 autorest.Authorizer) azuresdk.AC {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAccountsClient", arg0, arg1)
	ret0, _ := ret[0].(azuresdk.AC)
	return ret0
}

// NewAccountsClient indicates an expected call of NewAccountsClient
func (mr *MockAPIMockRecorder) NewAccountsClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccountsClient", reflect.TypeOf((*MockAPI)(nil).NewAccountsClient), arg0, arg1)
}

// NewBlobContainersClient mocks base method
func (m *MockAPI) NewBlobContainersClient(arg0 string, arg1 autorest.Authorizer) azuresdk.BCC {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBlobContainersClient", arg0, arg1)
	ret0, _ := ret[0].(azuresdk.BCC)
	return ret0
}

// NewBlobContainersClient indicates an expected call of NewBlobContainersClient
func (mr *MockAPIMockRecorder) NewBlobContainersClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBlobContainersClient", reflect.TypeOf((*MockAPI)(nil).NewBlobContainersClient), arg0, arg1)
}

// NewClientCredentialsConfig mocks base method
func (m *MockAPI) NewClientCredentialsConfig(arg0, arg1, arg2 string) azuresdk.CCC {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClientCredentialsConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(azuresdk.CCC)
	return ret0
}

// NewClientCredentialsConfig indicates an expected call of NewClientCredentialsConfig
func (mr *MockAPIMockRecorder) NewClientCredentialsConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientCredentialsConfig", reflect.TypeOf((*MockAPI)(nil).NewClientCredentialsConfig), arg0, arg1, arg2)
}

// NewDisksClient mocks base method
func (m *MockAPI) NewDisksClient(arg0 string, arg1 autorest.Authorizer) azuresdk.DC {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDisksClient", arg0, arg1)
	ret0, _ := ret[0].(azuresdk.DC)
	return ret0
}

// NewDisksClient indicates an expected call of NewDisksClient
func (mr *MockAPIMockRecorder) NewDisksClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDisksClient", reflect.TypeOf((*MockAPI)(nil).NewDisksClient), arg0, arg1)
}

// NewGroupsClient mocks base method
func (m *MockAPI) NewGroupsClient(arg0 string, arg1 autorest.Authorizer) azuresdk.GC {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGroupsClient", arg0, arg1)
	ret0, _ := ret[0].(azuresdk.GC)
	return ret0
}

// NewGroupsClient indicates an expected call of NewGroupsClient
func (mr *MockAPIMockRecorder) NewGroupsClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGroupsClient", reflect.TypeOf((*MockAPI)(nil).NewGroupsClient), arg0, arg1)
}

// NewVirtualMachinesClient mocks base method
func (m *MockAPI) NewVirtualMachinesClient(arg0 string, arg1 autorest.Authorizer) azuresdk.VMC {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewVirtualMachinesClient", arg0, arg1)
	ret0, _ := ret[0].(azuresdk.VMC)
	return ret0
}

// NewVirtualMachinesClient indicates an expected call of NewVirtualMachinesClient
func (mr *MockAPIMockRecorder) NewVirtualMachinesClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewVirtualMachinesClient", reflect.TypeOf((*MockAPI)(nil).NewVirtualMachinesClient), arg0, arg1)
}

// MockCCC is a mock of CCC interface
type MockCCC struct {
	ctrl     *gomock.Controller
	recorder *MockCCCMockRecorder
}

// MockCCCMockRecorder is the mock recorder for MockCCC
type MockCCCMockRecorder struct {
	mock *MockCCC
}

// NewMockCCC creates a new mock instance
func NewMockCCC(ctrl *gomock.Controller) *MockCCC {
	mock := &MockCCC{ctrl: ctrl}
	mock.recorder = &MockCCCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCCC) EXPECT() *MockCCCMockRecorder {
	return m.recorder
}

// Authorizer mocks base method
func (m *MockCCC) Authorizer() (autorest.Authorizer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorizer")
	ret0, _ := ret[0].(autorest.Authorizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorizer indicates an expected call of Authorizer
func (mr *MockCCCMockRecorder) Authorizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorizer", reflect.TypeOf((*MockCCC)(nil).Authorizer))
}

// ServicePrincipalToken mocks base method
func (m *MockCCC) ServicePrincipalToken() (azuresdk.SPT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePrincipalToken")
	ret0, _ := ret[0].(azuresdk.SPT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePrincipalToken indicates an expected call of ServicePrincipalToken
func (mr *MockCCCMockRecorder) ServicePrincipalToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePrincipalToken", reflect.TypeOf((*MockCCC)(nil).ServicePrincipalToken))
}

// MockSPT is a mock of SPT interface
type MockSPT struct {
	ctrl     *gomock.Controller
	recorder *MockSPTMockRecorder
}

// MockSPTMockRecorder is the mock recorder for MockSPT
type MockSPTMockRecorder struct {
	mock *MockSPT
}

// NewMockSPT creates a new mock instance
func NewMockSPT(ctrl *gomock.Controller) *MockSPT {
	mock := &MockSPT{ctrl: ctrl}
	mock.recorder = &MockSPTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSPT) EXPECT() *MockSPTMockRecorder {
	return m.recorder
}

// Refresh mocks base method
func (m *MockSPT) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh
func (mr *MockSPTMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockSPT)(nil).Refresh))
}

// MockGC is a mock of GC interface
type MockGC struct {
	ctrl     *gomock.Controller
	recorder *MockGCMockRecorder
}

// MockGCMockRecorder is the mock recorder for MockGC
type MockGCMockRecorder struct {
	mock *MockGC
}

// NewMockGC creates a new mock instance
func NewMockGC(ctrl *gomock.Controller) *MockGC {
	mock := &MockGC{ctrl: ctrl}
	mock.recorder = &MockGCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGC) EXPECT() *MockGCMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockGC) Get(arg0 context.Context, arg1 string) (resources.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(resources.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockGCMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGC)(nil).Get), arg0, arg1)
}

// MockAC is a mock of AC interface
type MockAC struct {
	ctrl     *gomock.Controller
	recorder *MockACMockRecorder
}

// MockACMockRecorder is the mock recorder for MockAC
type MockACMockRecorder struct {
	mock *MockAC
}

// NewMockAC creates a new mock instance
func NewMockAC(ctrl *gomock.Controller) *MockAC {
	mock := &MockAC{ctrl: ctrl}
	mock.recorder = &MockACMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAC) EXPECT() *MockACMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockAC) Get(arg0 context.Context, arg1, arg2 string) (storage.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(storage.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockACMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAC)(nil).Get), arg0, arg1, arg2)
}

// ListKeys mocks base method
func (m *MockAC) ListKeys(arg0 context.Context, arg1, arg2 string) (storage.AccountListKeysResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", arg0, arg1, arg2)
	ret0, _ := ret[0].(storage.AccountListKeysResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys
func (mr *MockACMockRecorder) ListKeys(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockAC)(nil).ListKeys), arg0, arg1, arg2)
}

// MockBCC is a mock of BCC interface
type MockBCC struct {
	ctrl     *gomock.Controller
	recorder *MockBCCMockRecorder
}

// MockBCCMockRecorder is the mock recorder for MockBCC
type MockBCCMockRecorder struct {
	mock *MockBCC
}

// NewMockBCC creates a new mock instance
func NewMockBCC(ctrl *gomock.Controller) *MockBCC {
	mock := &MockBCC{ctrl: ctrl}
	mock.recorder = &MockBCCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBCC) EXPECT() *MockBCCMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBCC) Create(arg0 context.Context, arg1, arg2, arg3 string, arg4 storage.BlobContainer) (storage.BlobContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(storage.BlobContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockBCCMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBCC)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}

// MockDC is a mock of DC interface
type MockDC struct {
	ctrl     *gomock.Controller
	recorder *MockDCMockRecorder
}

// MockDCMockRecorder is the mock recorder for MockDC
type MockDCMockRecorder struct {
	mock *MockDC
}

// NewMockDC creates a new mock instance
func NewMockDC(ctrl *gomock.Controller) *MockDC {
	mock := &MockDC{ctrl: ctrl}
	mock.recorder = &MockDCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDC) EXPECT() *MockDCMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockDC) CreateOrUpdate(arg0 context.Context, arg1, arg2 string, arg3 compute.Disk) (azuresdk.DCCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(azuresdk.DCCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockDCMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDC)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3)
}

// Delete mocks base method
func (m *MockDC) Delete(arg0 context.Context, arg1, arg2 string) (azuresdk.DCDisksDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(azuresdk.DCDisksDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockDCMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDC)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockDC) Get(arg0 context.Context, arg1, arg2 string) (compute.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(compute.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDCMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDC)(nil).Get), arg0, arg1, arg2)
}

// ListByResourceGroupComplete mocks base method
func (m *MockDC) ListByResourceGroupComplete(arg0 context.Context, arg1 string) (azuresdk.DCListIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroupComplete", arg0, arg1)
	ret0, _ := ret[0].(azuresdk.DCListIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroupComplete indicates an expected call of ListByResourceGroupComplete
func (mr *MockDCMockRecorder) ListByResourceGroupComplete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroupComplete", reflect.TypeOf((*MockDC)(nil).ListByResourceGroupComplete), arg0, arg1)
}

// Update mocks base method
func (m *MockDC) Update(arg0 context.Context, arg1, arg2 string, arg3 compute.DiskUpdate) (azuresdk.DCDisksUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(azuresdk.DCDisksUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockDCMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDC)(nil).Update), arg0, arg1, arg2, arg3)
}

// MockDCCreateOrUpdateFuture is a mock of DCCreateOrUpdateFuture interface
type MockDCCreateOrUpdateFuture struct {
	ctrl     *gomock.Controller
	recorder *MockDCCreateOrUpdateFutureMockRecorder
}

// MockDCCreateOrUpdateFutureMockRecorder is the mock recorder for MockDCCreateOrUpdateFuture
type MockDCCreateOrUpdateFutureMockRecorder struct {
	mock *MockDCCreateOrUpdateFuture
}

// NewMockDCCreateOrUpdateFuture creates a new mock instance
func NewMockDCCreateOrUpdateFuture(ctrl *gomock.Controller) *MockDCCreateOrUpdateFuture {
	mock := &MockDCCreateOrUpdateFuture{ctrl: ctrl}
	mock.recorder = &MockDCCreateOrUpdateFutureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDCCreateOrUpdateFuture) EXPECT() *MockDCCreateOrUpdateFutureMockRecorder {
	return m.recorder
}

// Result mocks base method
func (m *MockDCCreateOrUpdateFuture) Result(arg0 azuresdk.DC) (compute.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", arg0)
	ret0, _ := ret[0].(compute.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result
func (mr *MockDCCreateOrUpdateFutureMockRecorder) Result(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockDCCreateOrUpdateFuture)(nil).Result), arg0)
}

// WaitForCompletionRef mocks base method
func (m *MockDCCreateOrUpdateFuture) WaitForCompletionRef(arg0 context.Context, arg1 azuresdk.DC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCompletionRef", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCompletionRef indicates an expected call of WaitForCompletionRef
func (mr *MockDCCreateOrUpdateFutureMockRecorder) WaitForCompletionRef(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCompletionRef", reflect.TypeOf((*MockDCCreateOrUpdateFuture)(nil).WaitForCompletionRef), arg0, arg1)
}

// MockDCDisksDeleteFuture is a mock of DCDisksDeleteFuture interface
type MockDCDisksDeleteFuture struct {
	ctrl     *gomock.Controller
	recorder *MockDCDisksDeleteFutureMockRecorder
}

// MockDCDisksDeleteFutureMockRecorder is the mock recorder for MockDCDisksDeleteFuture
type MockDCDisksDeleteFutureMockRecorder struct {
	mock *MockDCDisksDeleteFuture
}

// NewMockDCDisksDeleteFuture creates a new mock instance
func NewMockDCDisksDeleteFuture(ctrl *gomock.Controller) *MockDCDisksDeleteFuture {
	mock := &MockDCDisksDeleteFuture{ctrl: ctrl}
	mock.recorder = &MockDCDisksDeleteFutureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDCDisksDeleteFuture) EXPECT() *MockDCDisksDeleteFutureMockRecorder {
	return m.recorder
}

// Result mocks base method
func (m *MockDCDisksDeleteFuture) Result(arg0 azuresdk.DC) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", arg0)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result
func (mr *MockDCDisksDeleteFutureMockRecorder) Result(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockDCDisksDeleteFuture)(nil).Result), arg0)
}

// WaitForCompletionRef mocks base method
func (m *MockDCDisksDeleteFuture) WaitForCompletionRef(arg0 context.Context, arg1 azuresdk.DC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCompletionRef", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCompletionRef indicates an expected call of WaitForCompletionRef
func (mr *MockDCDisksDeleteFutureMockRecorder) WaitForCompletionRef(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCompletionRef", reflect.TypeOf((*MockDCDisksDeleteFuture)(nil).WaitForCompletionRef), arg0, arg1)
}

// MockDCListIterator is a mock of DCListIterator interface
type MockDCListIterator struct {
	ctrl     *gomock.Controller
	recorder *MockDCListIteratorMockRecorder
}

// MockDCListIteratorMockRecorder is the mock recorder for MockDCListIterator
type MockDCListIteratorMockRecorder struct {
	mock *MockDCListIterator
}

// NewMockDCListIterator creates a new mock instance
func NewMockDCListIterator(ctrl *gomock.Controller) *MockDCListIterator {
	mock := &MockDCListIterator{ctrl: ctrl}
	mock.recorder = &MockDCListIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDCListIterator) EXPECT() *MockDCListIteratorMockRecorder {
	return m.recorder
}

// NextWithContext mocks base method
func (m *MockDCListIterator) NextWithContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextWithContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NextWithContext indicates an expected call of NextWithContext
func (mr *MockDCListIteratorMockRecorder) NextWithContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextWithContext", reflect.TypeOf((*MockDCListIterator)(nil).NextWithContext), arg0)
}

// NotDone mocks base method
func (m *MockDCListIterator) NotDone() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotDone")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NotDone indicates an expected call of NotDone
func (mr *MockDCListIteratorMockRecorder) NotDone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotDone", reflect.TypeOf((*MockDCListIterator)(nil).NotDone))
}

// Value mocks base method
func (m *MockDCListIterator) Value() compute.Disk {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(compute.Disk)
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockDCListIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockDCListIterator)(nil).Value))
}

// MockDCDisksUpdateFuture is a mock of DCDisksUpdateFuture interface
type MockDCDisksUpdateFuture struct {
	ctrl     *gomock.Controller
	recorder *MockDCDisksUpdateFutureMockRecorder
}

// MockDCDisksUpdateFutureMockRecorder is the mock recorder for MockDCDisksUpdateFuture
type MockDCDisksUpdateFutureMockRecorder struct {
	mock *MockDCDisksUpdateFuture
}

// NewMockDCDisksUpdateFuture creates a new mock instance
func NewMockDCDisksUpdateFuture(ctrl *gomock.Controller) *MockDCDisksUpdateFuture {
	mock := &MockDCDisksUpdateFuture{ctrl: ctrl}
	mock.recorder = &MockDCDisksUpdateFutureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDCDisksUpdateFuture) EXPECT() *MockDCDisksUpdateFutureMockRecorder {
	return m.recorder
}

// Result mocks base method
func (m *MockDCDisksUpdateFuture) Result(arg0 azuresdk.DC) (compute.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", arg0)
	ret0, _ := ret[0].(compute.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result
func (mr *MockDCDisksUpdateFutureMockRecorder) Result(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockDCDisksUpdateFuture)(nil).Result), arg0)
}

// WaitForCompletionRef mocks base method
func (m *MockDCDisksUpdateFuture) WaitForCompletionRef(arg0 context.Context, arg1 azuresdk.DC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCompletionRef", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCompletionRef indicates an expected call of WaitForCompletionRef
func (mr *MockDCDisksUpdateFutureMockRecorder) WaitForCompletionRef(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCompletionRef", reflect.TypeOf((*MockDCDisksUpdateFuture)(nil).WaitForCompletionRef), arg0, arg1)
}

// MockVMC is a mock of VMC interface
type MockVMC struct {
	ctrl     *gomock.Controller
	recorder *MockVMCMockRecorder
}

// MockVMCMockRecorder is the mock recorder for MockVMC
type MockVMCMockRecorder struct {
	mock *MockVMC
}

// NewMockVMC creates a new mock instance
func NewMockVMC(ctrl *gomock.Controller) *MockVMC {
	mock := &MockVMC{ctrl: ctrl}
	mock.recorder = &MockVMCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVMC) EXPECT() *MockVMCMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVMC) CreateOrUpdate(arg0 context.Context, arg1, arg2 string, arg3 compute.VirtualMachine) (azuresdk.VMCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(azuresdk.VMCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVMCMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVMC)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3)
}

// Get mocks base method
func (m *MockVMC) Get(arg0 context.Context, arg1, arg2 string, arg3 compute.InstanceViewTypes) (compute.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(compute.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVMCMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVMC)(nil).Get), arg0, arg1, arg2, arg3)
}

// MockVMCreateOrUpdateFuture is a mock of VMCreateOrUpdateFuture interface
type MockVMCreateOrUpdateFuture struct {
	ctrl     *gomock.Controller
	recorder *MockVMCreateOrUpdateFutureMockRecorder
}

// MockVMCreateOrUpdateFutureMockRecorder is the mock recorder for MockVMCreateOrUpdateFuture
type MockVMCreateOrUpdateFutureMockRecorder struct {
	mock *MockVMCreateOrUpdateFuture
}

// NewMockVMCreateOrUpdateFuture creates a new mock instance
func NewMockVMCreateOrUpdateFuture(ctrl *gomock.Controller) *MockVMCreateOrUpdateFuture {
	mock := &MockVMCreateOrUpdateFuture{ctrl: ctrl}
	mock.recorder = &MockVMCreateOrUpdateFutureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVMCreateOrUpdateFuture) EXPECT() *MockVMCreateOrUpdateFutureMockRecorder {
	return m.recorder
}

// Result mocks base method
func (m *MockVMCreateOrUpdateFuture) Result(arg0 azuresdk.VMC) (compute.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", arg0)
	ret0, _ := ret[0].(compute.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result
func (mr *MockVMCreateOrUpdateFutureMockRecorder) Result(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockVMCreateOrUpdateFuture)(nil).Result), arg0)
}

// WaitForCompletionRef mocks base method
func (m *MockVMCreateOrUpdateFuture) WaitForCompletionRef(arg0 context.Context, arg1 azuresdk.VMC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCompletionRef", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCompletionRef indicates an expected call of WaitForCompletionRef
func (mr *MockVMCreateOrUpdateFutureMockRecorder) WaitForCompletionRef(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCompletionRef", reflect.TypeOf((*MockVMCreateOrUpdateFuture)(nil).WaitForCompletionRef), arg0, arg1)
}
