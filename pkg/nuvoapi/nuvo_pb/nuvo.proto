syntax = "proto2";
// Copyright 2019 Tad Lebeck
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package nuvo;

// SetNodeUuid is the message for setting the node UUID.
// It is expected that requests will have a uuid.
// It is expected that SetNodeUuid will not have result or explanation.
//
// Reply will add a result and possibly an explanation string.
message UseNodeUuid {
    required string uuid = 1;
    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_UUID = 2;
        ERROR = 100;
    }
    optional Result result = 3;
    optional string explanation = 4;
}

// Capabilities gets the capabilities of the node.
message Capabilities {
    optional bool multifuse = 1;
}

// UseDevice is the message for UseDevice requests and replies.
// It is expected that requests will have path, uuid.
// It is expected that UseDevice will not have result or explanation.
//
// Reply will add a result and possibly an explanation string.
message UseDevice {
    enum DevType {
        SSD = 0;
        HDD = 1;
        EPH = 2;
    }
    required string path = 1;
    required string uuid = 2;
    optional DevType dev_type = 3;

    // returns
    optional uint64 size = 4;
    optional uint64 alloc_size = 5;

    enum Result {
        OK = 0;
        INVALID = 1;
        DEVICE_NOT_FOUND = 2;
        UUID_MISMATCH = 3;
        NO_MEM = 4;
        BAD_ORDER = 5;
        DEVICE_NOT_USABLE = 6;
        ERROR = 100;
    }
    optional Result result = 6;
    optional string explanation = 7;
}

// CloseDevice is the message for CloseDevice requests and replies.
// It is expected that requests will have the device uuid.
// It is expected that CloseDevice will not have result or explanation.
// If the device is still in use by a volume, close device will fail
// with the error DEVICE_IN_USE
//
// Reply will add a result and possibly an explanation string.

message CloseDevice {
    required string uuid = 1;

    enum Result {
        OK = 0;
        INVALID = 1;
        DEVICE_NOT_FOUND = 2;
        DEVICE_IN_USE = 3;
        BAD_ORDER = 4;
        ERROR = 100;
    }
    optional Result result = 2;
    optional string explanation = 3;
}

// FormatDevice is the message for FormatDevice requests and replies.
// It is expected that requests will have path, uuid and parcel size.
// It is expected that FormatDevice will not have result or explanation.
//
// Reply will add a result and possibly an explanation string.
message FormatDevice {
    required string path = 1;
    required string uuid = 2;
    required uint64 parcel_size = 3;
    enum Result {
        OK = 0;
        INVALID = 1;
        DEVICE_NOT_FOUND = 2;
        BAD_ORDER = 3;
        ERROR = 100;
    }
    optional Result result = 4;
    optional string explanation = 5;
}

// DeviceLocation is the message for DeviceLocation requests and replies.
// Requests carry a node and device UUID
//
// Replies add the result and possibly an explanation.
message DeviceLocation {
    required string node = 1;
    required string device = 2;
    enum Result {
        OK = 0;
        INVALID = 1;
        NO_MEM = 2;
        BAD_ORDER = 3;
        ERROR = 100;
    }
    optional Result result = 3;
    optional string explanation = 4;
}

// NodeLocation is the message for node location requests and replies.
// Requests carry the uuid of the node, the ipv4 address and the port.
//
// Replies add results and explanations.
message NodeLocation {
    required string uuid = 1;
    required string ipv4_addr = 2;
    required uint32 port = 3;
    enum Result {
        OK = 0;
        INVALID = 1;
        NO_MEM = 2;
        BAD_ORDER = 3;
        ERROR = 100;
    }
    optional Result result = 4;
    optional string explanation = 5;
}

// NodeInitDone is the message for NodeInitDone requests and replies.
// It is expected that requests may have the node uuid.
// It is expected that requests may have the clear flag set (default is false).
// The clear flag is only set during testing.
// It is expected that NodeInitDone will not have result or explanation.
//
// Reply will add a result and possibly an explanation string.

message NodeInitDone {
    optional string uuid = 1;
    optional bool clear = 2;

    enum Result {
        OK = 0;
        INVALID = 1;
        NODE_NOT_FOUND = 2;
        BAD_ORDER = 3;
        ERROR = 100;
    }
    optional Result result = 3;
    optional string explanation = 4;
}

// Open Passthrough Volume
// This is a crappy passthrough volume for now.  You give it a name, a device name and
// and a size.  It opens a pass through volume.  It does not export the volume.
//
// Reply will add a result and possibly an explanation string.
message OpenPassThroughVolume {
    required string uuid = 1;
    required string path = 2;
    required uint64 size = 3;
    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_ORDER = 2;
        ERROR = 100;
    }
    optional Result result = 4;
    optional string explanation = 5;
}

// TODO Close Passthrough Volume

// Export LUN
// This takes a volume series and exports the active lun in it.
// Writable is overkill at this point.  I need a better hobby.
//
// Reply will add a result and possibly an explanation string.
message ExportLun {
    required string vol_series_uuid = 1;
    required string export_name = 2;
    required bool writable = 3;
    optional string pit_uuid = 4;
    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_UUID = 2;
        BAD_ORDER = 3;
        ERROR = 100;
    }
    optional Result result = 5;
    optional string explanation = 6;
}

// Unexport LUN
// This takes an active lun and unexports it.
// The name is really redundant, since you can only export once.
// I feel better having it.
//
// Reply will add a result and possibly an explanation string.
message UnexportLun {
    required string vol_series_uuid = 1;
    required string export_name = 2;
    optional string pit_uuid = 3;
    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_UUID = 2;
        BAD_ORDER = 3;
        ERROR = 100;
    }
    optional Result result = 4;
    optional string explanation = 5;
}

// CreateVol
// Creates a volume
message CreateVolume {
    required string vol_series_uuid = 1;
    required string root_device_uuid = 2;
    optional string root_parcel_uuid = 3;  // return this
    required bool log_volume = 4;
    optional uint64 size = 5;
    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_UUID = 2;
        BAD_ORDER = 3;
        ERROR = 100;
    }
    optional Result result = 6;
    optional string explanation = 7;
}

// OpenVolume
// Opens a volume with a root parcel on the
// specified device.
message OpenVolume {
    required string vol_series_uuid = 1;
    required string root_device_uuid = 2;
    required string root_parcel_uuid = 3;
    required bool log_volume = 4;
    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_UUID = 2;
        BAD_ORDER = 3;
        ERROR = 100;
    }
    optional Result result = 5;
    optional string explanation = 6;
}

// AllocParcels
// Allocate a number of parcels on the specified device
// to the volume series.  uint64 is overkill for
// number of parcels
message AllocParcels {
    required string vol_series_uuid = 1;
    required string device_uuid = 2;
    optional uint64 num = 3;
    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_UUID = 2;
        BAD_ORDER = 3;
        ERROR = 100;
    }
    optional Result result = 4;
    optional string explanation = 5;
}

// AllocCache
// Allocate the specifed amount of cache to the specified volume
message AllocCache {
    required string vol_series_uuid = 1;
    required uint64 size_bytes = 2;
    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_UUID = 2;
        BAD_ORDER = 3;
        ERROR = 100;
    }
    optional Result result = 3;
    optional string explanation = 4;
}

// CloseVol
// Closes a volume of whatever type.
message CloseVol {
    required string vol_series_uuid = 1;
    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_UUID = 2;
        BAD_ORDER = 3;
        ERROR = 100;
    }
    optional Result result = 2;
    optional string explanation = 3;
}

// Get a set of IO stats for either a device or volume
message GetStats {
    enum Type {
        DEVICE = 0;
        VOLUME = 1;
    }
    required Type type = 1;
    enum ReadWrite {
        READ = 0;
        WRITE = 1;
    }
    required ReadWrite rw = 2;
    required string uuid = 3;
    required bool clear = 4;

    message Statistics {
        optional uint64 count = 1;
        optional uint64 size_total = 2;
        optional double latency_mean = 3;
        optional double latency_stdev = 4;
        optional uint64 latency_sub_bits = 5;
        repeated uint64 size_hist = 6;
        repeated uint64 latency_hist = 7;
        optional string series_uuid = 8;
    }
    // returns below
    optional Statistics stats = 5;

    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_UUID = 2;
        DEVICE_NOT_FOUND = 3;
        VOLUME_NOT_FOUND = 4;
        BAD_ORDER = 5;
        ERROR = 100;
    }
    optional Result result = 6;
    optional string explanation = 7;
}

message GetVolumeStats {
    message Statistics {
        optional uint64 count = 1;
        optional uint64 size_total = 2;
        optional double latency_mean = 3;
        optional double latency_stdev = 4;
        optional uint64 latency_sub_bits = 5;
        repeated uint64 size_hist = 6;
        repeated uint64 latency_hist = 7;
        optional string series_uuid = 8;
    }
    message CacheStats {
        optional uint64 io_read_total = 1;
        optional uint64 cache_io_read_line_total_count = 2;
        optional uint64 cache_io_read_line_hit_count = 3;
        optional uint64 cache_io_read_line_miss_count = 4;
        optional uint64 io_write_total = 5;
        optional uint64 cache_io_write_line_total_count = 6;
    }
    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_UUID = 2;
        DEVICE_NOT_FOUND = 3;
        VOLUME_NOT_FOUND = 4;
        BAD_ORDER = 5;
        ERROR = 100;
    }

    required string uuid = 2;
    required bool clear = 3;

    // returns below
    optional Statistics read_stats = 4;
    optional Statistics write_stats = 5;
    optional CacheStats cache_stats_metadata = 6;
    optional CacheStats cache_stats_user = 7;


    optional Result result = 8;
    optional string explanation = 9;
}

message DestroyVol {
    required string vol_uuid= 1;
    required string root_device_uuid = 2;
    required string root_parcel_uuid = 3;
    required bool log_volume = 4;
    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_UUID = 2;
        VOLUME_NOT_FOUND = 3;
        BAD_ORDER = 4;
        ERROR = 100;
    }
    optional Result result = 6;
    optional string explanation = 7;
}

message ManifestSegment {
    required uint32 blks_used = 1;
    required uint64 age = 2;
    required bool reserved = 3;
    required bool logger = 4;
    required uint32 pin_cnt = 5;
}

message ManifestParcel {
    required uint32 parcel_index = 1;
    required string parcel_uuid = 2;
    required uint32 device_index = 3;
    required uint32 segment_size = 4;
    repeated ManifestSegment segments = 5;
    enum State {
        UNUSED = 0;
        ADDING = 1;
        USABLE = 2;
        OPENING = 3;
        OPEN = 4;
    }
    required State state = 6;
}

message ManifestDevice {
    required uint32 device_index = 1;
    required string device_uuid = 2;
    required uint32 target_parcels = 3;
    required uint32 alloced_parcels = 4;
    required uint32 device_class = 5;
    required uint64 parcel_size = 6;
    required uint32 free_segments = 7;
    required uint64 blocks_used = 8;
}

message Manifest {
    required string vol_uuid = 1;
    required bool short_reply = 2;
    repeated ManifestDevice devices = 3;
    repeated ManifestParcel parcels = 4;

    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_UUID = 2;
        VOLUME_NOT_FOUND = 3;
        BAD_ORDER = 4;
        TOO_BIG = 5;
        ERROR = 100;
    }
    optional Result result = 6;
    optional string explanation = 7;
}


message GetPitDiffs {
    required string vol_uuid = 1;
    required string base_pit_uuid = 2;
    required string incr_pit_uuid = 3;
    required uint64 offset = 4;
    // returns below
    enum Result {
        OK = 0;
        INVALID = 1;
        BAD_UUID = 2;
        VOLUME_NOT_FOUND = 3;
        BAD_ORDER = 4;
        OFFSET_MISALIGNED = 5;
        PIT_NOT_FOUND = 6;
        ERROR = 100;
    }

    message PitDiff {
        required uint64 offset = 1;
        required uint64 length = 2;
        required bool dirty = 3;
    }

    repeated PitDiff diffs = 5;
    optional Result result = 6;
    optional string explanation = 7;
}

message CreatePit {
    required string vol_uuid = 1;
    required string pit_uuid = 2;
    optional string resumeio = 3;

    enum Result {
        OK = 0;
        BAD_UUID = 1;
        BAD_ORDER = 2;
        VOLUME_NOT_FOUND = 3;
        NOT_PAUSED = 4;
        PIT_UUID_INUSE = 5;
        CANT_CREATE = 6;
        ERROR = 100;
    }
    optional Result result = 4;
    optional string explanation = 5;
}

message DeletePit {
    required string vol_uuid = 1;
    required string pit_uuid = 2;

    enum Result {
        OK = 0;
        BAD_UUID = 1;
        BAD_ORDER = 2;
        VOLUME_NOT_FOUND = 3;
        PIT_NOT_FOUND = 4;
        PIT_BUSY = 5;
        ERROR = 100;
    }
    optional Result result = 3;
    optional string explanation = 4;
}

message ListPits {
    required string vol_uuid = 1;

    message Pit {
        required string pit_uuid = 1;
    }
    repeated Pit Pits = 2;

    enum Result {
        OK = 0;
        BAD_UUID = 1;
        BAD_ORDER = 2;
        VOLUME_NOT_FOUND = 3;
        ERROR = 100;
    }
    optional Result result = 3;
    optional string explanation = 4;
}
message ListVols {

    message Vol  {
        required string vol_uuid = 1;
    }
    repeated Vol Vols  = 2;

    enum Result {
        OK = 0;
        BAD_UUID = 1;
        BAD_ORDER = 2;
        ERROR = 100;
    }
    optional Result result = 3;
    optional string explanation = 4;
}

message PauseIo {
    required string vol_uuid = 1;
    optional string timeout = 2;

    enum Result {
        OK = 0;
        BAD_UUID = 1;
        BAD_ORDER = 2;
        VOLUME_NOT_FOUND = 3;
        TIMED_OUT = 4;
        ERROR = 100;
    }
    optional Result result = 3;
    optional string explanation = 4;
}

message ResumeIo {
    required string vol_uuid = 1;

    enum Result {
        OK = 0;
        BAD_UUID = 1;
        BAD_ORDER = 2;
        VOLUME_NOT_FOUND = 3;
        NOT_PAUSED = 4;
        ERROR = 100;
    }
    optional Result result = 2;
    optional string explanation = 3;
}

message LogLevel {
    required string module_name = 1;
    required uint32 level = 2;
    enum Result {
        OK = 0;
        NO_MODULE = 1;
        BAD_ORDER = 2;
    }
    optional Result result = 3;
    optional string explanation = 4;
}

message DataClassSpace {
    optional uint32 class = 1;   // enum?
    optional uint64 blocks_used = 2;
    optional uint64 blocks_allocated = 3;
    optional uint64 blocks_total = 4;
}

message VolStatus {
    required string vol_uuid = 1;
    repeated DataClassSpace data_class_space = 2;
}

message NodeStatus {
    optional string     node_uuid = 1;
    optional string     git_build_hash = 2;
    repeated VolStatus  volumes = 3;
    enum Result {
        OK = 0;
        ENOMEM = 1;
    }
    optional Result result = 4;
    optional string explanation = 5;
}

message DebugTrigger {
    optional string trigger = 1;
    optional string node_uuid = 2;
    optional string vol_uuid = 3;
    optional string dev_uuid = 4;
    optional uint32 parcel_index = 5;
    optional uint32 segment_index = 6;
    optional uint32 inject_error_type = 7;
    optional int32 inject_return_code = 8;
    optional int32 inject_repeat_cnt = 9;
    optional int32 inject_skip_cnt = 10;
    optional uint64 multiuse1 = 11;
    optional uint64 multiuse2 = 12;
    optional uint64 multiuse3 = 13;
}

message LogSummaryEntry {
    message Header {
        required uint64 sequence_no = 1;
        required uint32 subclass = 2;
    }

    message Data {
        required bool pit_info_active = 1;
        required uint32 pit_info_id = 2;
        required uint64 bno = 3;
        required uint32 gc_parcel_index = 4;
        required uint32 gc_block_offset = 5;
    }

    message Descriptor {
        required uint32 cv_flag = 1;
        required uint32 entry_count = 2;
        required uint32 data_block_count = 3;
        required uint64 sequence_no = 4;
    }

    message Fork {
        required uint32 seg_parcel_index = 1;
        required uint32 seg_block_offset = 2;
        required uint64 sequence_no = 3;
        required uint32 seg_subclass = 4;
    }

    message Snap {
        required uint32 operation = 1;
        required uint64 sequence_no = 2;
    }

    required uint32 log_entry_type=1;
    required uint32 block_hash=2;
    optional Header header=3;
    optional Data data=4;
    optional Descriptor descriptor=5;
    optional Fork fork=6;
    optional Snap snap=7;
}

message LogSummary {
    optional string vol_uuid = 1;
    optional uint32 parcel_index = 2;
    optional uint32 segment_index = 3;
    enum Result {
        OK = 0;
        VOLUME_NOT_FOUND = 1;
        READ_SUMMARY_FAILED = 2;
        ENOMEM = 3;
    }
    optional Result result = 4;
    optional string explanation = 5;

    optional uint32 magic = 6;
    optional uint64 sequence_no = 7;
    optional uint64 closing_sequence_no = 8;
    optional string vs_uuid = 9;
    repeated LogSummaryEntry entries = 10;
}

message Cmd {
    enum MessageType {
        INVALID_MSG = 0;
        USE_DEVICE_REQ = 1;
        USE_DEVICE_REPLY = 2;
        FORMAT_DEVICE_REQ = 3;
        FORMAT_DEVICE_REPLY = 4;
        DEVICE_LOCATION_REQ = 5;
        DEVICE_LOCATION_REPLY = 6;
        NODE_LOCATION_REQ = 7;
        NODE_LOCATION_REPLY = 8;
        OPEN_PASSTHROUGH_REQ = 9;
        OPEN_PASSTHROUGH_REPLY = 10;
        SHUTDOWN = 11;
        EXPORT_LUN_REQ = 12;
        EXPORT_LUN_REPLY = 13;
        UNEXPORT_LUN_REQ = 14;
        UNEXPORT_LUN_REPLY = 15;
        CREATE_VOLUME_REQ = 16;
        CREATE_VOLUME_REPLY = 17;
        OPEN_VOLUME_REQ = 18;
        OPEN_VOLUME_REPLY = 19;
        ALLOC_PARCELS_REQ = 20;
        ALLOC_PARCELS_REPLY = 21;
        CLOSE_VOL_REQ = 22;
        CLOSE_VOL_REPLY = 23;
        GET_STATS_REQ = 24;
        GET_STATS_REPLY = 25;
        DESTROY_VOL_REQ = 26;
        DESTROY_VOL_REPLY = 27;
        USE_NODE_UUID_REQ = 28;
        USE_NODE_UUID_REPLY = 29;
        MANIFEST_REQ = 30;
        MANIFEST_REPLY = 31;
        GET_PIT_DIFF_REQ = 32;
        GET_PIT_DIFF_REPLY = 33;
        CREATE_PIT_REQ = 34;
        CREATE_PIT_REPLY = 35;
        DELETE_PIT_REQ = 36;
        DELETE_PIT_REPLY = 37;
        LIST_PITS_REQ = 38;
        LIST_PITS_REPLY = 39;
        PAUSE_IO_REQ = 40;
        PAUSE_IO_REPLY = 41;
        RESUME_IO_REQ = 42;
        RESUME_IO_REPLY = 43;
        LIST_VOLS_REQ = 44;
        LIST_VOLS_REPLY = 45;
        LOG_LEVEL_REQ = 46;
        LOG_LEVEL_REPLY = 47;
        NODE_STATUS_REQ = 48;
        NODE_STATUS_REPLY = 49;
        DEBUG_TRIGGER_REQ = 50;
        DEBUG_TRIGGER_REPLY = 51;
        LOG_SUMMARY_REQ = 52;
        LOG_SUMMARY_REPLY = 53;
        ALLOC_CACHE_REQ = 54;
        ALLOC_CACHE_REPLY = 55;
        GET_VOLUME_STATS_REQ = 56;
        GET_VOLUME_STATS_REPLY = 57;
        CLOSE_DEVICE_REQ = 58;
        CLOSE_DEVICE_REPLY = 59;
        CAPABILITIES_REQ = 60;
        CAPABILITIES_REPLY = 61;
        NODE_INIT_DONE_REQ = 62;
        NODE_INIT_DONE_REPLY = 63;
    }
    optional MessageType msg_type = 1;
    repeated UseDevice use_device = 2;
    repeated FormatDevice format_device = 3;
    repeated DeviceLocation device_location = 4;
    repeated NodeLocation node_location = 5;
    optional OpenPassThroughVolume open_pass_through_vol = 6;
    optional ExportLun export_lun = 7;
    optional UnexportLun unexport_lun = 8;
    optional CreateVolume create_volume = 9;
    optional OpenVolume open_volume = 10;
    optional AllocParcels alloc_parcels = 11;
    optional CloseVol close_vol = 12;
    optional GetStats get_stats = 13;
    optional DestroyVol destroy_vol = 14;
    optional UseNodeUuid use_node_uuid = 15;
    optional Manifest manifest = 16;
    optional GetPitDiffs get_pit_diffs = 17;
    optional CreatePit create_pit = 18;
    optional DeletePit delete_pit = 19;
    optional ListPits list_pits = 20;
    optional PauseIo pause_io = 21;
    optional ResumeIo resume_io = 22;
    optional ListVols list_vols = 23;
    optional LogLevel log_level = 24;
    optional NodeStatus node_status = 25;
    optional DebugTrigger debug_trigger = 26;
    optional LogSummary log_summary = 27;
    optional AllocCache alloc_cache = 28;
    optional GetVolumeStats get_volume_stats = 29;
    repeated CloseDevice close_device = 30;
    optional Capabilities capabilities = 31;
    optional NodeInitDone node_init_done = 32;
}
