// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nuvoloso/kontroller/pkg/nuvoapi (interfaces: NuvoVM)

// Package mock is a generated GoMock package.
package mock

import (
	nuvoapi "github.com/Nuvoloso/kontroller/pkg/nuvoapi"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNuvoVM is a mock of NuvoVM interface
type MockNuvoVM struct {
	ctrl     *gomock.Controller
	recorder *MockNuvoVMMockRecorder
}

// MockNuvoVMMockRecorder is the mock recorder for MockNuvoVM
type MockNuvoVMMockRecorder struct {
	mock *MockNuvoVM
}

// NewMockNuvoVM creates a new mock instance
func NewMockNuvoVM(ctrl *gomock.Controller) *MockNuvoVM {
	mock := &MockNuvoVM{ctrl: ctrl}
	mock.recorder = &MockNuvoVMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNuvoVM) EXPECT() *MockNuvoVMMockRecorder {
	return m.recorder
}

// AllocCache mocks base method
func (m *MockNuvoVM) AllocCache(arg0 string, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllocCache indicates an expected call of AllocCache
func (mr *MockNuvoVMMockRecorder) AllocCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocCache", reflect.TypeOf((*MockNuvoVM)(nil).AllocCache), arg0, arg1)
}

// AllocParcels mocks base method
func (m *MockNuvoVM) AllocParcels(arg0, arg1 string, arg2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocParcels", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllocParcels indicates an expected call of AllocParcels
func (mr *MockNuvoVMMockRecorder) AllocParcels(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocParcels", reflect.TypeOf((*MockNuvoVM)(nil).AllocParcels), arg0, arg1, arg2)
}

// CloseDevice mocks base method
func (m *MockNuvoVM) CloseDevice(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseDevice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseDevice indicates an expected call of CloseDevice
func (mr *MockNuvoVMMockRecorder) CloseDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDevice", reflect.TypeOf((*MockNuvoVM)(nil).CloseDevice), arg0)
}

// CloseVol mocks base method
func (m *MockNuvoVM) CloseVol(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseVol", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseVol indicates an expected call of CloseVol
func (mr *MockNuvoVMMockRecorder) CloseVol(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseVol", reflect.TypeOf((*MockNuvoVM)(nil).CloseVol), arg0)
}

// CreateLogVol mocks base method
func (m *MockNuvoVM) CreateLogVol(arg0, arg1, arg2 string, arg3 uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogVol", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogVol indicates an expected call of CreateLogVol
func (mr *MockNuvoVMMockRecorder) CreateLogVol(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogVol", reflect.TypeOf((*MockNuvoVM)(nil).CreateLogVol), arg0, arg1, arg2, arg3)
}

// CreateParcelVol mocks base method
func (m *MockNuvoVM) CreateParcelVol(arg0, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParcelVol", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParcelVol indicates an expected call of CreateParcelVol
func (mr *MockNuvoVMMockRecorder) CreateParcelVol(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParcelVol", reflect.TypeOf((*MockNuvoVM)(nil).CreateParcelVol), arg0, arg1, arg2)
}

// CreatePit mocks base method
func (m *MockNuvoVM) CreatePit(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePit indicates an expected call of CreatePit
func (mr *MockNuvoVMMockRecorder) CreatePit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePit", reflect.TypeOf((*MockNuvoVM)(nil).CreatePit), arg0, arg1)
}

// DebugTrigger mocks base method
func (m *MockNuvoVM) DebugTrigger(arg0 nuvoapi.DebugTriggerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugTrigger", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DebugTrigger indicates an expected call of DebugTrigger
func (mr *MockNuvoVMMockRecorder) DebugTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugTrigger", reflect.TypeOf((*MockNuvoVM)(nil).DebugTrigger), arg0)
}

// DeletePit mocks base method
func (m *MockNuvoVM) DeletePit(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePit indicates an expected call of DeletePit
func (mr *MockNuvoVMMockRecorder) DeletePit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePit", reflect.TypeOf((*MockNuvoVM)(nil).DeletePit), arg0, arg1)
}

// DestroyVol mocks base method
func (m *MockNuvoVM) DestroyVol(arg0, arg1, arg2 string, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyVol", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyVol indicates an expected call of DestroyVol
func (mr *MockNuvoVMMockRecorder) DestroyVol(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyVol", reflect.TypeOf((*MockNuvoVM)(nil).DestroyVol), arg0, arg1, arg2, arg3)
}

// DeviceLocation mocks base method
func (m *MockNuvoVM) DeviceLocation(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeviceLocation indicates an expected call of DeviceLocation
func (mr *MockNuvoVMMockRecorder) DeviceLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceLocation", reflect.TypeOf((*MockNuvoVM)(nil).DeviceLocation), arg0, arg1)
}

// ExportLun mocks base method
func (m *MockNuvoVM) ExportLun(arg0, arg1, arg2 string, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportLun", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportLun indicates an expected call of ExportLun
func (mr *MockNuvoVMMockRecorder) ExportLun(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportLun", reflect.TypeOf((*MockNuvoVM)(nil).ExportLun), arg0, arg1, arg2, arg3)
}

// FormatDevice mocks base method
func (m *MockNuvoVM) FormatDevice(arg0, arg1 string, arg2 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatDevice", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatDevice indicates an expected call of FormatDevice
func (mr *MockNuvoVMMockRecorder) FormatDevice(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatDevice", reflect.TypeOf((*MockNuvoVM)(nil).FormatDevice), arg0, arg1, arg2)
}

// GetCapabilities mocks base method
func (m *MockNuvoVM) GetCapabilities() (*nuvoapi.Capabilities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapabilities")
	ret0, _ := ret[0].(*nuvoapi.Capabilities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapabilities indicates an expected call of GetCapabilities
func (mr *MockNuvoVMMockRecorder) GetCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapabilities", reflect.TypeOf((*MockNuvoVM)(nil).GetCapabilities))
}

// GetPitDiffs mocks base method
func (m *MockNuvoVM) GetPitDiffs(arg0, arg1, arg2 string, arg3 uint64) ([]nuvoapi.Diff, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPitDiffs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]nuvoapi.Diff)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPitDiffs indicates an expected call of GetPitDiffs
func (mr *MockNuvoVMMockRecorder) GetPitDiffs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPitDiffs", reflect.TypeOf((*MockNuvoVM)(nil).GetPitDiffs), arg0, arg1, arg2, arg3)
}

// GetStats mocks base method
func (m *MockNuvoVM) GetStats(arg0, arg1, arg2 bool, arg3 string) (*nuvoapi.StatsIO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*nuvoapi.StatsIO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats
func (mr *MockNuvoVMMockRecorder) GetStats(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockNuvoVM)(nil).GetStats), arg0, arg1, arg2, arg3)
}

// GetVolumeStats mocks base method
func (m *MockNuvoVM) GetVolumeStats(arg0 bool, arg1 string) (*nuvoapi.StatsCombinedVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeStats", arg0, arg1)
	ret0, _ := ret[0].(*nuvoapi.StatsCombinedVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeStats indicates an expected call of GetVolumeStats
func (mr *MockNuvoVMMockRecorder) GetVolumeStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeStats", reflect.TypeOf((*MockNuvoVM)(nil).GetVolumeStats), arg0, arg1)
}

// HaltCommand mocks base method
func (m *MockNuvoVM) HaltCommand() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HaltCommand")
	ret0, _ := ret[0].(error)
	return ret0
}

// HaltCommand indicates an expected call of HaltCommand
func (mr *MockNuvoVMMockRecorder) HaltCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HaltCommand", reflect.TypeOf((*MockNuvoVM)(nil).HaltCommand))
}

// ListPits mocks base method
func (m *MockNuvoVM) ListPits(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPits", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPits indicates an expected call of ListPits
func (mr *MockNuvoVMMockRecorder) ListPits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPits", reflect.TypeOf((*MockNuvoVM)(nil).ListPits), arg0)
}

// ListVols mocks base method
func (m *MockNuvoVM) ListVols() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVols")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVols indicates an expected call of ListVols
func (mr *MockNuvoVMMockRecorder) ListVols() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVols", reflect.TypeOf((*MockNuvoVM)(nil).ListVols))
}

// LogLevel mocks base method
func (m *MockNuvoVM) LogLevel(arg0 string, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogLevel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogLevel indicates an expected call of LogLevel
func (mr *MockNuvoVMMockRecorder) LogLevel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogLevel", reflect.TypeOf((*MockNuvoVM)(nil).LogLevel), arg0, arg1)
}

// LogSummary mocks base method
func (m *MockNuvoVM) LogSummary(arg0 string, arg1, arg2 uint32) (*nuvoapi.LogSummaryResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogSummary", arg0, arg1, arg2)
	ret0, _ := ret[0].(*nuvoapi.LogSummaryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogSummary indicates an expected call of LogSummary
func (mr *MockNuvoVMMockRecorder) LogSummary(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogSummary", reflect.TypeOf((*MockNuvoVM)(nil).LogSummary), arg0, arg1, arg2)
}

// LunPath mocks base method
func (m *MockNuvoVM) LunPath(arg0, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunPath", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// LunPath indicates an expected call of LunPath
func (mr *MockNuvoVMMockRecorder) LunPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunPath", reflect.TypeOf((*MockNuvoVM)(nil).LunPath), arg0, arg1)
}

// Manifest mocks base method
func (m *MockNuvoVM) Manifest(arg0 string, arg1 bool) ([]nuvoapi.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Manifest", arg0, arg1)
	ret0, _ := ret[0].([]nuvoapi.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Manifest indicates an expected call of Manifest
func (mr *MockNuvoVMMockRecorder) Manifest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manifest", reflect.TypeOf((*MockNuvoVM)(nil).Manifest), arg0, arg1)
}

// NodeInitDone mocks base method
func (m *MockNuvoVM) NodeInitDone(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeInitDone", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NodeInitDone indicates an expected call of NodeInitDone
func (mr *MockNuvoVMMockRecorder) NodeInitDone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeInitDone", reflect.TypeOf((*MockNuvoVM)(nil).NodeInitDone), arg0, arg1)
}

// NodeLocation mocks base method
func (m *MockNuvoVM) NodeLocation(arg0, arg1 string, arg2 uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeLocation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NodeLocation indicates an expected call of NodeLocation
func (mr *MockNuvoVMMockRecorder) NodeLocation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeLocation", reflect.TypeOf((*MockNuvoVM)(nil).NodeLocation), arg0, arg1, arg2)
}

// NodeStatus mocks base method
func (m *MockNuvoVM) NodeStatus() (nuvoapi.NodeStatusReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeStatus")
	ret0, _ := ret[0].(nuvoapi.NodeStatusReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeStatus indicates an expected call of NodeStatus
func (mr *MockNuvoVMMockRecorder) NodeStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeStatus", reflect.TypeOf((*MockNuvoVM)(nil).NodeStatus))
}

// OpenPassThroughVolume mocks base method
func (m *MockNuvoVM) OpenPassThroughVolume(arg0, arg1 string, arg2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenPassThroughVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenPassThroughVolume indicates an expected call of OpenPassThroughVolume
func (mr *MockNuvoVMMockRecorder) OpenPassThroughVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenPassThroughVolume", reflect.TypeOf((*MockNuvoVM)(nil).OpenPassThroughVolume), arg0, arg1, arg2)
}

// OpenVol mocks base method
func (m *MockNuvoVM) OpenVol(arg0, arg1, arg2 string, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenVol", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenVol indicates an expected call of OpenVol
func (mr *MockNuvoVMMockRecorder) OpenVol(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenVol", reflect.TypeOf((*MockNuvoVM)(nil).OpenVol), arg0, arg1, arg2, arg3)
}

// PauseIo mocks base method
func (m *MockNuvoVM) PauseIo(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseIo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseIo indicates an expected call of PauseIo
func (mr *MockNuvoVMMockRecorder) PauseIo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseIo", reflect.TypeOf((*MockNuvoVM)(nil).PauseIo), arg0)
}

// ResumeIo mocks base method
func (m *MockNuvoVM) ResumeIo(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeIo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeIo indicates an expected call of ResumeIo
func (mr *MockNuvoVMMockRecorder) ResumeIo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeIo", reflect.TypeOf((*MockNuvoVM)(nil).ResumeIo), arg0)
}

// UnexportLun mocks base method
func (m *MockNuvoVM) UnexportLun(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnexportLun", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnexportLun indicates an expected call of UnexportLun
func (mr *MockNuvoVMMockRecorder) UnexportLun(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnexportLun", reflect.TypeOf((*MockNuvoVM)(nil).UnexportLun), arg0, arg1, arg2)
}

// UseCacheDevice mocks base method
func (m *MockNuvoVM) UseCacheDevice(arg0, arg1 string) (uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseCacheDevice", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UseCacheDevice indicates an expected call of UseCacheDevice
func (mr *MockNuvoVMMockRecorder) UseCacheDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseCacheDevice", reflect.TypeOf((*MockNuvoVM)(nil).UseCacheDevice), arg0, arg1)
}

// UseDevice mocks base method
func (m *MockNuvoVM) UseDevice(arg0, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UseDevice", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseDevice indicates an expected call of UseDevice
func (mr *MockNuvoVMMockRecorder) UseDevice(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseDevice", reflect.TypeOf((*MockNuvoVM)(nil).UseDevice), varargs...)
}

// UseNodeUUID mocks base method
func (m *MockNuvoVM) UseNodeUUID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseNodeUUID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseNodeUUID indicates an expected call of UseNodeUUID
func (mr *MockNuvoVMMockRecorder) UseNodeUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseNodeUUID", reflect.TypeOf((*MockNuvoVM)(nil).UseNodeUUID), arg0)
}
