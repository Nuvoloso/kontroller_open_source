// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nuvoloso/kontroller/pkg/cluster (interfaces: Client,MCDeployer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "github.com/Nuvoloso/kontroller/pkg/autogen/models"
	cluster "github.com/Nuvoloso/kontroller/pkg/cluster"
	gomock "github.com/golang/mock/gomock"
	go_logging "github.com/op/go-logging"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ControllerFetch mocks base method
func (m *MockClient) ControllerFetch(arg0 context.Context, arg1 *cluster.ControllerFetchArgs) (*cluster.ControllerObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerFetch", arg0, arg1)
	ret0, _ := ret[0].(*cluster.ControllerObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerFetch indicates an expected call of ControllerFetch
func (mr *MockClientMockRecorder) ControllerFetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerFetch", reflect.TypeOf((*MockClient)(nil).ControllerFetch), arg0, arg1)
}

// CreatePublishedPersistentVolumeWatcher mocks base method
func (m *MockClient) CreatePublishedPersistentVolumeWatcher(arg0 context.Context, arg1 *cluster.PVWatcherArgs) (cluster.PVWatcher, []*cluster.PersistentVolumeObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublishedPersistentVolumeWatcher", arg0, arg1)
	ret0, _ := ret[0].(cluster.PVWatcher)
	ret1, _ := ret[1].([]*cluster.PersistentVolumeObj)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePublishedPersistentVolumeWatcher indicates an expected call of CreatePublishedPersistentVolumeWatcher
func (mr *MockClientMockRecorder) CreatePublishedPersistentVolumeWatcher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublishedPersistentVolumeWatcher", reflect.TypeOf((*MockClient)(nil).CreatePublishedPersistentVolumeWatcher), arg0, arg1)
}

// GetDriverTypes mocks base method
func (m *MockClient) GetDriverTypes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverTypes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetDriverTypes indicates an expected call of GetDriverTypes
func (mr *MockClientMockRecorder) GetDriverTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverTypes", reflect.TypeOf((*MockClient)(nil).GetDriverTypes))
}

// GetFileSystemTypes mocks base method
func (m *MockClient) GetFileSystemTypes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSystemTypes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetFileSystemTypes indicates an expected call of GetFileSystemTypes
func (mr *MockClientMockRecorder) GetFileSystemTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSystemTypes", reflect.TypeOf((*MockClient)(nil).GetFileSystemTypes))
}

// GetPVSpec mocks base method
func (m *MockClient) GetPVSpec(arg0 context.Context, arg1 *cluster.PVSpecArgs) (*cluster.PVSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVSpec", arg0, arg1)
	ret0, _ := ret[0].(*cluster.PVSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVSpec indicates an expected call of GetPVSpec
func (mr *MockClientMockRecorder) GetPVSpec(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVSpec", reflect.TypeOf((*MockClient)(nil).GetPVSpec), arg0, arg1)
}

// GetService mocks base method
func (m *MockClient) GetService(arg0 context.Context, arg1, arg2 string) (*cluster.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cluster.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService
func (mr *MockClientMockRecorder) GetService(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockClient)(nil).GetService), arg0, arg1, arg2)
}

// MetaData mocks base method
func (m *MockClient) MetaData(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetaData", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetaData indicates an expected call of MetaData
func (mr *MockClientMockRecorder) MetaData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetaData", reflect.TypeOf((*MockClient)(nil).MetaData), arg0)
}

// NodeFetch mocks base method
func (m *MockClient) NodeFetch(arg0 context.Context, arg1 *cluster.NodeFetchArgs) (*cluster.NodeObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeFetch", arg0, arg1)
	ret0, _ := ret[0].(*cluster.NodeObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeFetch indicates an expected call of NodeFetch
func (mr *MockClientMockRecorder) NodeFetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeFetch", reflect.TypeOf((*MockClient)(nil).NodeFetch), arg0, arg1)
}

// PersistentVolumeCreate mocks base method
func (m *MockClient) PersistentVolumeCreate(arg0 context.Context, arg1 *cluster.PersistentVolumeCreateArgs) (*cluster.PersistentVolumeObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumeCreate", arg0, arg1)
	ret0, _ := ret[0].(*cluster.PersistentVolumeObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersistentVolumeCreate indicates an expected call of PersistentVolumeCreate
func (mr *MockClientMockRecorder) PersistentVolumeCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumeCreate", reflect.TypeOf((*MockClient)(nil).PersistentVolumeCreate), arg0, arg1)
}

// PersistentVolumeDelete mocks base method
func (m *MockClient) PersistentVolumeDelete(arg0 context.Context, arg1 *cluster.PersistentVolumeDeleteArgs) (*cluster.PersistentVolumeObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumeDelete", arg0, arg1)
	ret0, _ := ret[0].(*cluster.PersistentVolumeObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersistentVolumeDelete indicates an expected call of PersistentVolumeDelete
func (mr *MockClientMockRecorder) PersistentVolumeDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumeDelete", reflect.TypeOf((*MockClient)(nil).PersistentVolumeDelete), arg0, arg1)
}

// PersistentVolumeList mocks base method
func (m *MockClient) PersistentVolumeList(arg0 context.Context) ([]*cluster.PersistentVolumeObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumeList", arg0)
	ret0, _ := ret[0].([]*cluster.PersistentVolumeObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersistentVolumeList indicates an expected call of PersistentVolumeList
func (mr *MockClientMockRecorder) PersistentVolumeList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumeList", reflect.TypeOf((*MockClient)(nil).PersistentVolumeList), arg0)
}

// PersistentVolumePublish mocks base method
func (m *MockClient) PersistentVolumePublish(arg0 context.Context, arg1 *cluster.PersistentVolumeCreateArgs) (models.ClusterDescriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumePublish", arg0, arg1)
	ret0, _ := ret[0].(models.ClusterDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersistentVolumePublish indicates an expected call of PersistentVolumePublish
func (mr *MockClientMockRecorder) PersistentVolumePublish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumePublish", reflect.TypeOf((*MockClient)(nil).PersistentVolumePublish), arg0, arg1)
}

// PodFetch mocks base method
func (m *MockClient) PodFetch(arg0 context.Context, arg1 *cluster.PodFetchArgs) (*cluster.PodObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodFetch", arg0, arg1)
	ret0, _ := ret[0].(*cluster.PodObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodFetch indicates an expected call of PodFetch
func (mr *MockClientMockRecorder) PodFetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodFetch", reflect.TypeOf((*MockClient)(nil).PodFetch), arg0, arg1)
}

// PodList mocks base method
func (m *MockClient) PodList(arg0 context.Context, arg1 *cluster.PodListArgs) ([]*cluster.PodObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodList", arg0, arg1)
	ret0, _ := ret[0].([]*cluster.PodObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodList indicates an expected call of PodList
func (mr *MockClientMockRecorder) PodList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodList", reflect.TypeOf((*MockClient)(nil).PodList), arg0, arg1)
}

// PublishedPersistentVolumeList mocks base method
func (m *MockClient) PublishedPersistentVolumeList(arg0 context.Context) ([]*cluster.PersistentVolumeObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishedPersistentVolumeList", arg0)
	ret0, _ := ret[0].([]*cluster.PersistentVolumeObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishedPersistentVolumeList indicates an expected call of PublishedPersistentVolumeList
func (mr *MockClientMockRecorder) PublishedPersistentVolumeList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishedPersistentVolumeList", reflect.TypeOf((*MockClient)(nil).PublishedPersistentVolumeList), arg0)
}

// RecordCondition mocks base method
func (m *MockClient) RecordCondition(arg0 context.Context, arg1 *cluster.Condition) (*cluster.EventObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordCondition", arg0, arg1)
	ret0, _ := ret[0].(*cluster.EventObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordCondition indicates an expected call of RecordCondition
func (mr *MockClientMockRecorder) RecordCondition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordCondition", reflect.TypeOf((*MockClient)(nil).RecordCondition), arg0, arg1)
}

// RecordIncident mocks base method
func (m *MockClient) RecordIncident(arg0 context.Context, arg1 *cluster.Incident) (*cluster.EventObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordIncident", arg0, arg1)
	ret0, _ := ret[0].(*cluster.EventObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordIncident indicates an expected call of RecordIncident
func (mr *MockClientMockRecorder) RecordIncident(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordIncident", reflect.TypeOf((*MockClient)(nil).RecordIncident), arg0, arg1)
}

// SecretCreate mocks base method
func (m *MockClient) SecretCreate(arg0 context.Context, arg1 *cluster.SecretCreateArgs) (*cluster.SecretObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretCreate", arg0, arg1)
	ret0, _ := ret[0].(*cluster.SecretObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretCreate indicates an expected call of SecretCreate
func (mr *MockClientMockRecorder) SecretCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretCreate", reflect.TypeOf((*MockClient)(nil).SecretCreate), arg0, arg1)
}

// SecretCreateMV mocks base method
func (m *MockClient) SecretCreateMV(arg0 context.Context, arg1 *cluster.SecretCreateArgsMV) (*cluster.SecretObjMV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretCreateMV", arg0, arg1)
	ret0, _ := ret[0].(*cluster.SecretObjMV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretCreateMV indicates an expected call of SecretCreateMV
func (mr *MockClientMockRecorder) SecretCreateMV(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretCreateMV", reflect.TypeOf((*MockClient)(nil).SecretCreateMV), arg0, arg1)
}

// SecretFetch mocks base method
func (m *MockClient) SecretFetch(arg0 context.Context, arg1 *cluster.SecretFetchArgs) (*cluster.SecretObj, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretFetch", arg0, arg1)
	ret0, _ := ret[0].(*cluster.SecretObj)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretFetch indicates an expected call of SecretFetch
func (mr *MockClientMockRecorder) SecretFetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretFetch", reflect.TypeOf((*MockClient)(nil).SecretFetch), arg0, arg1)
}

// SecretFetchMV mocks base method
func (m *MockClient) SecretFetchMV(arg0 context.Context, arg1 *cluster.SecretFetchArgs) (*cluster.SecretObjMV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretFetchMV", arg0, arg1)
	ret0, _ := ret[0].(*cluster.SecretObjMV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretFetchMV indicates an expected call of SecretFetchMV
func (mr *MockClientMockRecorder) SecretFetchMV(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretFetchMV", reflect.TypeOf((*MockClient)(nil).SecretFetchMV), arg0, arg1)
}

// SecretFormat mocks base method
func (m *MockClient) SecretFormat(arg0 context.Context, arg1 *cluster.SecretCreateArgs) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretFormat", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretFormat indicates an expected call of SecretFormat
func (mr *MockClientMockRecorder) SecretFormat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretFormat", reflect.TypeOf((*MockClient)(nil).SecretFormat), arg0, arg1)
}

// SecretFormatMV mocks base method
func (m *MockClient) SecretFormatMV(arg0 context.Context, arg1 *cluster.SecretCreateArgsMV) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretFormatMV", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretFormatMV indicates an expected call of SecretFormatMV
func (mr *MockClientMockRecorder) SecretFormatMV(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretFormatMV", reflect.TypeOf((*MockClient)(nil).SecretFormatMV), arg0, arg1)
}

// ServicePlanPublish mocks base method
func (m *MockClient) ServicePlanPublish(arg0 context.Context, arg1 *models.ServicePlan) (models.ClusterDescriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanPublish", arg0, arg1)
	ret0, _ := ret[0].(models.ClusterDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanPublish indicates an expected call of ServicePlanPublish
func (mr *MockClientMockRecorder) ServicePlanPublish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanPublish", reflect.TypeOf((*MockClient)(nil).ServicePlanPublish), arg0, arg1)
}

// SetDebugLogger mocks base method
func (m *MockClient) SetDebugLogger(arg0 *go_logging.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDebugLogger", arg0)
}

// SetDebugLogger indicates an expected call of SetDebugLogger
func (mr *MockClientMockRecorder) SetDebugLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDebugLogger", reflect.TypeOf((*MockClient)(nil).SetDebugLogger), arg0)
}

// SetTimeout mocks base method
func (m *MockClient) SetTimeout(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", arg0)
}

// SetTimeout indicates an expected call of SetTimeout
func (mr *MockClientMockRecorder) SetTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockClient)(nil).SetTimeout), arg0)
}

// Type mocks base method
func (m *MockClient) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockClientMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockClient)(nil).Type))
}

// ValidateClusterObjID mocks base method
func (m *MockClient) ValidateClusterObjID(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateClusterObjID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateClusterObjID indicates an expected call of ValidateClusterObjID
func (mr *MockClientMockRecorder) ValidateClusterObjID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateClusterObjID", reflect.TypeOf((*MockClient)(nil).ValidateClusterObjID), arg0, arg1, arg2)
}

// MockMCDeployer is a mock of MCDeployer interface
type MockMCDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockMCDeployerMockRecorder
}

// MockMCDeployerMockRecorder is the mock recorder for MockMCDeployer
type MockMCDeployerMockRecorder struct {
	mock *MockMCDeployer
}

// NewMockMCDeployer creates a new mock instance
func NewMockMCDeployer(ctrl *gomock.Controller) *MockMCDeployer {
	mock := &MockMCDeployer{ctrl: ctrl}
	mock.recorder = &MockMCDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMCDeployer) EXPECT() *MockMCDeployerMockRecorder {
	return m.recorder
}

// GetMCDeployment mocks base method
func (m *MockMCDeployer) GetMCDeployment(arg0 *cluster.MCDeploymentArgs) (*cluster.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMCDeployment", arg0)
	ret0, _ := ret[0].(*cluster.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMCDeployment indicates an expected call of GetMCDeployment
func (mr *MockMCDeployerMockRecorder) GetMCDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMCDeployment", reflect.TypeOf((*MockMCDeployer)(nil).GetMCDeployment), arg0)
}
