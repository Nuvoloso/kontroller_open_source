// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nuvoloso/kontroller/pkg/csp (interfaces: CloudServiceProvider,DomainClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "github.com/Nuvoloso/kontroller/pkg/autogen/models"
	csp "github.com/Nuvoloso/kontroller/pkg/csp"
	gomock "github.com/golang/mock/gomock"
	go_logging "github.com/op/go-logging"
	reflect "reflect"
)

// MockCloudServiceProvider is a mock of CloudServiceProvider interface
type MockCloudServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCloudServiceProviderMockRecorder
}

// MockCloudServiceProviderMockRecorder is the mock recorder for MockCloudServiceProvider
type MockCloudServiceProviderMockRecorder struct {
	mock *MockCloudServiceProvider
}

// NewMockCloudServiceProvider creates a new mock instance
func NewMockCloudServiceProvider(ctrl *gomock.Controller) *MockCloudServiceProvider {
	mock := &MockCloudServiceProvider{ctrl: ctrl}
	mock.recorder = &MockCloudServiceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudServiceProvider) EXPECT() *MockCloudServiceProviderMockRecorder {
	return m.recorder
}

// Attributes mocks base method
func (m *MockCloudServiceProvider) Attributes() map[string]models.AttributeDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(map[string]models.AttributeDescriptor)
	return ret0
}

// Attributes indicates an expected call of Attributes
func (mr *MockCloudServiceProviderMockRecorder) Attributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockCloudServiceProvider)(nil).Attributes))
}

// Client mocks base method
func (m *MockCloudServiceProvider) Client(arg0 *models.CSPDomain) (csp.DomainClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client", arg0)
	ret0, _ := ret[0].(csp.DomainClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Client indicates an expected call of Client
func (mr *MockCloudServiceProviderMockRecorder) Client(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockCloudServiceProvider)(nil).Client), arg0)
}

// CredentialAttributes mocks base method
func (m *MockCloudServiceProvider) CredentialAttributes() map[string]models.AttributeDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialAttributes")
	ret0, _ := ret[0].(map[string]models.AttributeDescriptor)
	return ret0
}

// CredentialAttributes indicates an expected call of CredentialAttributes
func (mr *MockCloudServiceProviderMockRecorder) CredentialAttributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialAttributes", reflect.TypeOf((*MockCloudServiceProvider)(nil).CredentialAttributes))
}

// DomainAttributes mocks base method
func (m *MockCloudServiceProvider) DomainAttributes() map[string]models.AttributeDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainAttributes")
	ret0, _ := ret[0].(map[string]models.AttributeDescriptor)
	return ret0
}

// DomainAttributes indicates an expected call of DomainAttributes
func (mr *MockCloudServiceProviderMockRecorder) DomainAttributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainAttributes", reflect.TypeOf((*MockCloudServiceProvider)(nil).DomainAttributes))
}

// GetDeviceTypeByCspStorageType mocks base method
func (m *MockCloudServiceProvider) GetDeviceTypeByCspStorageType(arg0 models.CspStorageType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceTypeByCspStorageType", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceTypeByCspStorageType indicates an expected call of GetDeviceTypeByCspStorageType
func (mr *MockCloudServiceProviderMockRecorder) GetDeviceTypeByCspStorageType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceTypeByCspStorageType", reflect.TypeOf((*MockCloudServiceProvider)(nil).GetDeviceTypeByCspStorageType), arg0)
}

// InDomain mocks base method
func (m *MockCloudServiceProvider) InDomain(arg0 map[string]models.ValueType, arg1 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InDomain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InDomain indicates an expected call of InDomain
func (mr *MockCloudServiceProviderMockRecorder) InDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InDomain", reflect.TypeOf((*MockCloudServiceProvider)(nil).InDomain), arg0, arg1)
}

// LocalInstanceDeviceName mocks base method
func (m *MockCloudServiceProvider) LocalInstanceDeviceName(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalInstanceDeviceName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalInstanceDeviceName indicates an expected call of LocalInstanceDeviceName
func (mr *MockCloudServiceProviderMockRecorder) LocalInstanceDeviceName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalInstanceDeviceName", reflect.TypeOf((*MockCloudServiceProvider)(nil).LocalInstanceDeviceName), arg0, arg1)
}

// LocalInstanceMetadata mocks base method
func (m *MockCloudServiceProvider) LocalInstanceMetadata() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalInstanceMetadata")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalInstanceMetadata indicates an expected call of LocalInstanceMetadata
func (mr *MockCloudServiceProviderMockRecorder) LocalInstanceMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalInstanceMetadata", reflect.TypeOf((*MockCloudServiceProvider)(nil).LocalInstanceMetadata))
}

// LocalInstanceMetadataSetTimeout mocks base method
func (m *MockCloudServiceProvider) LocalInstanceMetadataSetTimeout(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LocalInstanceMetadataSetTimeout", arg0)
}

// LocalInstanceMetadataSetTimeout indicates an expected call of LocalInstanceMetadataSetTimeout
func (mr *MockCloudServiceProviderMockRecorder) LocalInstanceMetadataSetTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalInstanceMetadataSetTimeout", reflect.TypeOf((*MockCloudServiceProvider)(nil).LocalInstanceMetadataSetTimeout), arg0)
}

// ProtectionStoreUploadTransferRate mocks base method
func (m *MockCloudServiceProvider) ProtectionStoreUploadTransferRate() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtectionStoreUploadTransferRate")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ProtectionStoreUploadTransferRate indicates an expected call of ProtectionStoreUploadTransferRate
func (mr *MockCloudServiceProviderMockRecorder) ProtectionStoreUploadTransferRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectionStoreUploadTransferRate", reflect.TypeOf((*MockCloudServiceProvider)(nil).ProtectionStoreUploadTransferRate))
}

// SanitizedAttributes mocks base method
func (m *MockCloudServiceProvider) SanitizedAttributes(arg0 map[string]models.ValueType) (map[string]models.ValueType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SanitizedAttributes", arg0)
	ret0, _ := ret[0].(map[string]models.ValueType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SanitizedAttributes indicates an expected call of SanitizedAttributes
func (mr *MockCloudServiceProviderMockRecorder) SanitizedAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SanitizedAttributes", reflect.TypeOf((*MockCloudServiceProvider)(nil).SanitizedAttributes), arg0)
}

// SetDebugLogger mocks base method
func (m *MockCloudServiceProvider) SetDebugLogger(arg0 *go_logging.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDebugLogger", arg0)
}

// SetDebugLogger indicates an expected call of SetDebugLogger
func (mr *MockCloudServiceProviderMockRecorder) SetDebugLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDebugLogger", reflect.TypeOf((*MockCloudServiceProvider)(nil).SetDebugLogger), arg0)
}

// SupportedCspStorageTypes mocks base method
func (m *MockCloudServiceProvider) SupportedCspStorageTypes() []*models.CSPStorageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedCspStorageTypes")
	ret0, _ := ret[0].([]*models.CSPStorageType)
	return ret0
}

// SupportedCspStorageTypes indicates an expected call of SupportedCspStorageTypes
func (mr *MockCloudServiceProviderMockRecorder) SupportedCspStorageTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedCspStorageTypes", reflect.TypeOf((*MockCloudServiceProvider)(nil).SupportedCspStorageTypes))
}

// SupportedStorageFormulas mocks base method
func (m *MockCloudServiceProvider) SupportedStorageFormulas() []*models.StorageFormula {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedStorageFormulas")
	ret0, _ := ret[0].([]*models.StorageFormula)
	return ret0
}

// SupportedStorageFormulas indicates an expected call of SupportedStorageFormulas
func (mr *MockCloudServiceProviderMockRecorder) SupportedStorageFormulas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedStorageFormulas", reflect.TypeOf((*MockCloudServiceProvider)(nil).SupportedStorageFormulas))
}

// Type mocks base method
func (m *MockCloudServiceProvider) Type() models.CspDomainTypeMutable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(models.CspDomainTypeMutable)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockCloudServiceProviderMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockCloudServiceProvider)(nil).Type))
}

// ValidateCredential mocks base method
func (m *MockCloudServiceProvider) ValidateCredential(arg0 models.CspDomainTypeMutable, arg1 map[string]models.ValueType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCredential", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCredential indicates an expected call of ValidateCredential
func (mr *MockCloudServiceProviderMockRecorder) ValidateCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCredential", reflect.TypeOf((*MockCloudServiceProvider)(nil).ValidateCredential), arg0, arg1)
}

// MockDomainClient is a mock of DomainClient interface
type MockDomainClient struct {
	ctrl     *gomock.Controller
	recorder *MockDomainClientMockRecorder
}

// MockDomainClientMockRecorder is the mock recorder for MockDomainClient
type MockDomainClientMockRecorder struct {
	mock *MockDomainClient
}

// NewMockDomainClient creates a new mock instance
func NewMockDomainClient(ctrl *gomock.Controller) *MockDomainClient {
	mock := &MockDomainClient{ctrl: ctrl}
	mock.recorder = &MockDomainClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDomainClient) EXPECT() *MockDomainClientMockRecorder {
	return m.recorder
}

// CreateProtectionStore mocks base method
func (m *MockDomainClient) CreateProtectionStore(arg0 context.Context) (map[string]models.ValueType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProtectionStore", arg0)
	ret0, _ := ret[0].(map[string]models.ValueType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProtectionStore indicates an expected call of CreateProtectionStore
func (mr *MockDomainClientMockRecorder) CreateProtectionStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProtectionStore", reflect.TypeOf((*MockDomainClient)(nil).CreateProtectionStore), arg0)
}

// ID mocks base method
func (m *MockDomainClient) ID() models.ObjID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(models.ObjID)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockDomainClientMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDomainClient)(nil).ID))
}

// LocalEphemeralDevices mocks base method
func (m *MockDomainClient) LocalEphemeralDevices() ([]*csp.EphemeralDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalEphemeralDevices")
	ret0, _ := ret[0].([]*csp.EphemeralDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalEphemeralDevices indicates an expected call of LocalEphemeralDevices
func (mr *MockDomainClientMockRecorder) LocalEphemeralDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalEphemeralDevices", reflect.TypeOf((*MockDomainClient)(nil).LocalEphemeralDevices))
}

// SetTimeout mocks base method
func (m *MockDomainClient) SetTimeout(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", arg0)
}

// SetTimeout indicates an expected call of SetTimeout
func (mr *MockDomainClientMockRecorder) SetTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockDomainClient)(nil).SetTimeout), arg0)
}

// Type mocks base method
func (m *MockDomainClient) Type() models.CspDomainTypeMutable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(models.CspDomainTypeMutable)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockDomainClientMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockDomainClient)(nil).Type))
}

// Validate mocks base method
func (m *MockDomainClient) Validate(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockDomainClientMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockDomainClient)(nil).Validate), arg0)
}

// VolumeAttach mocks base method
func (m *MockDomainClient) VolumeAttach(arg0 context.Context, arg1 *csp.VolumeAttachArgs) (*csp.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeAttach", arg0, arg1)
	ret0, _ := ret[0].(*csp.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeAttach indicates an expected call of VolumeAttach
func (mr *MockDomainClientMockRecorder) VolumeAttach(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeAttach", reflect.TypeOf((*MockDomainClient)(nil).VolumeAttach), arg0, arg1)
}

// VolumeCreate mocks base method
func (m *MockDomainClient) VolumeCreate(arg0 context.Context, arg1 *csp.VolumeCreateArgs) (*csp.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCreate", arg0, arg1)
	ret0, _ := ret[0].(*csp.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeCreate indicates an expected call of VolumeCreate
func (mr *MockDomainClientMockRecorder) VolumeCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCreate", reflect.TypeOf((*MockDomainClient)(nil).VolumeCreate), arg0, arg1)
}

// VolumeDelete mocks base method
func (m *MockDomainClient) VolumeDelete(arg0 context.Context, arg1 *csp.VolumeDeleteArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeDelete indicates an expected call of VolumeDelete
func (mr *MockDomainClientMockRecorder) VolumeDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDelete", reflect.TypeOf((*MockDomainClient)(nil).VolumeDelete), arg0, arg1)
}

// VolumeDetach mocks base method
func (m *MockDomainClient) VolumeDetach(arg0 context.Context, arg1 *csp.VolumeDetachArgs) (*csp.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeDetach", arg0, arg1)
	ret0, _ := ret[0].(*csp.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeDetach indicates an expected call of VolumeDetach
func (mr *MockDomainClientMockRecorder) VolumeDetach(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDetach", reflect.TypeOf((*MockDomainClient)(nil).VolumeDetach), arg0, arg1)
}

// VolumeFetch mocks base method
func (m *MockDomainClient) VolumeFetch(arg0 context.Context, arg1 *csp.VolumeFetchArgs) (*csp.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeFetch", arg0, arg1)
	ret0, _ := ret[0].(*csp.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeFetch indicates an expected call of VolumeFetch
func (mr *MockDomainClientMockRecorder) VolumeFetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeFetch", reflect.TypeOf((*MockDomainClient)(nil).VolumeFetch), arg0, arg1)
}

// VolumeList mocks base method
func (m *MockDomainClient) VolumeList(arg0 context.Context, arg1 *csp.VolumeListArgs) ([]*csp.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeList", arg0, arg1)
	ret0, _ := ret[0].([]*csp.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeList indicates an expected call of VolumeList
func (mr *MockDomainClientMockRecorder) VolumeList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeList", reflect.TypeOf((*MockDomainClient)(nil).VolumeList), arg0, arg1)
}

// VolumeSize mocks base method
func (m *MockDomainClient) VolumeSize(arg0 context.Context, arg1 models.CspStorageType, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSize", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSize indicates an expected call of VolumeSize
func (mr *MockDomainClientMockRecorder) VolumeSize(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSize", reflect.TypeOf((*MockDomainClient)(nil).VolumeSize), arg0, arg1, arg2)
}

// VolumeTagsDelete mocks base method
func (m *MockDomainClient) VolumeTagsDelete(arg0 context.Context, arg1 *csp.VolumeTagArgs) (*csp.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeTagsDelete", arg0, arg1)
	ret0, _ := ret[0].(*csp.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeTagsDelete indicates an expected call of VolumeTagsDelete
func (mr *MockDomainClientMockRecorder) VolumeTagsDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeTagsDelete", reflect.TypeOf((*MockDomainClient)(nil).VolumeTagsDelete), arg0, arg1)
}

// VolumeTagsSet mocks base method
func (m *MockDomainClient) VolumeTagsSet(arg0 context.Context, arg1 *csp.VolumeTagArgs) (*csp.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeTagsSet", arg0, arg1)
	ret0, _ := ret[0].(*csp.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeTagsSet indicates an expected call of VolumeTagsSet
func (mr *MockDomainClientMockRecorder) VolumeTagsSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeTagsSet", reflect.TypeOf((*MockDomainClient)(nil).VolumeTagsSet), arg0, arg1)
}
