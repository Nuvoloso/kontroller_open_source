// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nuvoloso/kontroller/pkg/mgmtclient (interfaces: API,AccountClient,ApplicationGroupClient,AuditLogClient,AuthenticationAPI,ClusterClient,ConsistencyGroupClient,CSPCredentialClient,CSPDomainClient,CSPStorageTypeClient,DebugClient,MetricsClient,NodeClient,PoolClient,ProtectionDomainClient,RoleClient,ServicePlanAllocationClient,ServicePlanClient,SLOClient,SnapshotClient,StorageClient,StorageFormulaClient,StorageRequestClient,SystemClient,TaskClient,UserClient,VolumeSeriesClient,VolumeSeriesRequestClient,WatchersClient)

// Package mock is a generated GoMock package.
package mock

import (
	account "github.com/Nuvoloso/kontroller/pkg/autogen/client/account"
	application_group "github.com/Nuvoloso/kontroller/pkg/autogen/client/application_group"
	audit_log "github.com/Nuvoloso/kontroller/pkg/autogen/client/audit_log"
	cluster "github.com/Nuvoloso/kontroller/pkg/autogen/client/cluster"
	consistency_group "github.com/Nuvoloso/kontroller/pkg/autogen/client/consistency_group"
	csp_credential "github.com/Nuvoloso/kontroller/pkg/autogen/client/csp_credential"
	csp_domain "github.com/Nuvoloso/kontroller/pkg/autogen/client/csp_domain"
	csp_storage_type "github.com/Nuvoloso/kontroller/pkg/autogen/client/csp_storage_type"
	metrics "github.com/Nuvoloso/kontroller/pkg/autogen/client/metrics"
	node "github.com/Nuvoloso/kontroller/pkg/autogen/client/node"
	pool "github.com/Nuvoloso/kontroller/pkg/autogen/client/pool"
	protection_domain "github.com/Nuvoloso/kontroller/pkg/autogen/client/protection_domain"
	role "github.com/Nuvoloso/kontroller/pkg/autogen/client/role"
	service_debug "github.com/Nuvoloso/kontroller/pkg/autogen/client/service_debug"
	service_plan "github.com/Nuvoloso/kontroller/pkg/autogen/client/service_plan"
	service_plan_allocation "github.com/Nuvoloso/kontroller/pkg/autogen/client/service_plan_allocation"
	slo "github.com/Nuvoloso/kontroller/pkg/autogen/client/slo"
	snapshot "github.com/Nuvoloso/kontroller/pkg/autogen/client/snapshot"
	storage "github.com/Nuvoloso/kontroller/pkg/autogen/client/storage"
	storage_formula "github.com/Nuvoloso/kontroller/pkg/autogen/client/storage_formula"
	storage_request "github.com/Nuvoloso/kontroller/pkg/autogen/client/storage_request"
	system "github.com/Nuvoloso/kontroller/pkg/autogen/client/system"
	task "github.com/Nuvoloso/kontroller/pkg/autogen/client/task"
	user "github.com/Nuvoloso/kontroller/pkg/autogen/client/user"
	volume_series "github.com/Nuvoloso/kontroller/pkg/autogen/client/volume_series"
	volume_series_request "github.com/Nuvoloso/kontroller/pkg/autogen/client/volume_series_request"
	watchers "github.com/Nuvoloso/kontroller/pkg/autogen/client/watchers"
	mgmtclient "github.com/Nuvoloso/kontroller/pkg/mgmtclient"
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Account mocks base method
func (m *MockAPI) Account() mgmtclient.AccountClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(mgmtclient.AccountClient)
	return ret0
}

// Account indicates an expected call of Account
func (mr *MockAPIMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockAPI)(nil).Account))
}

// ApplicationGroup mocks base method
func (m *MockAPI) ApplicationGroup() mgmtclient.ApplicationGroupClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationGroup")
	ret0, _ := ret[0].(mgmtclient.ApplicationGroupClient)
	return ret0
}

// ApplicationGroup indicates an expected call of ApplicationGroup
func (mr *MockAPIMockRecorder) ApplicationGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationGroup", reflect.TypeOf((*MockAPI)(nil).ApplicationGroup))
}

// AuditLog mocks base method
func (m *MockAPI) AuditLog() mgmtclient.AuditLogClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuditLog")
	ret0, _ := ret[0].(mgmtclient.AuditLogClient)
	return ret0
}

// AuditLog indicates an expected call of AuditLog
func (mr *MockAPIMockRecorder) AuditLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditLog", reflect.TypeOf((*MockAPI)(nil).AuditLog))
}

// Authentication mocks base method
func (m *MockAPI) Authentication() mgmtclient.AuthenticationAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authentication")
	ret0, _ := ret[0].(mgmtclient.AuthenticationAPI)
	return ret0
}

// Authentication indicates an expected call of Authentication
func (mr *MockAPIMockRecorder) Authentication() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authentication", reflect.TypeOf((*MockAPI)(nil).Authentication))
}

// Cluster mocks base method
func (m *MockAPI) Cluster() mgmtclient.ClusterClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(mgmtclient.ClusterClient)
	return ret0
}

// Cluster indicates an expected call of Cluster
func (mr *MockAPIMockRecorder) Cluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockAPI)(nil).Cluster))
}

// ConsistencyGroup mocks base method
func (m *MockAPI) ConsistencyGroup() mgmtclient.ConsistencyGroupClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsistencyGroup")
	ret0, _ := ret[0].(mgmtclient.ConsistencyGroupClient)
	return ret0
}

// ConsistencyGroup indicates an expected call of ConsistencyGroup
func (mr *MockAPIMockRecorder) ConsistencyGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsistencyGroup", reflect.TypeOf((*MockAPI)(nil).ConsistencyGroup))
}

// CspCredential mocks base method
func (m *MockAPI) CspCredential() mgmtclient.CSPCredentialClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspCredential")
	ret0, _ := ret[0].(mgmtclient.CSPCredentialClient)
	return ret0
}

// CspCredential indicates an expected call of CspCredential
func (mr *MockAPIMockRecorder) CspCredential() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspCredential", reflect.TypeOf((*MockAPI)(nil).CspCredential))
}

// CspDomain mocks base method
func (m *MockAPI) CspDomain() mgmtclient.CSPDomainClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspDomain")
	ret0, _ := ret[0].(mgmtclient.CSPDomainClient)
	return ret0
}

// CspDomain indicates an expected call of CspDomain
func (mr *MockAPIMockRecorder) CspDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspDomain", reflect.TypeOf((*MockAPI)(nil).CspDomain))
}

// CspStorageType mocks base method
func (m *MockAPI) CspStorageType() mgmtclient.CSPStorageTypeClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspStorageType")
	ret0, _ := ret[0].(mgmtclient.CSPStorageTypeClient)
	return ret0
}

// CspStorageType indicates an expected call of CspStorageType
func (mr *MockAPIMockRecorder) CspStorageType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspStorageType", reflect.TypeOf((*MockAPI)(nil).CspStorageType))
}

// Metrics mocks base method
func (m *MockAPI) Metrics() mgmtclient.MetricsClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metrics")
	ret0, _ := ret[0].(mgmtclient.MetricsClient)
	return ret0
}

// Metrics indicates an expected call of Metrics
func (mr *MockAPIMockRecorder) Metrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockAPI)(nil).Metrics))
}

// Node mocks base method
func (m *MockAPI) Node() mgmtclient.NodeClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node")
	ret0, _ := ret[0].(mgmtclient.NodeClient)
	return ret0
}

// Node indicates an expected call of Node
func (mr *MockAPIMockRecorder) Node() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockAPI)(nil).Node))
}

// Pool mocks base method
func (m *MockAPI) Pool() mgmtclient.PoolClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pool")
	ret0, _ := ret[0].(mgmtclient.PoolClient)
	return ret0
}

// Pool indicates an expected call of Pool
func (mr *MockAPIMockRecorder) Pool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pool", reflect.TypeOf((*MockAPI)(nil).Pool))
}

// ProtectionDomain mocks base method
func (m *MockAPI) ProtectionDomain() mgmtclient.ProtectionDomainClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtectionDomain")
	ret0, _ := ret[0].(mgmtclient.ProtectionDomainClient)
	return ret0
}

// ProtectionDomain indicates an expected call of ProtectionDomain
func (mr *MockAPIMockRecorder) ProtectionDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectionDomain", reflect.TypeOf((*MockAPI)(nil).ProtectionDomain))
}

// Role mocks base method
func (m *MockAPI) Role() mgmtclient.RoleClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Role")
	ret0, _ := ret[0].(mgmtclient.RoleClient)
	return ret0
}

// Role indicates an expected call of Role
func (mr *MockAPIMockRecorder) Role() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Role", reflect.TypeOf((*MockAPI)(nil).Role))
}

// ServiceDebug mocks base method
func (m *MockAPI) ServiceDebug() mgmtclient.DebugClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceDebug")
	ret0, _ := ret[0].(mgmtclient.DebugClient)
	return ret0
}

// ServiceDebug indicates an expected call of ServiceDebug
func (mr *MockAPIMockRecorder) ServiceDebug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceDebug", reflect.TypeOf((*MockAPI)(nil).ServiceDebug))
}

// ServicePlan mocks base method
func (m *MockAPI) ServicePlan() mgmtclient.ServicePlanClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlan")
	ret0, _ := ret[0].(mgmtclient.ServicePlanClient)
	return ret0
}

// ServicePlan indicates an expected call of ServicePlan
func (mr *MockAPIMockRecorder) ServicePlan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlan", reflect.TypeOf((*MockAPI)(nil).ServicePlan))
}

// ServicePlanAllocation mocks base method
func (m *MockAPI) ServicePlanAllocation() mgmtclient.ServicePlanAllocationClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanAllocation")
	ret0, _ := ret[0].(mgmtclient.ServicePlanAllocationClient)
	return ret0
}

// ServicePlanAllocation indicates an expected call of ServicePlanAllocation
func (mr *MockAPIMockRecorder) ServicePlanAllocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanAllocation", reflect.TypeOf((*MockAPI)(nil).ServicePlanAllocation))
}

// Slo mocks base method
func (m *MockAPI) Slo() mgmtclient.SLOClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slo")
	ret0, _ := ret[0].(mgmtclient.SLOClient)
	return ret0
}

// Slo indicates an expected call of Slo
func (mr *MockAPIMockRecorder) Slo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slo", reflect.TypeOf((*MockAPI)(nil).Slo))
}

// Snapshot mocks base method
func (m *MockAPI) Snapshot() mgmtclient.SnapshotClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(mgmtclient.SnapshotClient)
	return ret0
}

// Snapshot indicates an expected call of Snapshot
func (mr *MockAPIMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockAPI)(nil).Snapshot))
}

// Storage mocks base method
func (m *MockAPI) Storage() mgmtclient.StorageClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage")
	ret0, _ := ret[0].(mgmtclient.StorageClient)
	return ret0
}

// Storage indicates an expected call of Storage
func (mr *MockAPIMockRecorder) Storage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockAPI)(nil).Storage))
}

// StorageFormula mocks base method
func (m *MockAPI) StorageFormula() mgmtclient.StorageFormulaClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageFormula")
	ret0, _ := ret[0].(mgmtclient.StorageFormulaClient)
	return ret0
}

// StorageFormula indicates an expected call of StorageFormula
func (mr *MockAPIMockRecorder) StorageFormula() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageFormula", reflect.TypeOf((*MockAPI)(nil).StorageFormula))
}

// StorageRequest mocks base method
func (m *MockAPI) StorageRequest() mgmtclient.StorageRequestClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageRequest")
	ret0, _ := ret[0].(mgmtclient.StorageRequestClient)
	return ret0
}

// StorageRequest indicates an expected call of StorageRequest
func (mr *MockAPIMockRecorder) StorageRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageRequest", reflect.TypeOf((*MockAPI)(nil).StorageRequest))
}

// System mocks base method
func (m *MockAPI) System() mgmtclient.SystemClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "System")
	ret0, _ := ret[0].(mgmtclient.SystemClient)
	return ret0
}

// System indicates an expected call of System
func (mr *MockAPIMockRecorder) System() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "System", reflect.TypeOf((*MockAPI)(nil).System))
}

// Task mocks base method
func (m *MockAPI) Task() mgmtclient.TaskClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Task")
	ret0, _ := ret[0].(mgmtclient.TaskClient)
	return ret0
}

// Task indicates an expected call of Task
func (mr *MockAPIMockRecorder) Task() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Task", reflect.TypeOf((*MockAPI)(nil).Task))
}

// Transport mocks base method
func (m *MockAPI) Transport() runtime.ClientTransport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transport")
	ret0, _ := ret[0].(runtime.ClientTransport)
	return ret0
}

// Transport indicates an expected call of Transport
func (mr *MockAPIMockRecorder) Transport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transport", reflect.TypeOf((*MockAPI)(nil).Transport))
}

// User mocks base method
func (m *MockAPI) User() mgmtclient.UserClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(mgmtclient.UserClient)
	return ret0
}

// User indicates an expected call of User
func (mr *MockAPIMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockAPI)(nil).User))
}

// VolumeSeries mocks base method
func (m *MockAPI) VolumeSeries() mgmtclient.VolumeSeriesClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeries")
	ret0, _ := ret[0].(mgmtclient.VolumeSeriesClient)
	return ret0
}

// VolumeSeries indicates an expected call of VolumeSeries
func (mr *MockAPIMockRecorder) VolumeSeries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeries", reflect.TypeOf((*MockAPI)(nil).VolumeSeries))
}

// VolumeSeriesRequest mocks base method
func (m *MockAPI) VolumeSeriesRequest() mgmtclient.VolumeSeriesRequestClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesRequest")
	ret0, _ := ret[0].(mgmtclient.VolumeSeriesRequestClient)
	return ret0
}

// VolumeSeriesRequest indicates an expected call of VolumeSeriesRequest
func (mr *MockAPIMockRecorder) VolumeSeriesRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesRequest", reflect.TypeOf((*MockAPI)(nil).VolumeSeriesRequest))
}

// Watchers mocks base method
func (m *MockAPI) Watchers() mgmtclient.WatchersClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watchers")
	ret0, _ := ret[0].(mgmtclient.WatchersClient)
	return ret0
}

// Watchers indicates an expected call of Watchers
func (mr *MockAPIMockRecorder) Watchers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watchers", reflect.TypeOf((*MockAPI)(nil).Watchers))
}

// MockAccountClient is a mock of AccountClient interface
type MockAccountClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountClientMockRecorder
}

// MockAccountClientMockRecorder is the mock recorder for MockAccountClient
type MockAccountClientMockRecorder struct {
	mock *MockAccountClient
}

// NewMockAccountClient creates a new mock instance
func NewMockAccountClient(ctrl *gomock.Controller) *MockAccountClient {
	mock := &MockAccountClient{ctrl: ctrl}
	mock.recorder = &MockAccountClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountClient) EXPECT() *MockAccountClientMockRecorder {
	return m.recorder
}

// AccountCreate mocks base method
func (m *MockAccountClient) AccountCreate(arg0 *account.AccountCreateParams) (*account.AccountCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountCreate", arg0)
	ret0, _ := ret[0].(*account.AccountCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountCreate indicates an expected call of AccountCreate
func (mr *MockAccountClientMockRecorder) AccountCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountCreate", reflect.TypeOf((*MockAccountClient)(nil).AccountCreate), arg0)
}

// AccountDelete mocks base method
func (m *MockAccountClient) AccountDelete(arg0 *account.AccountDeleteParams) (*account.AccountDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountDelete", arg0)
	ret0, _ := ret[0].(*account.AccountDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountDelete indicates an expected call of AccountDelete
func (mr *MockAccountClientMockRecorder) AccountDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountDelete", reflect.TypeOf((*MockAccountClient)(nil).AccountDelete), arg0)
}

// AccountFetch mocks base method
func (m *MockAccountClient) AccountFetch(arg0 *account.AccountFetchParams) (*account.AccountFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountFetch", arg0)
	ret0, _ := ret[0].(*account.AccountFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountFetch indicates an expected call of AccountFetch
func (mr *MockAccountClientMockRecorder) AccountFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountFetch", reflect.TypeOf((*MockAccountClient)(nil).AccountFetch), arg0)
}

// AccountList mocks base method
func (m *MockAccountClient) AccountList(arg0 *account.AccountListParams) (*account.AccountListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountList", arg0)
	ret0, _ := ret[0].(*account.AccountListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountList indicates an expected call of AccountList
func (mr *MockAccountClientMockRecorder) AccountList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountList", reflect.TypeOf((*MockAccountClient)(nil).AccountList), arg0)
}

// AccountProtectionDomainClear mocks base method
func (m *MockAccountClient) AccountProtectionDomainClear(arg0 *account.AccountProtectionDomainClearParams) (*account.AccountProtectionDomainClearOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountProtectionDomainClear", arg0)
	ret0, _ := ret[0].(*account.AccountProtectionDomainClearOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountProtectionDomainClear indicates an expected call of AccountProtectionDomainClear
func (mr *MockAccountClientMockRecorder) AccountProtectionDomainClear(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountProtectionDomainClear", reflect.TypeOf((*MockAccountClient)(nil).AccountProtectionDomainClear), arg0)
}

// AccountProtectionDomainSet mocks base method
func (m *MockAccountClient) AccountProtectionDomainSet(arg0 *account.AccountProtectionDomainSetParams) (*account.AccountProtectionDomainSetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountProtectionDomainSet", arg0)
	ret0, _ := ret[0].(*account.AccountProtectionDomainSetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountProtectionDomainSet indicates an expected call of AccountProtectionDomainSet
func (mr *MockAccountClientMockRecorder) AccountProtectionDomainSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountProtectionDomainSet", reflect.TypeOf((*MockAccountClient)(nil).AccountProtectionDomainSet), arg0)
}

// AccountSecretReset mocks base method
func (m *MockAccountClient) AccountSecretReset(arg0 *account.AccountSecretResetParams) (*account.AccountSecretResetNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountSecretReset", arg0)
	ret0, _ := ret[0].(*account.AccountSecretResetNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountSecretReset indicates an expected call of AccountSecretReset
func (mr *MockAccountClientMockRecorder) AccountSecretReset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountSecretReset", reflect.TypeOf((*MockAccountClient)(nil).AccountSecretReset), arg0)
}

// AccountSecretRetrieve mocks base method
func (m *MockAccountClient) AccountSecretRetrieve(arg0 *account.AccountSecretRetrieveParams) (*account.AccountSecretRetrieveOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountSecretRetrieve", arg0)
	ret0, _ := ret[0].(*account.AccountSecretRetrieveOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountSecretRetrieve indicates an expected call of AccountSecretRetrieve
func (mr *MockAccountClientMockRecorder) AccountSecretRetrieve(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountSecretRetrieve", reflect.TypeOf((*MockAccountClient)(nil).AccountSecretRetrieve), arg0)
}

// AccountUpdate mocks base method
func (m *MockAccountClient) AccountUpdate(arg0 *account.AccountUpdateParams) (*account.AccountUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountUpdate", arg0)
	ret0, _ := ret[0].(*account.AccountUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountUpdate indicates an expected call of AccountUpdate
func (mr *MockAccountClientMockRecorder) AccountUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountUpdate", reflect.TypeOf((*MockAccountClient)(nil).AccountUpdate), arg0)
}

// MockApplicationGroupClient is a mock of ApplicationGroupClient interface
type MockApplicationGroupClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationGroupClientMockRecorder
}

// MockApplicationGroupClientMockRecorder is the mock recorder for MockApplicationGroupClient
type MockApplicationGroupClientMockRecorder struct {
	mock *MockApplicationGroupClient
}

// NewMockApplicationGroupClient creates a new mock instance
func NewMockApplicationGroupClient(ctrl *gomock.Controller) *MockApplicationGroupClient {
	mock := &MockApplicationGroupClient{ctrl: ctrl}
	mock.recorder = &MockApplicationGroupClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationGroupClient) EXPECT() *MockApplicationGroupClientMockRecorder {
	return m.recorder
}

// ApplicationGroupCreate mocks base method
func (m *MockApplicationGroupClient) ApplicationGroupCreate(arg0 *application_group.ApplicationGroupCreateParams) (*application_group.ApplicationGroupCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationGroupCreate", arg0)
	ret0, _ := ret[0].(*application_group.ApplicationGroupCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationGroupCreate indicates an expected call of ApplicationGroupCreate
func (mr *MockApplicationGroupClientMockRecorder) ApplicationGroupCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationGroupCreate", reflect.TypeOf((*MockApplicationGroupClient)(nil).ApplicationGroupCreate), arg0)
}

// ApplicationGroupDelete mocks base method
func (m *MockApplicationGroupClient) ApplicationGroupDelete(arg0 *application_group.ApplicationGroupDeleteParams) (*application_group.ApplicationGroupDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationGroupDelete", arg0)
	ret0, _ := ret[0].(*application_group.ApplicationGroupDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationGroupDelete indicates an expected call of ApplicationGroupDelete
func (mr *MockApplicationGroupClientMockRecorder) ApplicationGroupDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationGroupDelete", reflect.TypeOf((*MockApplicationGroupClient)(nil).ApplicationGroupDelete), arg0)
}

// ApplicationGroupFetch mocks base method
func (m *MockApplicationGroupClient) ApplicationGroupFetch(arg0 *application_group.ApplicationGroupFetchParams) (*application_group.ApplicationGroupFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationGroupFetch", arg0)
	ret0, _ := ret[0].(*application_group.ApplicationGroupFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationGroupFetch indicates an expected call of ApplicationGroupFetch
func (mr *MockApplicationGroupClientMockRecorder) ApplicationGroupFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationGroupFetch", reflect.TypeOf((*MockApplicationGroupClient)(nil).ApplicationGroupFetch), arg0)
}

// ApplicationGroupList mocks base method
func (m *MockApplicationGroupClient) ApplicationGroupList(arg0 *application_group.ApplicationGroupListParams) (*application_group.ApplicationGroupListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationGroupList", arg0)
	ret0, _ := ret[0].(*application_group.ApplicationGroupListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationGroupList indicates an expected call of ApplicationGroupList
func (mr *MockApplicationGroupClientMockRecorder) ApplicationGroupList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationGroupList", reflect.TypeOf((*MockApplicationGroupClient)(nil).ApplicationGroupList), arg0)
}

// ApplicationGroupUpdate mocks base method
func (m *MockApplicationGroupClient) ApplicationGroupUpdate(arg0 *application_group.ApplicationGroupUpdateParams) (*application_group.ApplicationGroupUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationGroupUpdate", arg0)
	ret0, _ := ret[0].(*application_group.ApplicationGroupUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationGroupUpdate indicates an expected call of ApplicationGroupUpdate
func (mr *MockApplicationGroupClientMockRecorder) ApplicationGroupUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationGroupUpdate", reflect.TypeOf((*MockApplicationGroupClient)(nil).ApplicationGroupUpdate), arg0)
}

// MockAuditLogClient is a mock of AuditLogClient interface
type MockAuditLogClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuditLogClientMockRecorder
}

// MockAuditLogClientMockRecorder is the mock recorder for MockAuditLogClient
type MockAuditLogClientMockRecorder struct {
	mock *MockAuditLogClient
}

// NewMockAuditLogClient creates a new mock instance
func NewMockAuditLogClient(ctrl *gomock.Controller) *MockAuditLogClient {
	mock := &MockAuditLogClient{ctrl: ctrl}
	mock.recorder = &MockAuditLogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuditLogClient) EXPECT() *MockAuditLogClientMockRecorder {
	return m.recorder
}

// AuditLogCreate mocks base method
func (m *MockAuditLogClient) AuditLogCreate(arg0 *audit_log.AuditLogCreateParams) (*audit_log.AuditLogCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuditLogCreate", arg0)
	ret0, _ := ret[0].(*audit_log.AuditLogCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuditLogCreate indicates an expected call of AuditLogCreate
func (mr *MockAuditLogClientMockRecorder) AuditLogCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditLogCreate", reflect.TypeOf((*MockAuditLogClient)(nil).AuditLogCreate), arg0)
}

// AuditLogList mocks base method
func (m *MockAuditLogClient) AuditLogList(arg0 *audit_log.AuditLogListParams) (*audit_log.AuditLogListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuditLogList", arg0)
	ret0, _ := ret[0].(*audit_log.AuditLogListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuditLogList indicates an expected call of AuditLogList
func (mr *MockAuditLogClientMockRecorder) AuditLogList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditLogList", reflect.TypeOf((*MockAuditLogClient)(nil).AuditLogList), arg0)
}

// MockAuthenticationAPI is a mock of AuthenticationAPI interface
type MockAuthenticationAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationAPIMockRecorder
}

// MockAuthenticationAPIMockRecorder is the mock recorder for MockAuthenticationAPI
type MockAuthenticationAPIMockRecorder struct {
	mock *MockAuthenticationAPI
}

// NewMockAuthenticationAPI creates a new mock instance
func NewMockAuthenticationAPI(ctrl *gomock.Controller) *MockAuthenticationAPI {
	mock := &MockAuthenticationAPI{ctrl: ctrl}
	mock.recorder = &MockAuthenticationAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthenticationAPI) EXPECT() *MockAuthenticationAPIMockRecorder {
	return m.recorder
}

// Authenticate mocks base method
func (m *MockAuthenticationAPI) Authenticate(arg0, arg1 string) (*mgmtclient.AuthResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1)
	ret0, _ := ret[0].(*mgmtclient.AuthResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate
func (mr *MockAuthenticationAPIMockRecorder) Authenticate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationAPI)(nil).Authenticate), arg0, arg1)
}

// GetAuthToken mocks base method
func (m *MockAuthenticationAPI) GetAuthToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthToken indicates an expected call of GetAuthToken
func (mr *MockAuthenticationAPIMockRecorder) GetAuthToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken", reflect.TypeOf((*MockAuthenticationAPI)(nil).GetAuthToken))
}

// SetAuthToken mocks base method
func (m *MockAuthenticationAPI) SetAuthToken(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAuthToken", arg0)
}

// SetAuthToken indicates an expected call of SetAuthToken
func (mr *MockAuthenticationAPIMockRecorder) SetAuthToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthToken", reflect.TypeOf((*MockAuthenticationAPI)(nil).SetAuthToken), arg0)
}

// SetContextAccount mocks base method
func (m *MockAuthenticationAPI) SetContextAccount(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContextAccount", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetContextAccount indicates an expected call of SetContextAccount
func (mr *MockAuthenticationAPIMockRecorder) SetContextAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContextAccount", reflect.TypeOf((*MockAuthenticationAPI)(nil).SetContextAccount), arg0, arg1)
}

// Validate mocks base method
func (m *MockAuthenticationAPI) Validate(arg0 bool) (*mgmtclient.AuthResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(*mgmtclient.AuthResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockAuthenticationAPIMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockAuthenticationAPI)(nil).Validate), arg0)
}

// MockClusterClient is a mock of ClusterClient interface
type MockClusterClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterClientMockRecorder
}

// MockClusterClientMockRecorder is the mock recorder for MockClusterClient
type MockClusterClientMockRecorder struct {
	mock *MockClusterClient
}

// NewMockClusterClient creates a new mock instance
func NewMockClusterClient(ctrl *gomock.Controller) *MockClusterClient {
	mock := &MockClusterClient{ctrl: ctrl}
	mock.recorder = &MockClusterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterClient) EXPECT() *MockClusterClientMockRecorder {
	return m.recorder
}

// ClusterAccountSecretFetch mocks base method
func (m *MockClusterClient) ClusterAccountSecretFetch(arg0 *cluster.ClusterAccountSecretFetchParams) (*cluster.ClusterAccountSecretFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterAccountSecretFetch", arg0)
	ret0, _ := ret[0].(*cluster.ClusterAccountSecretFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterAccountSecretFetch indicates an expected call of ClusterAccountSecretFetch
func (mr *MockClusterClientMockRecorder) ClusterAccountSecretFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAccountSecretFetch", reflect.TypeOf((*MockClusterClient)(nil).ClusterAccountSecretFetch), arg0)
}

// ClusterCreate mocks base method
func (m *MockClusterClient) ClusterCreate(arg0 *cluster.ClusterCreateParams) (*cluster.ClusterCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterCreate", arg0)
	ret0, _ := ret[0].(*cluster.ClusterCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterCreate indicates an expected call of ClusterCreate
func (mr *MockClusterClientMockRecorder) ClusterCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCreate", reflect.TypeOf((*MockClusterClient)(nil).ClusterCreate), arg0)
}

// ClusterDelete mocks base method
func (m *MockClusterClient) ClusterDelete(arg0 *cluster.ClusterDeleteParams) (*cluster.ClusterDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterDelete", arg0)
	ret0, _ := ret[0].(*cluster.ClusterDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterDelete indicates an expected call of ClusterDelete
func (mr *MockClusterClientMockRecorder) ClusterDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDelete", reflect.TypeOf((*MockClusterClient)(nil).ClusterDelete), arg0)
}

// ClusterFetch mocks base method
func (m *MockClusterClient) ClusterFetch(arg0 *cluster.ClusterFetchParams) (*cluster.ClusterFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterFetch", arg0)
	ret0, _ := ret[0].(*cluster.ClusterFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterFetch indicates an expected call of ClusterFetch
func (mr *MockClusterClientMockRecorder) ClusterFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterFetch", reflect.TypeOf((*MockClusterClient)(nil).ClusterFetch), arg0)
}

// ClusterList mocks base method
func (m *MockClusterClient) ClusterList(arg0 *cluster.ClusterListParams) (*cluster.ClusterListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterList", arg0)
	ret0, _ := ret[0].(*cluster.ClusterListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterList indicates an expected call of ClusterList
func (mr *MockClusterClientMockRecorder) ClusterList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterList", reflect.TypeOf((*MockClusterClient)(nil).ClusterList), arg0)
}

// ClusterOrchestratorGetDeployment mocks base method
func (m *MockClusterClient) ClusterOrchestratorGetDeployment(arg0 *cluster.ClusterOrchestratorGetDeploymentParams) (*cluster.ClusterOrchestratorGetDeploymentOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterOrchestratorGetDeployment", arg0)
	ret0, _ := ret[0].(*cluster.ClusterOrchestratorGetDeploymentOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterOrchestratorGetDeployment indicates an expected call of ClusterOrchestratorGetDeployment
func (mr *MockClusterClientMockRecorder) ClusterOrchestratorGetDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterOrchestratorGetDeployment", reflect.TypeOf((*MockClusterClient)(nil).ClusterOrchestratorGetDeployment), arg0)
}

// ClusterUpdate mocks base method
func (m *MockClusterClient) ClusterUpdate(arg0 *cluster.ClusterUpdateParams) (*cluster.ClusterUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterUpdate", arg0)
	ret0, _ := ret[0].(*cluster.ClusterUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterUpdate indicates an expected call of ClusterUpdate
func (mr *MockClusterClientMockRecorder) ClusterUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterUpdate", reflect.TypeOf((*MockClusterClient)(nil).ClusterUpdate), arg0)
}

// MockConsistencyGroupClient is a mock of ConsistencyGroupClient interface
type MockConsistencyGroupClient struct {
	ctrl     *gomock.Controller
	recorder *MockConsistencyGroupClientMockRecorder
}

// MockConsistencyGroupClientMockRecorder is the mock recorder for MockConsistencyGroupClient
type MockConsistencyGroupClientMockRecorder struct {
	mock *MockConsistencyGroupClient
}

// NewMockConsistencyGroupClient creates a new mock instance
func NewMockConsistencyGroupClient(ctrl *gomock.Controller) *MockConsistencyGroupClient {
	mock := &MockConsistencyGroupClient{ctrl: ctrl}
	mock.recorder = &MockConsistencyGroupClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsistencyGroupClient) EXPECT() *MockConsistencyGroupClientMockRecorder {
	return m.recorder
}

// ConsistencyGroupCreate mocks base method
func (m *MockConsistencyGroupClient) ConsistencyGroupCreate(arg0 *consistency_group.ConsistencyGroupCreateParams) (*consistency_group.ConsistencyGroupCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsistencyGroupCreate", arg0)
	ret0, _ := ret[0].(*consistency_group.ConsistencyGroupCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsistencyGroupCreate indicates an expected call of ConsistencyGroupCreate
func (mr *MockConsistencyGroupClientMockRecorder) ConsistencyGroupCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsistencyGroupCreate", reflect.TypeOf((*MockConsistencyGroupClient)(nil).ConsistencyGroupCreate), arg0)
}

// ConsistencyGroupDelete mocks base method
func (m *MockConsistencyGroupClient) ConsistencyGroupDelete(arg0 *consistency_group.ConsistencyGroupDeleteParams) (*consistency_group.ConsistencyGroupDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsistencyGroupDelete", arg0)
	ret0, _ := ret[0].(*consistency_group.ConsistencyGroupDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsistencyGroupDelete indicates an expected call of ConsistencyGroupDelete
func (mr *MockConsistencyGroupClientMockRecorder) ConsistencyGroupDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsistencyGroupDelete", reflect.TypeOf((*MockConsistencyGroupClient)(nil).ConsistencyGroupDelete), arg0)
}

// ConsistencyGroupFetch mocks base method
func (m *MockConsistencyGroupClient) ConsistencyGroupFetch(arg0 *consistency_group.ConsistencyGroupFetchParams) (*consistency_group.ConsistencyGroupFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsistencyGroupFetch", arg0)
	ret0, _ := ret[0].(*consistency_group.ConsistencyGroupFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsistencyGroupFetch indicates an expected call of ConsistencyGroupFetch
func (mr *MockConsistencyGroupClientMockRecorder) ConsistencyGroupFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsistencyGroupFetch", reflect.TypeOf((*MockConsistencyGroupClient)(nil).ConsistencyGroupFetch), arg0)
}

// ConsistencyGroupList mocks base method
func (m *MockConsistencyGroupClient) ConsistencyGroupList(arg0 *consistency_group.ConsistencyGroupListParams) (*consistency_group.ConsistencyGroupListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsistencyGroupList", arg0)
	ret0, _ := ret[0].(*consistency_group.ConsistencyGroupListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsistencyGroupList indicates an expected call of ConsistencyGroupList
func (mr *MockConsistencyGroupClientMockRecorder) ConsistencyGroupList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsistencyGroupList", reflect.TypeOf((*MockConsistencyGroupClient)(nil).ConsistencyGroupList), arg0)
}

// ConsistencyGroupUpdate mocks base method
func (m *MockConsistencyGroupClient) ConsistencyGroupUpdate(arg0 *consistency_group.ConsistencyGroupUpdateParams) (*consistency_group.ConsistencyGroupUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsistencyGroupUpdate", arg0)
	ret0, _ := ret[0].(*consistency_group.ConsistencyGroupUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsistencyGroupUpdate indicates an expected call of ConsistencyGroupUpdate
func (mr *MockConsistencyGroupClientMockRecorder) ConsistencyGroupUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsistencyGroupUpdate", reflect.TypeOf((*MockConsistencyGroupClient)(nil).ConsistencyGroupUpdate), arg0)
}

// MockCSPCredentialClient is a mock of CSPCredentialClient interface
type MockCSPCredentialClient struct {
	ctrl     *gomock.Controller
	recorder *MockCSPCredentialClientMockRecorder
}

// MockCSPCredentialClientMockRecorder is the mock recorder for MockCSPCredentialClient
type MockCSPCredentialClientMockRecorder struct {
	mock *MockCSPCredentialClient
}

// NewMockCSPCredentialClient creates a new mock instance
func NewMockCSPCredentialClient(ctrl *gomock.Controller) *MockCSPCredentialClient {
	mock := &MockCSPCredentialClient{ctrl: ctrl}
	mock.recorder = &MockCSPCredentialClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCSPCredentialClient) EXPECT() *MockCSPCredentialClientMockRecorder {
	return m.recorder
}

// CspCredentialCreate mocks base method
func (m *MockCSPCredentialClient) CspCredentialCreate(arg0 *csp_credential.CspCredentialCreateParams) (*csp_credential.CspCredentialCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspCredentialCreate", arg0)
	ret0, _ := ret[0].(*csp_credential.CspCredentialCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspCredentialCreate indicates an expected call of CspCredentialCreate
func (mr *MockCSPCredentialClientMockRecorder) CspCredentialCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspCredentialCreate", reflect.TypeOf((*MockCSPCredentialClient)(nil).CspCredentialCreate), arg0)
}

// CspCredentialDelete mocks base method
func (m *MockCSPCredentialClient) CspCredentialDelete(arg0 *csp_credential.CspCredentialDeleteParams) (*csp_credential.CspCredentialDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspCredentialDelete", arg0)
	ret0, _ := ret[0].(*csp_credential.CspCredentialDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspCredentialDelete indicates an expected call of CspCredentialDelete
func (mr *MockCSPCredentialClientMockRecorder) CspCredentialDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspCredentialDelete", reflect.TypeOf((*MockCSPCredentialClient)(nil).CspCredentialDelete), arg0)
}

// CspCredentialFetch mocks base method
func (m *MockCSPCredentialClient) CspCredentialFetch(arg0 *csp_credential.CspCredentialFetchParams) (*csp_credential.CspCredentialFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspCredentialFetch", arg0)
	ret0, _ := ret[0].(*csp_credential.CspCredentialFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspCredentialFetch indicates an expected call of CspCredentialFetch
func (mr *MockCSPCredentialClientMockRecorder) CspCredentialFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspCredentialFetch", reflect.TypeOf((*MockCSPCredentialClient)(nil).CspCredentialFetch), arg0)
}

// CspCredentialList mocks base method
func (m *MockCSPCredentialClient) CspCredentialList(arg0 *csp_credential.CspCredentialListParams) (*csp_credential.CspCredentialListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspCredentialList", arg0)
	ret0, _ := ret[0].(*csp_credential.CspCredentialListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspCredentialList indicates an expected call of CspCredentialList
func (mr *MockCSPCredentialClientMockRecorder) CspCredentialList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspCredentialList", reflect.TypeOf((*MockCSPCredentialClient)(nil).CspCredentialList), arg0)
}

// CspCredentialMetadata mocks base method
func (m *MockCSPCredentialClient) CspCredentialMetadata(arg0 *csp_credential.CspCredentialMetadataParams) (*csp_credential.CspCredentialMetadataOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspCredentialMetadata", arg0)
	ret0, _ := ret[0].(*csp_credential.CspCredentialMetadataOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspCredentialMetadata indicates an expected call of CspCredentialMetadata
func (mr *MockCSPCredentialClientMockRecorder) CspCredentialMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspCredentialMetadata", reflect.TypeOf((*MockCSPCredentialClient)(nil).CspCredentialMetadata), arg0)
}

// CspCredentialUpdate mocks base method
func (m *MockCSPCredentialClient) CspCredentialUpdate(arg0 *csp_credential.CspCredentialUpdateParams) (*csp_credential.CspCredentialUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspCredentialUpdate", arg0)
	ret0, _ := ret[0].(*csp_credential.CspCredentialUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspCredentialUpdate indicates an expected call of CspCredentialUpdate
func (mr *MockCSPCredentialClientMockRecorder) CspCredentialUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspCredentialUpdate", reflect.TypeOf((*MockCSPCredentialClient)(nil).CspCredentialUpdate), arg0)
}

// MockCSPDomainClient is a mock of CSPDomainClient interface
type MockCSPDomainClient struct {
	ctrl     *gomock.Controller
	recorder *MockCSPDomainClientMockRecorder
}

// MockCSPDomainClientMockRecorder is the mock recorder for MockCSPDomainClient
type MockCSPDomainClientMockRecorder struct {
	mock *MockCSPDomainClient
}

// NewMockCSPDomainClient creates a new mock instance
func NewMockCSPDomainClient(ctrl *gomock.Controller) *MockCSPDomainClient {
	mock := &MockCSPDomainClient{ctrl: ctrl}
	mock.recorder = &MockCSPDomainClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCSPDomainClient) EXPECT() *MockCSPDomainClientMockRecorder {
	return m.recorder
}

// CspDomainCreate mocks base method
func (m *MockCSPDomainClient) CspDomainCreate(arg0 *csp_domain.CspDomainCreateParams) (*csp_domain.CspDomainCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspDomainCreate", arg0)
	ret0, _ := ret[0].(*csp_domain.CspDomainCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspDomainCreate indicates an expected call of CspDomainCreate
func (mr *MockCSPDomainClientMockRecorder) CspDomainCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspDomainCreate", reflect.TypeOf((*MockCSPDomainClient)(nil).CspDomainCreate), arg0)
}

// CspDomainDelete mocks base method
func (m *MockCSPDomainClient) CspDomainDelete(arg0 *csp_domain.CspDomainDeleteParams) (*csp_domain.CspDomainDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspDomainDelete", arg0)
	ret0, _ := ret[0].(*csp_domain.CspDomainDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspDomainDelete indicates an expected call of CspDomainDelete
func (mr *MockCSPDomainClientMockRecorder) CspDomainDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspDomainDelete", reflect.TypeOf((*MockCSPDomainClient)(nil).CspDomainDelete), arg0)
}

// CspDomainDeploymentFetch mocks base method
func (m *MockCSPDomainClient) CspDomainDeploymentFetch(arg0 *csp_domain.CspDomainDeploymentFetchParams) (*csp_domain.CspDomainDeploymentFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspDomainDeploymentFetch", arg0)
	ret0, _ := ret[0].(*csp_domain.CspDomainDeploymentFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspDomainDeploymentFetch indicates an expected call of CspDomainDeploymentFetch
func (mr *MockCSPDomainClientMockRecorder) CspDomainDeploymentFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspDomainDeploymentFetch", reflect.TypeOf((*MockCSPDomainClient)(nil).CspDomainDeploymentFetch), arg0)
}

// CspDomainFetch mocks base method
func (m *MockCSPDomainClient) CspDomainFetch(arg0 *csp_domain.CspDomainFetchParams) (*csp_domain.CspDomainFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspDomainFetch", arg0)
	ret0, _ := ret[0].(*csp_domain.CspDomainFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspDomainFetch indicates an expected call of CspDomainFetch
func (mr *MockCSPDomainClientMockRecorder) CspDomainFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspDomainFetch", reflect.TypeOf((*MockCSPDomainClient)(nil).CspDomainFetch), arg0)
}

// CspDomainList mocks base method
func (m *MockCSPDomainClient) CspDomainList(arg0 *csp_domain.CspDomainListParams) (*csp_domain.CspDomainListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspDomainList", arg0)
	ret0, _ := ret[0].(*csp_domain.CspDomainListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspDomainList indicates an expected call of CspDomainList
func (mr *MockCSPDomainClientMockRecorder) CspDomainList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspDomainList", reflect.TypeOf((*MockCSPDomainClient)(nil).CspDomainList), arg0)
}

// CspDomainMetadata mocks base method
func (m *MockCSPDomainClient) CspDomainMetadata(arg0 *csp_domain.CspDomainMetadataParams) (*csp_domain.CspDomainMetadataOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspDomainMetadata", arg0)
	ret0, _ := ret[0].(*csp_domain.CspDomainMetadataOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspDomainMetadata indicates an expected call of CspDomainMetadata
func (mr *MockCSPDomainClientMockRecorder) CspDomainMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspDomainMetadata", reflect.TypeOf((*MockCSPDomainClient)(nil).CspDomainMetadata), arg0)
}

// CspDomainServicePlanCost mocks base method
func (m *MockCSPDomainClient) CspDomainServicePlanCost(arg0 *csp_domain.CspDomainServicePlanCostParams) (*csp_domain.CspDomainServicePlanCostOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspDomainServicePlanCost", arg0)
	ret0, _ := ret[0].(*csp_domain.CspDomainServicePlanCostOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspDomainServicePlanCost indicates an expected call of CspDomainServicePlanCost
func (mr *MockCSPDomainClientMockRecorder) CspDomainServicePlanCost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspDomainServicePlanCost", reflect.TypeOf((*MockCSPDomainClient)(nil).CspDomainServicePlanCost), arg0)
}

// CspDomainUpdate mocks base method
func (m *MockCSPDomainClient) CspDomainUpdate(arg0 *csp_domain.CspDomainUpdateParams) (*csp_domain.CspDomainUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspDomainUpdate", arg0)
	ret0, _ := ret[0].(*csp_domain.CspDomainUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspDomainUpdate indicates an expected call of CspDomainUpdate
func (mr *MockCSPDomainClientMockRecorder) CspDomainUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspDomainUpdate", reflect.TypeOf((*MockCSPDomainClient)(nil).CspDomainUpdate), arg0)
}

// MockCSPStorageTypeClient is a mock of CSPStorageTypeClient interface
type MockCSPStorageTypeClient struct {
	ctrl     *gomock.Controller
	recorder *MockCSPStorageTypeClientMockRecorder
}

// MockCSPStorageTypeClientMockRecorder is the mock recorder for MockCSPStorageTypeClient
type MockCSPStorageTypeClientMockRecorder struct {
	mock *MockCSPStorageTypeClient
}

// NewMockCSPStorageTypeClient creates a new mock instance
func NewMockCSPStorageTypeClient(ctrl *gomock.Controller) *MockCSPStorageTypeClient {
	mock := &MockCSPStorageTypeClient{ctrl: ctrl}
	mock.recorder = &MockCSPStorageTypeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCSPStorageTypeClient) EXPECT() *MockCSPStorageTypeClientMockRecorder {
	return m.recorder
}

// CspStorageTypeFetch mocks base method
func (m *MockCSPStorageTypeClient) CspStorageTypeFetch(arg0 *csp_storage_type.CspStorageTypeFetchParams) (*csp_storage_type.CspStorageTypeFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspStorageTypeFetch", arg0)
	ret0, _ := ret[0].(*csp_storage_type.CspStorageTypeFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspStorageTypeFetch indicates an expected call of CspStorageTypeFetch
func (mr *MockCSPStorageTypeClientMockRecorder) CspStorageTypeFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspStorageTypeFetch", reflect.TypeOf((*MockCSPStorageTypeClient)(nil).CspStorageTypeFetch), arg0)
}

// CspStorageTypeList mocks base method
func (m *MockCSPStorageTypeClient) CspStorageTypeList(arg0 *csp_storage_type.CspStorageTypeListParams) (*csp_storage_type.CspStorageTypeListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CspStorageTypeList", arg0)
	ret0, _ := ret[0].(*csp_storage_type.CspStorageTypeListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CspStorageTypeList indicates an expected call of CspStorageTypeList
func (mr *MockCSPStorageTypeClientMockRecorder) CspStorageTypeList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CspStorageTypeList", reflect.TypeOf((*MockCSPStorageTypeClient)(nil).CspStorageTypeList), arg0)
}

// MockDebugClient is a mock of DebugClient interface
type MockDebugClient struct {
	ctrl     *gomock.Controller
	recorder *MockDebugClientMockRecorder
}

// MockDebugClientMockRecorder is the mock recorder for MockDebugClient
type MockDebugClientMockRecorder struct {
	mock *MockDebugClient
}

// NewMockDebugClient creates a new mock instance
func NewMockDebugClient(ctrl *gomock.Controller) *MockDebugClient {
	mock := &MockDebugClient{ctrl: ctrl}
	mock.recorder = &MockDebugClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDebugClient) EXPECT() *MockDebugClientMockRecorder {
	return m.recorder
}

// DebugPost mocks base method
func (m *MockDebugClient) DebugPost(arg0 *service_debug.DebugPostParams) (*service_debug.DebugPostNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugPost", arg0)
	ret0, _ := ret[0].(*service_debug.DebugPostNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebugPost indicates an expected call of DebugPost
func (mr *MockDebugClientMockRecorder) DebugPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugPost", reflect.TypeOf((*MockDebugClient)(nil).DebugPost), arg0)
}

// MockMetricsClient is a mock of MetricsClient interface
type MockMetricsClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsClientMockRecorder
}

// MockMetricsClientMockRecorder is the mock recorder for MockMetricsClient
type MockMetricsClientMockRecorder struct {
	mock *MockMetricsClient
}

// NewMockMetricsClient creates a new mock instance
func NewMockMetricsClient(ctrl *gomock.Controller) *MockMetricsClient {
	mock := &MockMetricsClient{ctrl: ctrl}
	mock.recorder = &MockMetricsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricsClient) EXPECT() *MockMetricsClientMockRecorder {
	return m.recorder
}

// StorageIOMetricUpload mocks base method
func (m *MockMetricsClient) StorageIOMetricUpload(arg0 *metrics.StorageIOMetricUploadParams) (*metrics.StorageIOMetricUploadNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageIOMetricUpload", arg0)
	ret0, _ := ret[0].(*metrics.StorageIOMetricUploadNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageIOMetricUpload indicates an expected call of StorageIOMetricUpload
func (mr *MockMetricsClientMockRecorder) StorageIOMetricUpload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageIOMetricUpload", reflect.TypeOf((*MockMetricsClient)(nil).StorageIOMetricUpload), arg0)
}

// VolumeSeriesIOMetricUpload mocks base method
func (m *MockMetricsClient) VolumeSeriesIOMetricUpload(arg0 *metrics.VolumeSeriesIOMetricUploadParams) (*metrics.VolumeSeriesIOMetricUploadNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesIOMetricUpload", arg0)
	ret0, _ := ret[0].(*metrics.VolumeSeriesIOMetricUploadNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesIOMetricUpload indicates an expected call of VolumeSeriesIOMetricUpload
func (mr *MockMetricsClientMockRecorder) VolumeSeriesIOMetricUpload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesIOMetricUpload", reflect.TypeOf((*MockMetricsClient)(nil).VolumeSeriesIOMetricUpload), arg0)
}

// MockNodeClient is a mock of NodeClient interface
type MockNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeClientMockRecorder
}

// MockNodeClientMockRecorder is the mock recorder for MockNodeClient
type MockNodeClientMockRecorder struct {
	mock *MockNodeClient
}

// NewMockNodeClient creates a new mock instance
func NewMockNodeClient(ctrl *gomock.Controller) *MockNodeClient {
	mock := &MockNodeClient{ctrl: ctrl}
	mock.recorder = &MockNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeClient) EXPECT() *MockNodeClientMockRecorder {
	return m.recorder
}

// NodeCreate mocks base method
func (m *MockNodeClient) NodeCreate(arg0 *node.NodeCreateParams) (*node.NodeCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeCreate", arg0)
	ret0, _ := ret[0].(*node.NodeCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeCreate indicates an expected call of NodeCreate
func (mr *MockNodeClientMockRecorder) NodeCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeCreate", reflect.TypeOf((*MockNodeClient)(nil).NodeCreate), arg0)
}

// NodeDelete mocks base method
func (m *MockNodeClient) NodeDelete(arg0 *node.NodeDeleteParams) (*node.NodeDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeDelete", arg0)
	ret0, _ := ret[0].(*node.NodeDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeDelete indicates an expected call of NodeDelete
func (mr *MockNodeClientMockRecorder) NodeDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeDelete", reflect.TypeOf((*MockNodeClient)(nil).NodeDelete), arg0)
}

// NodeFetch mocks base method
func (m *MockNodeClient) NodeFetch(arg0 *node.NodeFetchParams) (*node.NodeFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeFetch", arg0)
	ret0, _ := ret[0].(*node.NodeFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeFetch indicates an expected call of NodeFetch
func (mr *MockNodeClientMockRecorder) NodeFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeFetch", reflect.TypeOf((*MockNodeClient)(nil).NodeFetch), arg0)
}

// NodeList mocks base method
func (m *MockNodeClient) NodeList(arg0 *node.NodeListParams) (*node.NodeListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeList", arg0)
	ret0, _ := ret[0].(*node.NodeListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeList indicates an expected call of NodeList
func (mr *MockNodeClientMockRecorder) NodeList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeList", reflect.TypeOf((*MockNodeClient)(nil).NodeList), arg0)
}

// NodeUpdate mocks base method
func (m *MockNodeClient) NodeUpdate(arg0 *node.NodeUpdateParams) (*node.NodeUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeUpdate", arg0)
	ret0, _ := ret[0].(*node.NodeUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeUpdate indicates an expected call of NodeUpdate
func (mr *MockNodeClientMockRecorder) NodeUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeUpdate", reflect.TypeOf((*MockNodeClient)(nil).NodeUpdate), arg0)
}

// MockPoolClient is a mock of PoolClient interface
type MockPoolClient struct {
	ctrl     *gomock.Controller
	recorder *MockPoolClientMockRecorder
}

// MockPoolClientMockRecorder is the mock recorder for MockPoolClient
type MockPoolClientMockRecorder struct {
	mock *MockPoolClient
}

// NewMockPoolClient creates a new mock instance
func NewMockPoolClient(ctrl *gomock.Controller) *MockPoolClient {
	mock := &MockPoolClient{ctrl: ctrl}
	mock.recorder = &MockPoolClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoolClient) EXPECT() *MockPoolClientMockRecorder {
	return m.recorder
}

// PoolCreate mocks base method
func (m *MockPoolClient) PoolCreate(arg0 *pool.PoolCreateParams) (*pool.PoolCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoolCreate", arg0)
	ret0, _ := ret[0].(*pool.PoolCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoolCreate indicates an expected call of PoolCreate
func (mr *MockPoolClientMockRecorder) PoolCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoolCreate", reflect.TypeOf((*MockPoolClient)(nil).PoolCreate), arg0)
}

// PoolDelete mocks base method
func (m *MockPoolClient) PoolDelete(arg0 *pool.PoolDeleteParams) (*pool.PoolDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoolDelete", arg0)
	ret0, _ := ret[0].(*pool.PoolDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoolDelete indicates an expected call of PoolDelete
func (mr *MockPoolClientMockRecorder) PoolDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoolDelete", reflect.TypeOf((*MockPoolClient)(nil).PoolDelete), arg0)
}

// PoolFetch mocks base method
func (m *MockPoolClient) PoolFetch(arg0 *pool.PoolFetchParams) (*pool.PoolFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoolFetch", arg0)
	ret0, _ := ret[0].(*pool.PoolFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoolFetch indicates an expected call of PoolFetch
func (mr *MockPoolClientMockRecorder) PoolFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoolFetch", reflect.TypeOf((*MockPoolClient)(nil).PoolFetch), arg0)
}

// PoolList mocks base method
func (m *MockPoolClient) PoolList(arg0 *pool.PoolListParams) (*pool.PoolListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoolList", arg0)
	ret0, _ := ret[0].(*pool.PoolListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoolList indicates an expected call of PoolList
func (mr *MockPoolClientMockRecorder) PoolList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoolList", reflect.TypeOf((*MockPoolClient)(nil).PoolList), arg0)
}

// PoolUpdate mocks base method
func (m *MockPoolClient) PoolUpdate(arg0 *pool.PoolUpdateParams) (*pool.PoolUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoolUpdate", arg0)
	ret0, _ := ret[0].(*pool.PoolUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoolUpdate indicates an expected call of PoolUpdate
func (mr *MockPoolClientMockRecorder) PoolUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoolUpdate", reflect.TypeOf((*MockPoolClient)(nil).PoolUpdate), arg0)
}

// MockProtectionDomainClient is a mock of ProtectionDomainClient interface
type MockProtectionDomainClient struct {
	ctrl     *gomock.Controller
	recorder *MockProtectionDomainClientMockRecorder
}

// MockProtectionDomainClientMockRecorder is the mock recorder for MockProtectionDomainClient
type MockProtectionDomainClientMockRecorder struct {
	mock *MockProtectionDomainClient
}

// NewMockProtectionDomainClient creates a new mock instance
func NewMockProtectionDomainClient(ctrl *gomock.Controller) *MockProtectionDomainClient {
	mock := &MockProtectionDomainClient{ctrl: ctrl}
	mock.recorder = &MockProtectionDomainClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProtectionDomainClient) EXPECT() *MockProtectionDomainClientMockRecorder {
	return m.recorder
}

// ProtectionDomainCreate mocks base method
func (m *MockProtectionDomainClient) ProtectionDomainCreate(arg0 *protection_domain.ProtectionDomainCreateParams) (*protection_domain.ProtectionDomainCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtectionDomainCreate", arg0)
	ret0, _ := ret[0].(*protection_domain.ProtectionDomainCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProtectionDomainCreate indicates an expected call of ProtectionDomainCreate
func (mr *MockProtectionDomainClientMockRecorder) ProtectionDomainCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectionDomainCreate", reflect.TypeOf((*MockProtectionDomainClient)(nil).ProtectionDomainCreate), arg0)
}

// ProtectionDomainDelete mocks base method
func (m *MockProtectionDomainClient) ProtectionDomainDelete(arg0 *protection_domain.ProtectionDomainDeleteParams) (*protection_domain.ProtectionDomainDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtectionDomainDelete", arg0)
	ret0, _ := ret[0].(*protection_domain.ProtectionDomainDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProtectionDomainDelete indicates an expected call of ProtectionDomainDelete
func (mr *MockProtectionDomainClientMockRecorder) ProtectionDomainDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectionDomainDelete", reflect.TypeOf((*MockProtectionDomainClient)(nil).ProtectionDomainDelete), arg0)
}

// ProtectionDomainFetch mocks base method
func (m *MockProtectionDomainClient) ProtectionDomainFetch(arg0 *protection_domain.ProtectionDomainFetchParams) (*protection_domain.ProtectionDomainFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtectionDomainFetch", arg0)
	ret0, _ := ret[0].(*protection_domain.ProtectionDomainFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProtectionDomainFetch indicates an expected call of ProtectionDomainFetch
func (mr *MockProtectionDomainClientMockRecorder) ProtectionDomainFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectionDomainFetch", reflect.TypeOf((*MockProtectionDomainClient)(nil).ProtectionDomainFetch), arg0)
}

// ProtectionDomainList mocks base method
func (m *MockProtectionDomainClient) ProtectionDomainList(arg0 *protection_domain.ProtectionDomainListParams) (*protection_domain.ProtectionDomainListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtectionDomainList", arg0)
	ret0, _ := ret[0].(*protection_domain.ProtectionDomainListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProtectionDomainList indicates an expected call of ProtectionDomainList
func (mr *MockProtectionDomainClientMockRecorder) ProtectionDomainList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectionDomainList", reflect.TypeOf((*MockProtectionDomainClient)(nil).ProtectionDomainList), arg0)
}

// ProtectionDomainMetadata mocks base method
func (m *MockProtectionDomainClient) ProtectionDomainMetadata(arg0 *protection_domain.ProtectionDomainMetadataParams) (*protection_domain.ProtectionDomainMetadataOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtectionDomainMetadata", arg0)
	ret0, _ := ret[0].(*protection_domain.ProtectionDomainMetadataOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProtectionDomainMetadata indicates an expected call of ProtectionDomainMetadata
func (mr *MockProtectionDomainClientMockRecorder) ProtectionDomainMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectionDomainMetadata", reflect.TypeOf((*MockProtectionDomainClient)(nil).ProtectionDomainMetadata), arg0)
}

// ProtectionDomainUpdate mocks base method
func (m *MockProtectionDomainClient) ProtectionDomainUpdate(arg0 *protection_domain.ProtectionDomainUpdateParams) (*protection_domain.ProtectionDomainUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtectionDomainUpdate", arg0)
	ret0, _ := ret[0].(*protection_domain.ProtectionDomainUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProtectionDomainUpdate indicates an expected call of ProtectionDomainUpdate
func (mr *MockProtectionDomainClientMockRecorder) ProtectionDomainUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectionDomainUpdate", reflect.TypeOf((*MockProtectionDomainClient)(nil).ProtectionDomainUpdate), arg0)
}

// MockRoleClient is a mock of RoleClient interface
type MockRoleClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoleClientMockRecorder
}

// MockRoleClientMockRecorder is the mock recorder for MockRoleClient
type MockRoleClientMockRecorder struct {
	mock *MockRoleClient
}

// NewMockRoleClient creates a new mock instance
func NewMockRoleClient(ctrl *gomock.Controller) *MockRoleClient {
	mock := &MockRoleClient{ctrl: ctrl}
	mock.recorder = &MockRoleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleClient) EXPECT() *MockRoleClientMockRecorder {
	return m.recorder
}

// RoleList mocks base method
func (m *MockRoleClient) RoleList(arg0 *role.RoleListParams) (*role.RoleListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleList", arg0)
	ret0, _ := ret[0].(*role.RoleListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleList indicates an expected call of RoleList
func (mr *MockRoleClientMockRecorder) RoleList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleList", reflect.TypeOf((*MockRoleClient)(nil).RoleList), arg0)
}

// MockServicePlanAllocationClient is a mock of ServicePlanAllocationClient interface
type MockServicePlanAllocationClient struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanAllocationClientMockRecorder
}

// MockServicePlanAllocationClientMockRecorder is the mock recorder for MockServicePlanAllocationClient
type MockServicePlanAllocationClientMockRecorder struct {
	mock *MockServicePlanAllocationClient
}

// NewMockServicePlanAllocationClient creates a new mock instance
func NewMockServicePlanAllocationClient(ctrl *gomock.Controller) *MockServicePlanAllocationClient {
	mock := &MockServicePlanAllocationClient{ctrl: ctrl}
	mock.recorder = &MockServicePlanAllocationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServicePlanAllocationClient) EXPECT() *MockServicePlanAllocationClientMockRecorder {
	return m.recorder
}

// ServicePlanAllocationCreate mocks base method
func (m *MockServicePlanAllocationClient) ServicePlanAllocationCreate(arg0 *service_plan_allocation.ServicePlanAllocationCreateParams) (*service_plan_allocation.ServicePlanAllocationCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanAllocationCreate", arg0)
	ret0, _ := ret[0].(*service_plan_allocation.ServicePlanAllocationCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanAllocationCreate indicates an expected call of ServicePlanAllocationCreate
func (mr *MockServicePlanAllocationClientMockRecorder) ServicePlanAllocationCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanAllocationCreate", reflect.TypeOf((*MockServicePlanAllocationClient)(nil).ServicePlanAllocationCreate), arg0)
}

// ServicePlanAllocationCustomizeProvisioning mocks base method
func (m *MockServicePlanAllocationClient) ServicePlanAllocationCustomizeProvisioning(arg0 *service_plan_allocation.ServicePlanAllocationCustomizeProvisioningParams) (*service_plan_allocation.ServicePlanAllocationCustomizeProvisioningOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanAllocationCustomizeProvisioning", arg0)
	ret0, _ := ret[0].(*service_plan_allocation.ServicePlanAllocationCustomizeProvisioningOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanAllocationCustomizeProvisioning indicates an expected call of ServicePlanAllocationCustomizeProvisioning
func (mr *MockServicePlanAllocationClientMockRecorder) ServicePlanAllocationCustomizeProvisioning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanAllocationCustomizeProvisioning", reflect.TypeOf((*MockServicePlanAllocationClient)(nil).ServicePlanAllocationCustomizeProvisioning), arg0)
}

// ServicePlanAllocationDelete mocks base method
func (m *MockServicePlanAllocationClient) ServicePlanAllocationDelete(arg0 *service_plan_allocation.ServicePlanAllocationDeleteParams) (*service_plan_allocation.ServicePlanAllocationDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanAllocationDelete", arg0)
	ret0, _ := ret[0].(*service_plan_allocation.ServicePlanAllocationDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanAllocationDelete indicates an expected call of ServicePlanAllocationDelete
func (mr *MockServicePlanAllocationClientMockRecorder) ServicePlanAllocationDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanAllocationDelete", reflect.TypeOf((*MockServicePlanAllocationClient)(nil).ServicePlanAllocationDelete), arg0)
}

// ServicePlanAllocationFetch mocks base method
func (m *MockServicePlanAllocationClient) ServicePlanAllocationFetch(arg0 *service_plan_allocation.ServicePlanAllocationFetchParams) (*service_plan_allocation.ServicePlanAllocationFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanAllocationFetch", arg0)
	ret0, _ := ret[0].(*service_plan_allocation.ServicePlanAllocationFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanAllocationFetch indicates an expected call of ServicePlanAllocationFetch
func (mr *MockServicePlanAllocationClientMockRecorder) ServicePlanAllocationFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanAllocationFetch", reflect.TypeOf((*MockServicePlanAllocationClient)(nil).ServicePlanAllocationFetch), arg0)
}

// ServicePlanAllocationList mocks base method
func (m *MockServicePlanAllocationClient) ServicePlanAllocationList(arg0 *service_plan_allocation.ServicePlanAllocationListParams) (*service_plan_allocation.ServicePlanAllocationListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanAllocationList", arg0)
	ret0, _ := ret[0].(*service_plan_allocation.ServicePlanAllocationListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanAllocationList indicates an expected call of ServicePlanAllocationList
func (mr *MockServicePlanAllocationClientMockRecorder) ServicePlanAllocationList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanAllocationList", reflect.TypeOf((*MockServicePlanAllocationClient)(nil).ServicePlanAllocationList), arg0)
}

// ServicePlanAllocationUpdate mocks base method
func (m *MockServicePlanAllocationClient) ServicePlanAllocationUpdate(arg0 *service_plan_allocation.ServicePlanAllocationUpdateParams) (*service_plan_allocation.ServicePlanAllocationUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanAllocationUpdate", arg0)
	ret0, _ := ret[0].(*service_plan_allocation.ServicePlanAllocationUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanAllocationUpdate indicates an expected call of ServicePlanAllocationUpdate
func (mr *MockServicePlanAllocationClientMockRecorder) ServicePlanAllocationUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanAllocationUpdate", reflect.TypeOf((*MockServicePlanAllocationClient)(nil).ServicePlanAllocationUpdate), arg0)
}

// MockServicePlanClient is a mock of ServicePlanClient interface
type MockServicePlanClient struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanClientMockRecorder
}

// MockServicePlanClientMockRecorder is the mock recorder for MockServicePlanClient
type MockServicePlanClientMockRecorder struct {
	mock *MockServicePlanClient
}

// NewMockServicePlanClient creates a new mock instance
func NewMockServicePlanClient(ctrl *gomock.Controller) *MockServicePlanClient {
	mock := &MockServicePlanClient{ctrl: ctrl}
	mock.recorder = &MockServicePlanClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServicePlanClient) EXPECT() *MockServicePlanClientMockRecorder {
	return m.recorder
}

// ServicePlanClone mocks base method
func (m *MockServicePlanClient) ServicePlanClone(arg0 *service_plan.ServicePlanCloneParams) (*service_plan.ServicePlanCloneCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanClone", arg0)
	ret0, _ := ret[0].(*service_plan.ServicePlanCloneCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanClone indicates an expected call of ServicePlanClone
func (mr *MockServicePlanClientMockRecorder) ServicePlanClone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanClone", reflect.TypeOf((*MockServicePlanClient)(nil).ServicePlanClone), arg0)
}

// ServicePlanDelete mocks base method
func (m *MockServicePlanClient) ServicePlanDelete(arg0 *service_plan.ServicePlanDeleteParams) (*service_plan.ServicePlanDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanDelete", arg0)
	ret0, _ := ret[0].(*service_plan.ServicePlanDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanDelete indicates an expected call of ServicePlanDelete
func (mr *MockServicePlanClientMockRecorder) ServicePlanDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanDelete", reflect.TypeOf((*MockServicePlanClient)(nil).ServicePlanDelete), arg0)
}

// ServicePlanFetch mocks base method
func (m *MockServicePlanClient) ServicePlanFetch(arg0 *service_plan.ServicePlanFetchParams) (*service_plan.ServicePlanFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanFetch", arg0)
	ret0, _ := ret[0].(*service_plan.ServicePlanFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanFetch indicates an expected call of ServicePlanFetch
func (mr *MockServicePlanClientMockRecorder) ServicePlanFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanFetch", reflect.TypeOf((*MockServicePlanClient)(nil).ServicePlanFetch), arg0)
}

// ServicePlanList mocks base method
func (m *MockServicePlanClient) ServicePlanList(arg0 *service_plan.ServicePlanListParams) (*service_plan.ServicePlanListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanList", arg0)
	ret0, _ := ret[0].(*service_plan.ServicePlanListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanList indicates an expected call of ServicePlanList
func (mr *MockServicePlanClientMockRecorder) ServicePlanList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanList", reflect.TypeOf((*MockServicePlanClient)(nil).ServicePlanList), arg0)
}

// ServicePlanPublish mocks base method
func (m *MockServicePlanClient) ServicePlanPublish(arg0 *service_plan.ServicePlanPublishParams) (*service_plan.ServicePlanPublishOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanPublish", arg0)
	ret0, _ := ret[0].(*service_plan.ServicePlanPublishOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanPublish indicates an expected call of ServicePlanPublish
func (mr *MockServicePlanClientMockRecorder) ServicePlanPublish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanPublish", reflect.TypeOf((*MockServicePlanClient)(nil).ServicePlanPublish), arg0)
}

// ServicePlanRetire mocks base method
func (m *MockServicePlanClient) ServicePlanRetire(arg0 *service_plan.ServicePlanRetireParams) (*service_plan.ServicePlanRetireOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanRetire", arg0)
	ret0, _ := ret[0].(*service_plan.ServicePlanRetireOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanRetire indicates an expected call of ServicePlanRetire
func (mr *MockServicePlanClientMockRecorder) ServicePlanRetire(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanRetire", reflect.TypeOf((*MockServicePlanClient)(nil).ServicePlanRetire), arg0)
}

// ServicePlanUpdate mocks base method
func (m *MockServicePlanClient) ServicePlanUpdate(arg0 *service_plan.ServicePlanUpdateParams) (*service_plan.ServicePlanUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePlanUpdate", arg0)
	ret0, _ := ret[0].(*service_plan.ServicePlanUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePlanUpdate indicates an expected call of ServicePlanUpdate
func (mr *MockServicePlanClientMockRecorder) ServicePlanUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePlanUpdate", reflect.TypeOf((*MockServicePlanClient)(nil).ServicePlanUpdate), arg0)
}

// MockSLOClient is a mock of SLOClient interface
type MockSLOClient struct {
	ctrl     *gomock.Controller
	recorder *MockSLOClientMockRecorder
}

// MockSLOClientMockRecorder is the mock recorder for MockSLOClient
type MockSLOClientMockRecorder struct {
	mock *MockSLOClient
}

// NewMockSLOClient creates a new mock instance
func NewMockSLOClient(ctrl *gomock.Controller) *MockSLOClient {
	mock := &MockSLOClient{ctrl: ctrl}
	mock.recorder = &MockSLOClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSLOClient) EXPECT() *MockSLOClientMockRecorder {
	return m.recorder
}

// SloList mocks base method
func (m *MockSLOClient) SloList(arg0 *slo.SloListParams) (*slo.SloListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SloList", arg0)
	ret0, _ := ret[0].(*slo.SloListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SloList indicates an expected call of SloList
func (mr *MockSLOClientMockRecorder) SloList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SloList", reflect.TypeOf((*MockSLOClient)(nil).SloList), arg0)
}

// MockSnapshotClient is a mock of SnapshotClient interface
type MockSnapshotClient struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotClientMockRecorder
}

// MockSnapshotClientMockRecorder is the mock recorder for MockSnapshotClient
type MockSnapshotClientMockRecorder struct {
	mock *MockSnapshotClient
}

// NewMockSnapshotClient creates a new mock instance
func NewMockSnapshotClient(ctrl *gomock.Controller) *MockSnapshotClient {
	mock := &MockSnapshotClient{ctrl: ctrl}
	mock.recorder = &MockSnapshotClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshotClient) EXPECT() *MockSnapshotClientMockRecorder {
	return m.recorder
}

// SnapshotCreate mocks base method
func (m *MockSnapshotClient) SnapshotCreate(arg0 *snapshot.SnapshotCreateParams) (*snapshot.SnapshotCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotCreate", arg0)
	ret0, _ := ret[0].(*snapshot.SnapshotCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotCreate indicates an expected call of SnapshotCreate
func (mr *MockSnapshotClientMockRecorder) SnapshotCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotCreate", reflect.TypeOf((*MockSnapshotClient)(nil).SnapshotCreate), arg0)
}

// SnapshotDelete mocks base method
func (m *MockSnapshotClient) SnapshotDelete(arg0 *snapshot.SnapshotDeleteParams) (*snapshot.SnapshotDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotDelete", arg0)
	ret0, _ := ret[0].(*snapshot.SnapshotDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotDelete indicates an expected call of SnapshotDelete
func (mr *MockSnapshotClientMockRecorder) SnapshotDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotDelete", reflect.TypeOf((*MockSnapshotClient)(nil).SnapshotDelete), arg0)
}

// SnapshotFetch mocks base method
func (m *MockSnapshotClient) SnapshotFetch(arg0 *snapshot.SnapshotFetchParams) (*snapshot.SnapshotFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotFetch", arg0)
	ret0, _ := ret[0].(*snapshot.SnapshotFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotFetch indicates an expected call of SnapshotFetch
func (mr *MockSnapshotClientMockRecorder) SnapshotFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotFetch", reflect.TypeOf((*MockSnapshotClient)(nil).SnapshotFetch), arg0)
}

// SnapshotList mocks base method
func (m *MockSnapshotClient) SnapshotList(arg0 *snapshot.SnapshotListParams) (*snapshot.SnapshotListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotList", arg0)
	ret0, _ := ret[0].(*snapshot.SnapshotListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotList indicates an expected call of SnapshotList
func (mr *MockSnapshotClientMockRecorder) SnapshotList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotList", reflect.TypeOf((*MockSnapshotClient)(nil).SnapshotList), arg0)
}

// SnapshotUpdate mocks base method
func (m *MockSnapshotClient) SnapshotUpdate(arg0 *snapshot.SnapshotUpdateParams) (*snapshot.SnapshotUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotUpdate", arg0)
	ret0, _ := ret[0].(*snapshot.SnapshotUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotUpdate indicates an expected call of SnapshotUpdate
func (mr *MockSnapshotClientMockRecorder) SnapshotUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotUpdate", reflect.TypeOf((*MockSnapshotClient)(nil).SnapshotUpdate), arg0)
}

// MockStorageClient is a mock of StorageClient interface
type MockStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClientMockRecorder
}

// MockStorageClientMockRecorder is the mock recorder for MockStorageClient
type MockStorageClientMockRecorder struct {
	mock *MockStorageClient
}

// NewMockStorageClient creates a new mock instance
func NewMockStorageClient(ctrl *gomock.Controller) *MockStorageClient {
	mock := &MockStorageClient{ctrl: ctrl}
	mock.recorder = &MockStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageClient) EXPECT() *MockStorageClientMockRecorder {
	return m.recorder
}

// StorageCreate mocks base method
func (m *MockStorageClient) StorageCreate(arg0 *storage.StorageCreateParams) (*storage.StorageCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageCreate", arg0)
	ret0, _ := ret[0].(*storage.StorageCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageCreate indicates an expected call of StorageCreate
func (mr *MockStorageClientMockRecorder) StorageCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageCreate", reflect.TypeOf((*MockStorageClient)(nil).StorageCreate), arg0)
}

// StorageDelete mocks base method
func (m *MockStorageClient) StorageDelete(arg0 *storage.StorageDeleteParams) (*storage.StorageDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageDelete", arg0)
	ret0, _ := ret[0].(*storage.StorageDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageDelete indicates an expected call of StorageDelete
func (mr *MockStorageClientMockRecorder) StorageDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageDelete", reflect.TypeOf((*MockStorageClient)(nil).StorageDelete), arg0)
}

// StorageFetch mocks base method
func (m *MockStorageClient) StorageFetch(arg0 *storage.StorageFetchParams) (*storage.StorageFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageFetch", arg0)
	ret0, _ := ret[0].(*storage.StorageFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageFetch indicates an expected call of StorageFetch
func (mr *MockStorageClientMockRecorder) StorageFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageFetch", reflect.TypeOf((*MockStorageClient)(nil).StorageFetch), arg0)
}

// StorageList mocks base method
func (m *MockStorageClient) StorageList(arg0 *storage.StorageListParams) (*storage.StorageListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageList", arg0)
	ret0, _ := ret[0].(*storage.StorageListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageList indicates an expected call of StorageList
func (mr *MockStorageClientMockRecorder) StorageList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageList", reflect.TypeOf((*MockStorageClient)(nil).StorageList), arg0)
}

// StorageUpdate mocks base method
func (m *MockStorageClient) StorageUpdate(arg0 *storage.StorageUpdateParams) (*storage.StorageUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageUpdate", arg0)
	ret0, _ := ret[0].(*storage.StorageUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageUpdate indicates an expected call of StorageUpdate
func (mr *MockStorageClientMockRecorder) StorageUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageUpdate", reflect.TypeOf((*MockStorageClient)(nil).StorageUpdate), arg0)
}

// MockStorageFormulaClient is a mock of StorageFormulaClient interface
type MockStorageFormulaClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageFormulaClientMockRecorder
}

// MockStorageFormulaClientMockRecorder is the mock recorder for MockStorageFormulaClient
type MockStorageFormulaClientMockRecorder struct {
	mock *MockStorageFormulaClient
}

// NewMockStorageFormulaClient creates a new mock instance
func NewMockStorageFormulaClient(ctrl *gomock.Controller) *MockStorageFormulaClient {
	mock := &MockStorageFormulaClient{ctrl: ctrl}
	mock.recorder = &MockStorageFormulaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageFormulaClient) EXPECT() *MockStorageFormulaClientMockRecorder {
	return m.recorder
}

// StorageFormulaList mocks base method
func (m *MockStorageFormulaClient) StorageFormulaList(arg0 *storage_formula.StorageFormulaListParams) (*storage_formula.StorageFormulaListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageFormulaList", arg0)
	ret0, _ := ret[0].(*storage_formula.StorageFormulaListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageFormulaList indicates an expected call of StorageFormulaList
func (mr *MockStorageFormulaClientMockRecorder) StorageFormulaList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageFormulaList", reflect.TypeOf((*MockStorageFormulaClient)(nil).StorageFormulaList), arg0)
}

// MockStorageRequestClient is a mock of StorageRequestClient interface
type MockStorageRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageRequestClientMockRecorder
}

// MockStorageRequestClientMockRecorder is the mock recorder for MockStorageRequestClient
type MockStorageRequestClientMockRecorder struct {
	mock *MockStorageRequestClient
}

// NewMockStorageRequestClient creates a new mock instance
func NewMockStorageRequestClient(ctrl *gomock.Controller) *MockStorageRequestClient {
	mock := &MockStorageRequestClient{ctrl: ctrl}
	mock.recorder = &MockStorageRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageRequestClient) EXPECT() *MockStorageRequestClientMockRecorder {
	return m.recorder
}

// StorageRequestCreate mocks base method
func (m *MockStorageRequestClient) StorageRequestCreate(arg0 *storage_request.StorageRequestCreateParams) (*storage_request.StorageRequestCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageRequestCreate", arg0)
	ret0, _ := ret[0].(*storage_request.StorageRequestCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageRequestCreate indicates an expected call of StorageRequestCreate
func (mr *MockStorageRequestClientMockRecorder) StorageRequestCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageRequestCreate", reflect.TypeOf((*MockStorageRequestClient)(nil).StorageRequestCreate), arg0)
}

// StorageRequestDelete mocks base method
func (m *MockStorageRequestClient) StorageRequestDelete(arg0 *storage_request.StorageRequestDeleteParams) (*storage_request.StorageRequestDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageRequestDelete", arg0)
	ret0, _ := ret[0].(*storage_request.StorageRequestDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageRequestDelete indicates an expected call of StorageRequestDelete
func (mr *MockStorageRequestClientMockRecorder) StorageRequestDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageRequestDelete", reflect.TypeOf((*MockStorageRequestClient)(nil).StorageRequestDelete), arg0)
}

// StorageRequestFetch mocks base method
func (m *MockStorageRequestClient) StorageRequestFetch(arg0 *storage_request.StorageRequestFetchParams) (*storage_request.StorageRequestFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageRequestFetch", arg0)
	ret0, _ := ret[0].(*storage_request.StorageRequestFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageRequestFetch indicates an expected call of StorageRequestFetch
func (mr *MockStorageRequestClientMockRecorder) StorageRequestFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageRequestFetch", reflect.TypeOf((*MockStorageRequestClient)(nil).StorageRequestFetch), arg0)
}

// StorageRequestList mocks base method
func (m *MockStorageRequestClient) StorageRequestList(arg0 *storage_request.StorageRequestListParams) (*storage_request.StorageRequestListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageRequestList", arg0)
	ret0, _ := ret[0].(*storage_request.StorageRequestListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageRequestList indicates an expected call of StorageRequestList
func (mr *MockStorageRequestClientMockRecorder) StorageRequestList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageRequestList", reflect.TypeOf((*MockStorageRequestClient)(nil).StorageRequestList), arg0)
}

// StorageRequestUpdate mocks base method
func (m *MockStorageRequestClient) StorageRequestUpdate(arg0 *storage_request.StorageRequestUpdateParams) (*storage_request.StorageRequestUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageRequestUpdate", arg0)
	ret0, _ := ret[0].(*storage_request.StorageRequestUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageRequestUpdate indicates an expected call of StorageRequestUpdate
func (mr *MockStorageRequestClientMockRecorder) StorageRequestUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageRequestUpdate", reflect.TypeOf((*MockStorageRequestClient)(nil).StorageRequestUpdate), arg0)
}

// MockSystemClient is a mock of SystemClient interface
type MockSystemClient struct {
	ctrl     *gomock.Controller
	recorder *MockSystemClientMockRecorder
}

// MockSystemClientMockRecorder is the mock recorder for MockSystemClient
type MockSystemClientMockRecorder struct {
	mock *MockSystemClient
}

// NewMockSystemClient creates a new mock instance
func NewMockSystemClient(ctrl *gomock.Controller) *MockSystemClient {
	mock := &MockSystemClient{ctrl: ctrl}
	mock.recorder = &MockSystemClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemClient) EXPECT() *MockSystemClientMockRecorder {
	return m.recorder
}

// SystemFetch mocks base method
func (m *MockSystemClient) SystemFetch(arg0 *system.SystemFetchParams) (*system.SystemFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemFetch", arg0)
	ret0, _ := ret[0].(*system.SystemFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemFetch indicates an expected call of SystemFetch
func (mr *MockSystemClientMockRecorder) SystemFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemFetch", reflect.TypeOf((*MockSystemClient)(nil).SystemFetch), arg0)
}

// SystemHostnameFetch mocks base method
func (m *MockSystemClient) SystemHostnameFetch(arg0 *system.SystemHostnameFetchParams) (*system.SystemHostnameFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemHostnameFetch", arg0)
	ret0, _ := ret[0].(*system.SystemHostnameFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemHostnameFetch indicates an expected call of SystemHostnameFetch
func (mr *MockSystemClientMockRecorder) SystemHostnameFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemHostnameFetch", reflect.TypeOf((*MockSystemClient)(nil).SystemHostnameFetch), arg0)
}

// SystemUpdate mocks base method
func (m *MockSystemClient) SystemUpdate(arg0 *system.SystemUpdateParams) (*system.SystemUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemUpdate", arg0)
	ret0, _ := ret[0].(*system.SystemUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemUpdate indicates an expected call of SystemUpdate
func (mr *MockSystemClientMockRecorder) SystemUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemUpdate", reflect.TypeOf((*MockSystemClient)(nil).SystemUpdate), arg0)
}

// MockTaskClient is a mock of TaskClient interface
type MockTaskClient struct {
	ctrl     *gomock.Controller
	recorder *MockTaskClientMockRecorder
}

// MockTaskClientMockRecorder is the mock recorder for MockTaskClient
type MockTaskClientMockRecorder struct {
	mock *MockTaskClient
}

// NewMockTaskClient creates a new mock instance
func NewMockTaskClient(ctrl *gomock.Controller) *MockTaskClient {
	mock := &MockTaskClient{ctrl: ctrl}
	mock.recorder = &MockTaskClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskClient) EXPECT() *MockTaskClientMockRecorder {
	return m.recorder
}

// TaskCancel mocks base method
func (m *MockTaskClient) TaskCancel(arg0 *task.TaskCancelParams) (*task.TaskCancelOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskCancel", arg0)
	ret0, _ := ret[0].(*task.TaskCancelOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskCancel indicates an expected call of TaskCancel
func (mr *MockTaskClientMockRecorder) TaskCancel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskCancel", reflect.TypeOf((*MockTaskClient)(nil).TaskCancel), arg0)
}

// TaskCreate mocks base method
func (m *MockTaskClient) TaskCreate(arg0 *task.TaskCreateParams) (*task.TaskCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskCreate", arg0)
	ret0, _ := ret[0].(*task.TaskCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskCreate indicates an expected call of TaskCreate
func (mr *MockTaskClientMockRecorder) TaskCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskCreate", reflect.TypeOf((*MockTaskClient)(nil).TaskCreate), arg0)
}

// TaskFetch mocks base method
func (m *MockTaskClient) TaskFetch(arg0 *task.TaskFetchParams) (*task.TaskFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskFetch", arg0)
	ret0, _ := ret[0].(*task.TaskFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskFetch indicates an expected call of TaskFetch
func (mr *MockTaskClientMockRecorder) TaskFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskFetch", reflect.TypeOf((*MockTaskClient)(nil).TaskFetch), arg0)
}

// TaskList mocks base method
func (m *MockTaskClient) TaskList(arg0 *task.TaskListParams) (*task.TaskListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskList", arg0)
	ret0, _ := ret[0].(*task.TaskListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskList indicates an expected call of TaskList
func (mr *MockTaskClientMockRecorder) TaskList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskList", reflect.TypeOf((*MockTaskClient)(nil).TaskList), arg0)
}

// MockUserClient is a mock of UserClient interface
type MockUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientMockRecorder
}

// MockUserClientMockRecorder is the mock recorder for MockUserClient
type MockUserClientMockRecorder struct {
	mock *MockUserClient
}

// NewMockUserClient creates a new mock instance
func NewMockUserClient(ctrl *gomock.Controller) *MockUserClient {
	mock := &MockUserClient{ctrl: ctrl}
	mock.recorder = &MockUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserClient) EXPECT() *MockUserClientMockRecorder {
	return m.recorder
}

// UserCreate mocks base method
func (m *MockUserClient) UserCreate(arg0 *user.UserCreateParams) (*user.UserCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", arg0)
	ret0, _ := ret[0].(*user.UserCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreate indicates an expected call of UserCreate
func (mr *MockUserClientMockRecorder) UserCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockUserClient)(nil).UserCreate), arg0)
}

// UserDelete mocks base method
func (m *MockUserClient) UserDelete(arg0 *user.UserDeleteParams) (*user.UserDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDelete", arg0)
	ret0, _ := ret[0].(*user.UserDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDelete indicates an expected call of UserDelete
func (mr *MockUserClientMockRecorder) UserDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockUserClient)(nil).UserDelete), arg0)
}

// UserFetch mocks base method
func (m *MockUserClient) UserFetch(arg0 *user.UserFetchParams) (*user.UserFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFetch", arg0)
	ret0, _ := ret[0].(*user.UserFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFetch indicates an expected call of UserFetch
func (mr *MockUserClientMockRecorder) UserFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFetch", reflect.TypeOf((*MockUserClient)(nil).UserFetch), arg0)
}

// UserList mocks base method
func (m *MockUserClient) UserList(arg0 *user.UserListParams) (*user.UserListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserList", arg0)
	ret0, _ := ret[0].(*user.UserListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList
func (mr *MockUserClientMockRecorder) UserList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockUserClient)(nil).UserList), arg0)
}

// UserUpdate mocks base method
func (m *MockUserClient) UserUpdate(arg0 *user.UserUpdateParams) (*user.UserUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", arg0)
	ret0, _ := ret[0].(*user.UserUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUpdate indicates an expected call of UserUpdate
func (mr *MockUserClientMockRecorder) UserUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockUserClient)(nil).UserUpdate), arg0)
}

// MockVolumeSeriesClient is a mock of VolumeSeriesClient interface
type MockVolumeSeriesClient struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeSeriesClientMockRecorder
}

// MockVolumeSeriesClientMockRecorder is the mock recorder for MockVolumeSeriesClient
type MockVolumeSeriesClientMockRecorder struct {
	mock *MockVolumeSeriesClient
}

// NewMockVolumeSeriesClient creates a new mock instance
func NewMockVolumeSeriesClient(ctrl *gomock.Controller) *MockVolumeSeriesClient {
	mock := &MockVolumeSeriesClient{ctrl: ctrl}
	mock.recorder = &MockVolumeSeriesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVolumeSeriesClient) EXPECT() *MockVolumeSeriesClientMockRecorder {
	return m.recorder
}

// VolumeSeriesCreate mocks base method
func (m *MockVolumeSeriesClient) VolumeSeriesCreate(arg0 *volume_series.VolumeSeriesCreateParams) (*volume_series.VolumeSeriesCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesCreate", arg0)
	ret0, _ := ret[0].(*volume_series.VolumeSeriesCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesCreate indicates an expected call of VolumeSeriesCreate
func (mr *MockVolumeSeriesClientMockRecorder) VolumeSeriesCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesCreate", reflect.TypeOf((*MockVolumeSeriesClient)(nil).VolumeSeriesCreate), arg0)
}

// VolumeSeriesDelete mocks base method
func (m *MockVolumeSeriesClient) VolumeSeriesDelete(arg0 *volume_series.VolumeSeriesDeleteParams) (*volume_series.VolumeSeriesDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesDelete", arg0)
	ret0, _ := ret[0].(*volume_series.VolumeSeriesDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesDelete indicates an expected call of VolumeSeriesDelete
func (mr *MockVolumeSeriesClientMockRecorder) VolumeSeriesDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesDelete", reflect.TypeOf((*MockVolumeSeriesClient)(nil).VolumeSeriesDelete), arg0)
}

// VolumeSeriesFetch mocks base method
func (m *MockVolumeSeriesClient) VolumeSeriesFetch(arg0 *volume_series.VolumeSeriesFetchParams) (*volume_series.VolumeSeriesFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesFetch", arg0)
	ret0, _ := ret[0].(*volume_series.VolumeSeriesFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesFetch indicates an expected call of VolumeSeriesFetch
func (mr *MockVolumeSeriesClientMockRecorder) VolumeSeriesFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesFetch", reflect.TypeOf((*MockVolumeSeriesClient)(nil).VolumeSeriesFetch), arg0)
}

// VolumeSeriesList mocks base method
func (m *MockVolumeSeriesClient) VolumeSeriesList(arg0 *volume_series.VolumeSeriesListParams) (*volume_series.VolumeSeriesListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesList", arg0)
	ret0, _ := ret[0].(*volume_series.VolumeSeriesListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesList indicates an expected call of VolumeSeriesList
func (mr *MockVolumeSeriesClientMockRecorder) VolumeSeriesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesList", reflect.TypeOf((*MockVolumeSeriesClient)(nil).VolumeSeriesList), arg0)
}

// VolumeSeriesNewID mocks base method
func (m *MockVolumeSeriesClient) VolumeSeriesNewID(arg0 *volume_series.VolumeSeriesNewIDParams) (*volume_series.VolumeSeriesNewIDOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesNewID", arg0)
	ret0, _ := ret[0].(*volume_series.VolumeSeriesNewIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesNewID indicates an expected call of VolumeSeriesNewID
func (mr *MockVolumeSeriesClientMockRecorder) VolumeSeriesNewID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesNewID", reflect.TypeOf((*MockVolumeSeriesClient)(nil).VolumeSeriesNewID), arg0)
}

// VolumeSeriesPVSpecFetch mocks base method
func (m *MockVolumeSeriesClient) VolumeSeriesPVSpecFetch(arg0 *volume_series.VolumeSeriesPVSpecFetchParams) (*volume_series.VolumeSeriesPVSpecFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesPVSpecFetch", arg0)
	ret0, _ := ret[0].(*volume_series.VolumeSeriesPVSpecFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesPVSpecFetch indicates an expected call of VolumeSeriesPVSpecFetch
func (mr *MockVolumeSeriesClientMockRecorder) VolumeSeriesPVSpecFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesPVSpecFetch", reflect.TypeOf((*MockVolumeSeriesClient)(nil).VolumeSeriesPVSpecFetch), arg0)
}

// VolumeSeriesUpdate mocks base method
func (m *MockVolumeSeriesClient) VolumeSeriesUpdate(arg0 *volume_series.VolumeSeriesUpdateParams) (*volume_series.VolumeSeriesUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesUpdate", arg0)
	ret0, _ := ret[0].(*volume_series.VolumeSeriesUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesUpdate indicates an expected call of VolumeSeriesUpdate
func (mr *MockVolumeSeriesClientMockRecorder) VolumeSeriesUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesUpdate", reflect.TypeOf((*MockVolumeSeriesClient)(nil).VolumeSeriesUpdate), arg0)
}

// MockVolumeSeriesRequestClient is a mock of VolumeSeriesRequestClient interface
type MockVolumeSeriesRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeSeriesRequestClientMockRecorder
}

// MockVolumeSeriesRequestClientMockRecorder is the mock recorder for MockVolumeSeriesRequestClient
type MockVolumeSeriesRequestClientMockRecorder struct {
	mock *MockVolumeSeriesRequestClient
}

// NewMockVolumeSeriesRequestClient creates a new mock instance
func NewMockVolumeSeriesRequestClient(ctrl *gomock.Controller) *MockVolumeSeriesRequestClient {
	mock := &MockVolumeSeriesRequestClient{ctrl: ctrl}
	mock.recorder = &MockVolumeSeriesRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVolumeSeriesRequestClient) EXPECT() *MockVolumeSeriesRequestClientMockRecorder {
	return m.recorder
}

// VolumeSeriesRequestCancel mocks base method
func (m *MockVolumeSeriesRequestClient) VolumeSeriesRequestCancel(arg0 *volume_series_request.VolumeSeriesRequestCancelParams) (*volume_series_request.VolumeSeriesRequestCancelOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesRequestCancel", arg0)
	ret0, _ := ret[0].(*volume_series_request.VolumeSeriesRequestCancelOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesRequestCancel indicates an expected call of VolumeSeriesRequestCancel
func (mr *MockVolumeSeriesRequestClientMockRecorder) VolumeSeriesRequestCancel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesRequestCancel", reflect.TypeOf((*MockVolumeSeriesRequestClient)(nil).VolumeSeriesRequestCancel), arg0)
}

// VolumeSeriesRequestCreate mocks base method
func (m *MockVolumeSeriesRequestClient) VolumeSeriesRequestCreate(arg0 *volume_series_request.VolumeSeriesRequestCreateParams) (*volume_series_request.VolumeSeriesRequestCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesRequestCreate", arg0)
	ret0, _ := ret[0].(*volume_series_request.VolumeSeriesRequestCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesRequestCreate indicates an expected call of VolumeSeriesRequestCreate
func (mr *MockVolumeSeriesRequestClientMockRecorder) VolumeSeriesRequestCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesRequestCreate", reflect.TypeOf((*MockVolumeSeriesRequestClient)(nil).VolumeSeriesRequestCreate), arg0)
}

// VolumeSeriesRequestDelete mocks base method
func (m *MockVolumeSeriesRequestClient) VolumeSeriesRequestDelete(arg0 *volume_series_request.VolumeSeriesRequestDeleteParams) (*volume_series_request.VolumeSeriesRequestDeleteNoContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesRequestDelete", arg0)
	ret0, _ := ret[0].(*volume_series_request.VolumeSeriesRequestDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesRequestDelete indicates an expected call of VolumeSeriesRequestDelete
func (mr *MockVolumeSeriesRequestClientMockRecorder) VolumeSeriesRequestDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesRequestDelete", reflect.TypeOf((*MockVolumeSeriesRequestClient)(nil).VolumeSeriesRequestDelete), arg0)
}

// VolumeSeriesRequestFetch mocks base method
func (m *MockVolumeSeriesRequestClient) VolumeSeriesRequestFetch(arg0 *volume_series_request.VolumeSeriesRequestFetchParams) (*volume_series_request.VolumeSeriesRequestFetchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesRequestFetch", arg0)
	ret0, _ := ret[0].(*volume_series_request.VolumeSeriesRequestFetchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesRequestFetch indicates an expected call of VolumeSeriesRequestFetch
func (mr *MockVolumeSeriesRequestClientMockRecorder) VolumeSeriesRequestFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesRequestFetch", reflect.TypeOf((*MockVolumeSeriesRequestClient)(nil).VolumeSeriesRequestFetch), arg0)
}

// VolumeSeriesRequestList mocks base method
func (m *MockVolumeSeriesRequestClient) VolumeSeriesRequestList(arg0 *volume_series_request.VolumeSeriesRequestListParams) (*volume_series_request.VolumeSeriesRequestListOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesRequestList", arg0)
	ret0, _ := ret[0].(*volume_series_request.VolumeSeriesRequestListOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesRequestList indicates an expected call of VolumeSeriesRequestList
func (mr *MockVolumeSeriesRequestClientMockRecorder) VolumeSeriesRequestList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesRequestList", reflect.TypeOf((*MockVolumeSeriesRequestClient)(nil).VolumeSeriesRequestList), arg0)
}

// VolumeSeriesRequestUpdate mocks base method
func (m *MockVolumeSeriesRequestClient) VolumeSeriesRequestUpdate(arg0 *volume_series_request.VolumeSeriesRequestUpdateParams) (*volume_series_request.VolumeSeriesRequestUpdateOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSeriesRequestUpdate", arg0)
	ret0, _ := ret[0].(*volume_series_request.VolumeSeriesRequestUpdateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSeriesRequestUpdate indicates an expected call of VolumeSeriesRequestUpdate
func (mr *MockVolumeSeriesRequestClientMockRecorder) VolumeSeriesRequestUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSeriesRequestUpdate", reflect.TypeOf((*MockVolumeSeriesRequestClient)(nil).VolumeSeriesRequestUpdate), arg0)
}

// MockWatchersClient is a mock of WatchersClient interface
type MockWatchersClient struct {
	ctrl     *gomock.Controller
	recorder *MockWatchersClientMockRecorder
}

// MockWatchersClientMockRecorder is the mock recorder for MockWatchersClient
type MockWatchersClientMockRecorder struct {
	mock *MockWatchersClient
}

// NewMockWatchersClient creates a new mock instance
func NewMockWatchersClient(ctrl *gomock.Controller) *MockWatchersClient {
	mock := &MockWatchersClient{ctrl: ctrl}
	mock.recorder = &MockWatchersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWatchersClient) EXPECT() *MockWatchersClientMockRecorder {
	return m.recorder
}

// WatcherCreate mocks base method
func (m *MockWatchersClient) WatcherCreate(arg0 *watchers.WatcherCreateParams) (*watchers.WatcherCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatcherCreate", arg0)
	ret0, _ := ret[0].(*watchers.WatcherCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatcherCreate indicates an expected call of WatcherCreate
func (mr *MockWatchersClientMockRecorder) WatcherCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatcherCreate", reflect.TypeOf((*MockWatchersClient)(nil).WatcherCreate), arg0)
}
