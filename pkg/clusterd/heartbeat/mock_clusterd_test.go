// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nuvoloso/kontroller/pkg/clusterd (interfaces: AppServant)

package heartbeat

import (
	context "context"
	models "github.com/Nuvoloso/kontroller/pkg/autogen/models"
	mgmtclient "github.com/Nuvoloso/kontroller/pkg/mgmtclient"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAppServant is a mock of AppServant interface
type MockAppServant struct {
	ctrl     *gomock.Controller
	recorder *MockAppServantMockRecorder
}

// MockAppServantMockRecorder is the mock recorder for MockAppServant
type MockAppServantMockRecorder struct {
	mock *MockAppServant
}

// NewMockAppServant creates a new mock instance
func NewMockAppServant(ctrl *gomock.Controller) *MockAppServant {
	mock := &MockAppServant{ctrl: ctrl}
	mock.recorder = &MockAppServantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppServant) EXPECT() *MockAppServantMockRecorder {
	return m.recorder
}

// FatalError mocks base method
func (m *MockAppServant) FatalError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FatalError", arg0)
}

// FatalError indicates an expected call of FatalError
func (mr *MockAppServantMockRecorder) FatalError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FatalError", reflect.TypeOf((*MockAppServant)(nil).FatalError), arg0)
}

// GetAPIArgs mocks base method
func (m *MockAppServant) GetAPIArgs() *mgmtclient.APIArgs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIArgs")
	ret0, _ := ret[0].(*mgmtclient.APIArgs)
	return ret0
}

// GetAPIArgs indicates an expected call of GetAPIArgs
func (mr *MockAppServantMockRecorder) GetAPIArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIArgs", reflect.TypeOf((*MockAppServant)(nil).GetAPIArgs))
}

// GetServicePlan mocks base method
func (m *MockAppServant) GetServicePlan(arg0 context.Context, arg1 string) (*models.ServicePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicePlan", arg0, arg1)
	ret0, _ := ret[0].(*models.ServicePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicePlan indicates an expected call of GetServicePlan
func (mr *MockAppServantMockRecorder) GetServicePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicePlan", reflect.TypeOf((*MockAppServant)(nil).GetServicePlan), arg0, arg1)
}

// InitializeCSPClient mocks base method
func (m *MockAppServant) InitializeCSPClient(arg0 *models.CSPDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeCSPClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeCSPClient indicates an expected call of InitializeCSPClient
func (mr *MockAppServantMockRecorder) InitializeCSPClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeCSPClient", reflect.TypeOf((*MockAppServant)(nil).InitializeCSPClient), arg0)
}
