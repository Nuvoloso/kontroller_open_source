// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nuvoloso/kontroller/pkg/gcsdk (interfaces: API,ComputeService,DisksService,DisksDeleteCall,DisksGetCall,DisksInsertCall,DisksListCall,DisksSetLabelsCall,InstancesService,InstancesAttachDiskCall,InstancesDetachDiskCall,ZoneOperationsService,ZoneOperationsGetCall,ZonesService,ZonesGetCall,StorageClient,BucketHandle)

// Package mock is a generated GoMock package.
package mock

import (
	storage "cloud.google.com/go/storage"
	context "context"
	gcsdk "github.com/Nuvoloso/kontroller/pkg/gcsdk"
	gomock "github.com/golang/mock/gomock"
	v1 "google.golang.org/api/compute/v1"
	googleapi "google.golang.org/api/googleapi"
	option "google.golang.org/api/option"
	reflect "reflect"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// NewComputeService mocks base method
func (m *MockAPI) NewComputeService(arg0 context.Context, arg1 ...option.ClientOption) (gcsdk.ComputeService, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewComputeService", varargs...)
	ret0, _ := ret[0].(gcsdk.ComputeService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewComputeService indicates an expected call of NewComputeService
func (mr *MockAPIMockRecorder) NewComputeService(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewComputeService", reflect.TypeOf((*MockAPI)(nil).NewComputeService), varargs...)
}

// NewStorageClient mocks base method
func (m *MockAPI) NewStorageClient(arg0 context.Context, arg1 ...option.ClientOption) (gcsdk.StorageClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewStorageClient", varargs...)
	ret0, _ := ret[0].(gcsdk.StorageClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStorageClient indicates an expected call of NewStorageClient
func (mr *MockAPIMockRecorder) NewStorageClient(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStorageClient", reflect.TypeOf((*MockAPI)(nil).NewStorageClient), varargs...)
}

// MockComputeService is a mock of ComputeService interface
type MockComputeService struct {
	ctrl     *gomock.Controller
	recorder *MockComputeServiceMockRecorder
}

// MockComputeServiceMockRecorder is the mock recorder for MockComputeService
type MockComputeServiceMockRecorder struct {
	mock *MockComputeService
}

// NewMockComputeService creates a new mock instance
func NewMockComputeService(ctrl *gomock.Controller) *MockComputeService {
	mock := &MockComputeService{ctrl: ctrl}
	mock.recorder = &MockComputeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComputeService) EXPECT() *MockComputeServiceMockRecorder {
	return m.recorder
}

// Disks mocks base method
func (m *MockComputeService) Disks() gcsdk.DisksService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disks")
	ret0, _ := ret[0].(gcsdk.DisksService)
	return ret0
}

// Disks indicates an expected call of Disks
func (mr *MockComputeServiceMockRecorder) Disks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disks", reflect.TypeOf((*MockComputeService)(nil).Disks))
}

// Instances mocks base method
func (m *MockComputeService) Instances() gcsdk.InstancesService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instances")
	ret0, _ := ret[0].(gcsdk.InstancesService)
	return ret0
}

// Instances indicates an expected call of Instances
func (mr *MockComputeServiceMockRecorder) Instances() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instances", reflect.TypeOf((*MockComputeService)(nil).Instances))
}

// ZoneOperations mocks base method
func (m *MockComputeService) ZoneOperations() gcsdk.ZoneOperationsService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZoneOperations")
	ret0, _ := ret[0].(gcsdk.ZoneOperationsService)
	return ret0
}

// ZoneOperations indicates an expected call of ZoneOperations
func (mr *MockComputeServiceMockRecorder) ZoneOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZoneOperations", reflect.TypeOf((*MockComputeService)(nil).ZoneOperations))
}

// Zones mocks base method
func (m *MockComputeService) Zones() gcsdk.ZonesService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zones")
	ret0, _ := ret[0].(gcsdk.ZonesService)
	return ret0
}

// Zones indicates an expected call of Zones
func (mr *MockComputeServiceMockRecorder) Zones() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zones", reflect.TypeOf((*MockComputeService)(nil).Zones))
}

// MockDisksService is a mock of DisksService interface
type MockDisksService struct {
	ctrl     *gomock.Controller
	recorder *MockDisksServiceMockRecorder
}

// MockDisksServiceMockRecorder is the mock recorder for MockDisksService
type MockDisksServiceMockRecorder struct {
	mock *MockDisksService
}

// NewMockDisksService creates a new mock instance
func NewMockDisksService(ctrl *gomock.Controller) *MockDisksService {
	mock := &MockDisksService{ctrl: ctrl}
	mock.recorder = &MockDisksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisksService) EXPECT() *MockDisksServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockDisksService) Delete(arg0, arg1, arg2 string) gcsdk.DisksDeleteCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(gcsdk.DisksDeleteCall)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDisksServiceMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDisksService)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockDisksService) Get(arg0, arg1, arg2 string) gcsdk.DisksGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(gcsdk.DisksGetCall)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockDisksServiceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDisksService)(nil).Get), arg0, arg1, arg2)
}

// Insert mocks base method
func (m *MockDisksService) Insert(arg0, arg1 string, arg2 *v1.Disk) gcsdk.DisksInsertCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1, arg2)
	ret0, _ := ret[0].(gcsdk.DisksInsertCall)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockDisksServiceMockRecorder) Insert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDisksService)(nil).Insert), arg0, arg1, arg2)
}

// List mocks base method
func (m *MockDisksService) List(arg0, arg1 string) gcsdk.DisksListCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(gcsdk.DisksListCall)
	return ret0
}

// List indicates an expected call of List
func (mr *MockDisksServiceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDisksService)(nil).List), arg0, arg1)
}

// SetLabels mocks base method
func (m *MockDisksService) SetLabels(arg0, arg1, arg2 string, arg3 *v1.ZoneSetLabelsRequest) gcsdk.DisksSetLabelsCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLabels", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(gcsdk.DisksSetLabelsCall)
	return ret0
}

// SetLabels indicates an expected call of SetLabels
func (mr *MockDisksServiceMockRecorder) SetLabels(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabels", reflect.TypeOf((*MockDisksService)(nil).SetLabels), arg0, arg1, arg2, arg3)
}

// MockDisksDeleteCall is a mock of DisksDeleteCall interface
type MockDisksDeleteCall struct {
	ctrl     *gomock.Controller
	recorder *MockDisksDeleteCallMockRecorder
}

// MockDisksDeleteCallMockRecorder is the mock recorder for MockDisksDeleteCall
type MockDisksDeleteCallMockRecorder struct {
	mock *MockDisksDeleteCall
}

// NewMockDisksDeleteCall creates a new mock instance
func NewMockDisksDeleteCall(ctrl *gomock.Controller) *MockDisksDeleteCall {
	mock := &MockDisksDeleteCall{ctrl: ctrl}
	mock.recorder = &MockDisksDeleteCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisksDeleteCall) EXPECT() *MockDisksDeleteCallMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockDisksDeleteCall) Context(arg0 context.Context) gcsdk.DisksDeleteCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(gcsdk.DisksDeleteCall)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDisksDeleteCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDisksDeleteCall)(nil).Context), arg0)
}

// Do mocks base method
func (m *MockDisksDeleteCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockDisksDeleteCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDisksDeleteCall)(nil).Do), arg0...)
}

// MockDisksGetCall is a mock of DisksGetCall interface
type MockDisksGetCall struct {
	ctrl     *gomock.Controller
	recorder *MockDisksGetCallMockRecorder
}

// MockDisksGetCallMockRecorder is the mock recorder for MockDisksGetCall
type MockDisksGetCallMockRecorder struct {
	mock *MockDisksGetCall
}

// NewMockDisksGetCall creates a new mock instance
func NewMockDisksGetCall(ctrl *gomock.Controller) *MockDisksGetCall {
	mock := &MockDisksGetCall{ctrl: ctrl}
	mock.recorder = &MockDisksGetCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisksGetCall) EXPECT() *MockDisksGetCallMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockDisksGetCall) Context(arg0 context.Context) gcsdk.DisksGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(gcsdk.DisksGetCall)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDisksGetCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDisksGetCall)(nil).Context), arg0)
}

// Do mocks base method
func (m *MockDisksGetCall) Do(arg0 ...googleapi.CallOption) (*v1.Disk, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockDisksGetCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDisksGetCall)(nil).Do), arg0...)
}

// MockDisksInsertCall is a mock of DisksInsertCall interface
type MockDisksInsertCall struct {
	ctrl     *gomock.Controller
	recorder *MockDisksInsertCallMockRecorder
}

// MockDisksInsertCallMockRecorder is the mock recorder for MockDisksInsertCall
type MockDisksInsertCallMockRecorder struct {
	mock *MockDisksInsertCall
}

// NewMockDisksInsertCall creates a new mock instance
func NewMockDisksInsertCall(ctrl *gomock.Controller) *MockDisksInsertCall {
	mock := &MockDisksInsertCall{ctrl: ctrl}
	mock.recorder = &MockDisksInsertCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisksInsertCall) EXPECT() *MockDisksInsertCallMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockDisksInsertCall) Context(arg0 context.Context) gcsdk.DisksInsertCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(gcsdk.DisksInsertCall)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDisksInsertCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDisksInsertCall)(nil).Context), arg0)
}

// Do mocks base method
func (m *MockDisksInsertCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockDisksInsertCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDisksInsertCall)(nil).Do), arg0...)
}

// MockDisksListCall is a mock of DisksListCall interface
type MockDisksListCall struct {
	ctrl     *gomock.Controller
	recorder *MockDisksListCallMockRecorder
}

// MockDisksListCallMockRecorder is the mock recorder for MockDisksListCall
type MockDisksListCallMockRecorder struct {
	mock *MockDisksListCall
}

// NewMockDisksListCall creates a new mock instance
func NewMockDisksListCall(ctrl *gomock.Controller) *MockDisksListCall {
	mock := &MockDisksListCall{ctrl: ctrl}
	mock.recorder = &MockDisksListCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisksListCall) EXPECT() *MockDisksListCallMockRecorder {
	return m.recorder
}

// Filter mocks base method
func (m *MockDisksListCall) Filter(arg0 string) gcsdk.DisksListCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0)
	ret0, _ := ret[0].(gcsdk.DisksListCall)
	return ret0
}

// Filter indicates an expected call of Filter
func (mr *MockDisksListCallMockRecorder) Filter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockDisksListCall)(nil).Filter), arg0)
}

// Pages mocks base method
func (m *MockDisksListCall) Pages(arg0 context.Context, arg1 func(*v1.DiskList) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pages indicates an expected call of Pages
func (mr *MockDisksListCallMockRecorder) Pages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pages", reflect.TypeOf((*MockDisksListCall)(nil).Pages), arg0, arg1)
}

// MockDisksSetLabelsCall is a mock of DisksSetLabelsCall interface
type MockDisksSetLabelsCall struct {
	ctrl     *gomock.Controller
	recorder *MockDisksSetLabelsCallMockRecorder
}

// MockDisksSetLabelsCallMockRecorder is the mock recorder for MockDisksSetLabelsCall
type MockDisksSetLabelsCallMockRecorder struct {
	mock *MockDisksSetLabelsCall
}

// NewMockDisksSetLabelsCall creates a new mock instance
func NewMockDisksSetLabelsCall(ctrl *gomock.Controller) *MockDisksSetLabelsCall {
	mock := &MockDisksSetLabelsCall{ctrl: ctrl}
	mock.recorder = &MockDisksSetLabelsCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisksSetLabelsCall) EXPECT() *MockDisksSetLabelsCallMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockDisksSetLabelsCall) Context(arg0 context.Context) gcsdk.DisksSetLabelsCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(gcsdk.DisksSetLabelsCall)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDisksSetLabelsCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDisksSetLabelsCall)(nil).Context), arg0)
}

// Do mocks base method
func (m *MockDisksSetLabelsCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockDisksSetLabelsCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDisksSetLabelsCall)(nil).Do), arg0...)
}

// MockInstancesService is a mock of InstancesService interface
type MockInstancesService struct {
	ctrl     *gomock.Controller
	recorder *MockInstancesServiceMockRecorder
}

// MockInstancesServiceMockRecorder is the mock recorder for MockInstancesService
type MockInstancesServiceMockRecorder struct {
	mock *MockInstancesService
}

// NewMockInstancesService creates a new mock instance
func NewMockInstancesService(ctrl *gomock.Controller) *MockInstancesService {
	mock := &MockInstancesService{ctrl: ctrl}
	mock.recorder = &MockInstancesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstancesService) EXPECT() *MockInstancesServiceMockRecorder {
	return m.recorder
}

// AttachDisk mocks base method
func (m *MockInstancesService) AttachDisk(arg0, arg1, arg2 string, arg3 *v1.AttachedDisk) gcsdk.InstancesAttachDiskCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachDisk", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(gcsdk.InstancesAttachDiskCall)
	return ret0
}

// AttachDisk indicates an expected call of AttachDisk
func (mr *MockInstancesServiceMockRecorder) AttachDisk(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachDisk", reflect.TypeOf((*MockInstancesService)(nil).AttachDisk), arg0, arg1, arg2, arg3)
}

// DetachDisk mocks base method
func (m *MockInstancesService) DetachDisk(arg0, arg1, arg2, arg3 string) gcsdk.InstancesDetachDiskCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachDisk", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(gcsdk.InstancesDetachDiskCall)
	return ret0
}

// DetachDisk indicates an expected call of DetachDisk
func (mr *MockInstancesServiceMockRecorder) DetachDisk(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachDisk", reflect.TypeOf((*MockInstancesService)(nil).DetachDisk), arg0, arg1, arg2, arg3)
}

// MockInstancesAttachDiskCall is a mock of InstancesAttachDiskCall interface
type MockInstancesAttachDiskCall struct {
	ctrl     *gomock.Controller
	recorder *MockInstancesAttachDiskCallMockRecorder
}

// MockInstancesAttachDiskCallMockRecorder is the mock recorder for MockInstancesAttachDiskCall
type MockInstancesAttachDiskCallMockRecorder struct {
	mock *MockInstancesAttachDiskCall
}

// NewMockInstancesAttachDiskCall creates a new mock instance
func NewMockInstancesAttachDiskCall(ctrl *gomock.Controller) *MockInstancesAttachDiskCall {
	mock := &MockInstancesAttachDiskCall{ctrl: ctrl}
	mock.recorder = &MockInstancesAttachDiskCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstancesAttachDiskCall) EXPECT() *MockInstancesAttachDiskCallMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockInstancesAttachDiskCall) Context(arg0 context.Context) gcsdk.InstancesAttachDiskCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(gcsdk.InstancesAttachDiskCall)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockInstancesAttachDiskCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInstancesAttachDiskCall)(nil).Context), arg0)
}

// Do mocks base method
func (m *MockInstancesAttachDiskCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockInstancesAttachDiskCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockInstancesAttachDiskCall)(nil).Do), arg0...)
}

// ForceAttach mocks base method
func (m *MockInstancesAttachDiskCall) ForceAttach(arg0 bool) gcsdk.InstancesAttachDiskCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceAttach", arg0)
	ret0, _ := ret[0].(gcsdk.InstancesAttachDiskCall)
	return ret0
}

// ForceAttach indicates an expected call of ForceAttach
func (mr *MockInstancesAttachDiskCallMockRecorder) ForceAttach(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceAttach", reflect.TypeOf((*MockInstancesAttachDiskCall)(nil).ForceAttach), arg0)
}

// MockInstancesDetachDiskCall is a mock of InstancesDetachDiskCall interface
type MockInstancesDetachDiskCall struct {
	ctrl     *gomock.Controller
	recorder *MockInstancesDetachDiskCallMockRecorder
}

// MockInstancesDetachDiskCallMockRecorder is the mock recorder for MockInstancesDetachDiskCall
type MockInstancesDetachDiskCallMockRecorder struct {
	mock *MockInstancesDetachDiskCall
}

// NewMockInstancesDetachDiskCall creates a new mock instance
func NewMockInstancesDetachDiskCall(ctrl *gomock.Controller) *MockInstancesDetachDiskCall {
	mock := &MockInstancesDetachDiskCall{ctrl: ctrl}
	mock.recorder = &MockInstancesDetachDiskCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstancesDetachDiskCall) EXPECT() *MockInstancesDetachDiskCallMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockInstancesDetachDiskCall) Context(arg0 context.Context) gcsdk.InstancesDetachDiskCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(gcsdk.InstancesDetachDiskCall)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockInstancesDetachDiskCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInstancesDetachDiskCall)(nil).Context), arg0)
}

// Do mocks base method
func (m *MockInstancesDetachDiskCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockInstancesDetachDiskCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockInstancesDetachDiskCall)(nil).Do), arg0...)
}

// MockZoneOperationsService is a mock of ZoneOperationsService interface
type MockZoneOperationsService struct {
	ctrl     *gomock.Controller
	recorder *MockZoneOperationsServiceMockRecorder
}

// MockZoneOperationsServiceMockRecorder is the mock recorder for MockZoneOperationsService
type MockZoneOperationsServiceMockRecorder struct {
	mock *MockZoneOperationsService
}

// NewMockZoneOperationsService creates a new mock instance
func NewMockZoneOperationsService(ctrl *gomock.Controller) *MockZoneOperationsService {
	mock := &MockZoneOperationsService{ctrl: ctrl}
	mock.recorder = &MockZoneOperationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZoneOperationsService) EXPECT() *MockZoneOperationsServiceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockZoneOperationsService) Get(arg0, arg1, arg2 string) gcsdk.ZoneOperationsGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(gcsdk.ZoneOperationsGetCall)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockZoneOperationsServiceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockZoneOperationsService)(nil).Get), arg0, arg1, arg2)
}

// MockZoneOperationsGetCall is a mock of ZoneOperationsGetCall interface
type MockZoneOperationsGetCall struct {
	ctrl     *gomock.Controller
	recorder *MockZoneOperationsGetCallMockRecorder
}

// MockZoneOperationsGetCallMockRecorder is the mock recorder for MockZoneOperationsGetCall
type MockZoneOperationsGetCallMockRecorder struct {
	mock *MockZoneOperationsGetCall
}

// NewMockZoneOperationsGetCall creates a new mock instance
func NewMockZoneOperationsGetCall(ctrl *gomock.Controller) *MockZoneOperationsGetCall {
	mock := &MockZoneOperationsGetCall{ctrl: ctrl}
	mock.recorder = &MockZoneOperationsGetCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZoneOperationsGetCall) EXPECT() *MockZoneOperationsGetCallMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockZoneOperationsGetCall) Context(arg0 context.Context) gcsdk.ZoneOperationsGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(gcsdk.ZoneOperationsGetCall)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockZoneOperationsGetCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockZoneOperationsGetCall)(nil).Context), arg0)
}

// Do mocks base method
func (m *MockZoneOperationsGetCall) Do(arg0 ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockZoneOperationsGetCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockZoneOperationsGetCall)(nil).Do), arg0...)
}

// MockZonesService is a mock of ZonesService interface
type MockZonesService struct {
	ctrl     *gomock.Controller
	recorder *MockZonesServiceMockRecorder
}

// MockZonesServiceMockRecorder is the mock recorder for MockZonesService
type MockZonesServiceMockRecorder struct {
	mock *MockZonesService
}

// NewMockZonesService creates a new mock instance
func NewMockZonesService(ctrl *gomock.Controller) *MockZonesService {
	mock := &MockZonesService{ctrl: ctrl}
	mock.recorder = &MockZonesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZonesService) EXPECT() *MockZonesServiceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockZonesService) Get(arg0, arg1 string) gcsdk.ZonesGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(gcsdk.ZonesGetCall)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockZonesServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockZonesService)(nil).Get), arg0, arg1)
}

// MockZonesGetCall is a mock of ZonesGetCall interface
type MockZonesGetCall struct {
	ctrl     *gomock.Controller
	recorder *MockZonesGetCallMockRecorder
}

// MockZonesGetCallMockRecorder is the mock recorder for MockZonesGetCall
type MockZonesGetCallMockRecorder struct {
	mock *MockZonesGetCall
}

// NewMockZonesGetCall creates a new mock instance
func NewMockZonesGetCall(ctrl *gomock.Controller) *MockZonesGetCall {
	mock := &MockZonesGetCall{ctrl: ctrl}
	mock.recorder = &MockZonesGetCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZonesGetCall) EXPECT() *MockZonesGetCallMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockZonesGetCall) Context(arg0 context.Context) gcsdk.ZonesGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", arg0)
	ret0, _ := ret[0].(gcsdk.ZonesGetCall)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockZonesGetCallMockRecorder) Context(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockZonesGetCall)(nil).Context), arg0)
}

// Do mocks base method
func (m *MockZonesGetCall) Do(arg0 ...googleapi.CallOption) (*v1.Zone, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockZonesGetCallMockRecorder) Do(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockZonesGetCall)(nil).Do), arg0...)
}

// MockStorageClient is a mock of StorageClient interface
type MockStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClientMockRecorder
}

// MockStorageClientMockRecorder is the mock recorder for MockStorageClient
type MockStorageClientMockRecorder struct {
	mock *MockStorageClient
}

// NewMockStorageClient creates a new mock instance
func NewMockStorageClient(ctrl *gomock.Controller) *MockStorageClient {
	mock := &MockStorageClient{ctrl: ctrl}
	mock.recorder = &MockStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageClient) EXPECT() *MockStorageClientMockRecorder {
	return m.recorder
}

// Bucket mocks base method
func (m *MockStorageClient) Bucket(arg0 string) gcsdk.BucketHandle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bucket", arg0)
	ret0, _ := ret[0].(gcsdk.BucketHandle)
	return ret0
}

// Bucket indicates an expected call of Bucket
func (mr *MockStorageClientMockRecorder) Bucket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockStorageClient)(nil).Bucket), arg0)
}

// MockBucketHandle is a mock of BucketHandle interface
type MockBucketHandle struct {
	ctrl     *gomock.Controller
	recorder *MockBucketHandleMockRecorder
}

// MockBucketHandleMockRecorder is the mock recorder for MockBucketHandle
type MockBucketHandleMockRecorder struct {
	mock *MockBucketHandle
}

// NewMockBucketHandle creates a new mock instance
func NewMockBucketHandle(ctrl *gomock.Controller) *MockBucketHandle {
	mock := &MockBucketHandle{ctrl: ctrl}
	mock.recorder = &MockBucketHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBucketHandle) EXPECT() *MockBucketHandleMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBucketHandle) Create(arg0 context.Context, arg1 string, arg2 *storage.BucketAttrs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockBucketHandleMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBucketHandle)(nil).Create), arg0, arg1, arg2)
}
