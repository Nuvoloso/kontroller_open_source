// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nuvoloso/kontroller/pkg/mongodb (interfaces: Client,ObjectDocumentHandler)

package mongodb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	options "go.mongodb.org/mongo-driver/mongo/options"
	readpref "go.mongodb.org/mongo-driver/mongo/readpref"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Database mocks base method
func (m *MockClient) Database(arg0 string, arg1 ...*options.DatabaseOptions) Database {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Database", varargs...)
	ret0, _ := ret[0].(Database)
	return ret0
}

// Database indicates an expected call of Database
func (mr *MockClientMockRecorder) Database(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockClient)(nil).Database), varargs...)
}

// Disconnect mocks base method
func (m *MockClient) Disconnect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockClientMockRecorder) Disconnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockClient)(nil).Disconnect), arg0)
}

// Ping mocks base method
func (m *MockClient) Ping(arg0 context.Context, arg1 *readpref.ReadPref) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockClientMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClient)(nil).Ping), arg0, arg1)
}

// MockObjectDocumentHandler is a mock of ObjectDocumentHandler interface
type MockObjectDocumentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockObjectDocumentHandlerMockRecorder
}

// MockObjectDocumentHandlerMockRecorder is the mock recorder for MockObjectDocumentHandler
type MockObjectDocumentHandlerMockRecorder struct {
	mock *MockObjectDocumentHandler
}

// NewMockObjectDocumentHandler creates a new mock instance
func NewMockObjectDocumentHandler(ctrl *gomock.Controller) *MockObjectDocumentHandler {
	mock := &MockObjectDocumentHandler{ctrl: ctrl}
	mock.recorder = &MockObjectDocumentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObjectDocumentHandler) EXPECT() *MockObjectDocumentHandlerMockRecorder {
	return m.recorder
}

// CName mocks base method
func (m *MockObjectDocumentHandler) CName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CName")
	ret0, _ := ret[0].(string)
	return ret0
}

// CName indicates an expected call of CName
func (mr *MockObjectDocumentHandlerMockRecorder) CName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CName", reflect.TypeOf((*MockObjectDocumentHandler)(nil).CName))
}

// Initialize mocks base method
func (m *MockObjectDocumentHandler) Initialize(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockObjectDocumentHandlerMockRecorder) Initialize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockObjectDocumentHandler)(nil).Initialize), arg0)
}

// Start mocks base method
func (m *MockObjectDocumentHandler) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockObjectDocumentHandlerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockObjectDocumentHandler)(nil).Start), arg0)
}
