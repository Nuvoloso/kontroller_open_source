// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nuvoloso/kontroller/pkg/centrald/mongods (interfaces: DBAPI,ObjectDocumentHandler,ObjectDocumentHandlerCRUD)

package mongods

import (
	context "context"
	centrald "github.com/Nuvoloso/kontroller/pkg/centrald"
	mongodb "github.com/Nuvoloso/kontroller/pkg/mongodb"
	gomock "github.com/golang/mock/gomock"
	go_logging "github.com/op/go-logging"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
	reflect "reflect"
	time "time"
)

// MockDBAPI is a mock of DBAPI interface
type MockDBAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDBAPIMockRecorder
}

// MockDBAPIMockRecorder is the mock recorder for MockDBAPI
type MockDBAPIMockRecorder struct {
	mock *MockDBAPI
}

// NewMockDBAPI creates a new mock instance
func NewMockDBAPI(ctrl *gomock.Controller) *MockDBAPI {
	mock := &MockDBAPI{ctrl: ctrl}
	mock.recorder = &MockDBAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBAPI) EXPECT() *MockDBAPIMockRecorder {
	return m.recorder
}

// BaseDataPathName mocks base method
func (m *MockDBAPI) BaseDataPathName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseDataPathName")
	ret0, _ := ret[0].(string)
	return ret0
}

// BaseDataPathName indicates an expected call of BaseDataPathName
func (mr *MockDBAPIMockRecorder) BaseDataPathName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseDataPathName", reflect.TypeOf((*MockDBAPI)(nil).BaseDataPathName))
}

// Client mocks base method
func (m *MockDBAPI) Client() mongodb.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(mongodb.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockDBAPIMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockDBAPI)(nil).Client))
}

// Connect mocks base method
func (m *MockDBAPI) Connect(arg0 mongodb.ObjectDocumentHandlerMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockDBAPIMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDBAPI)(nil).Connect), arg0)
}

// DBName mocks base method
func (m *MockDBAPI) DBName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DBName indicates an expected call of DBName
func (mr *MockDBAPIMockRecorder) DBName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBName", reflect.TypeOf((*MockDBAPI)(nil).DBName))
}

// DBTimeout mocks base method
func (m *MockDBAPI) DBTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// DBTimeout indicates an expected call of DBTimeout
func (mr *MockDBAPIMockRecorder) DBTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBTimeout", reflect.TypeOf((*MockDBAPI)(nil).DBTimeout))
}

// ErrorCode mocks base method
func (m *MockDBAPI) ErrorCode(arg0 error) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorCode", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// ErrorCode indicates an expected call of ErrorCode
func (mr *MockDBAPIMockRecorder) ErrorCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorCode", reflect.TypeOf((*MockDBAPI)(nil).ErrorCode), arg0)
}

// Logger mocks base method
func (m *MockDBAPI) Logger() *go_logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*go_logging.Logger)
	return ret0
}

// Logger indicates an expected call of Logger
func (mr *MockDBAPIMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockDBAPI)(nil).Logger))
}

// MustBeInitializing mocks base method
func (m *MockDBAPI) MustBeInitializing() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustBeInitializing")
	ret0, _ := ret[0].(error)
	return ret0
}

// MustBeInitializing indicates an expected call of MustBeInitializing
func (mr *MockDBAPIMockRecorder) MustBeInitializing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustBeInitializing", reflect.TypeOf((*MockDBAPI)(nil).MustBeInitializing))
}

// MustBeReady mocks base method
func (m *MockDBAPI) MustBeReady() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustBeReady")
	ret0, _ := ret[0].(error)
	return ret0
}

// MustBeReady indicates an expected call of MustBeReady
func (mr *MockDBAPIMockRecorder) MustBeReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustBeReady", reflect.TypeOf((*MockDBAPI)(nil).MustBeReady))
}

// Terminate mocks base method
func (m *MockDBAPI) Terminate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Terminate")
}

// Terminate indicates an expected call of Terminate
func (mr *MockDBAPIMockRecorder) Terminate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockDBAPI)(nil).Terminate))
}

// WrapError mocks base method
func (m *MockDBAPI) WrapError(arg0 error, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrapError", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WrapError indicates an expected call of WrapError
func (mr *MockDBAPIMockRecorder) WrapError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapError", reflect.TypeOf((*MockDBAPI)(nil).WrapError), arg0, arg1)
}

// MockObjectDocumentHandler is a mock of ObjectDocumentHandler interface
type MockObjectDocumentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockObjectDocumentHandlerMockRecorder
}

// MockObjectDocumentHandlerMockRecorder is the mock recorder for MockObjectDocumentHandler
type MockObjectDocumentHandlerMockRecorder struct {
	mock *MockObjectDocumentHandler
}

// NewMockObjectDocumentHandler creates a new mock instance
func NewMockObjectDocumentHandler(ctrl *gomock.Controller) *MockObjectDocumentHandler {
	mock := &MockObjectDocumentHandler{ctrl: ctrl}
	mock.recorder = &MockObjectDocumentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObjectDocumentHandler) EXPECT() *MockObjectDocumentHandlerMockRecorder {
	return m.recorder
}

// CName mocks base method
func (m *MockObjectDocumentHandler) CName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CName")
	ret0, _ := ret[0].(string)
	return ret0
}

// CName indicates an expected call of CName
func (mr *MockObjectDocumentHandlerMockRecorder) CName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CName", reflect.TypeOf((*MockObjectDocumentHandler)(nil).CName))
}

// Claim mocks base method
func (m *MockObjectDocumentHandler) Claim(arg0 DBAPI, arg1 ObjectDocumentHandlerCRUD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Claim", arg0, arg1)
}

// Claim indicates an expected call of Claim
func (mr *MockObjectDocumentHandlerMockRecorder) Claim(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claim", reflect.TypeOf((*MockObjectDocumentHandler)(nil).Claim), arg0, arg1)
}

// Indexes mocks base method
func (m *MockObjectDocumentHandler) Indexes() []mongo.IndexModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Indexes")
	ret0, _ := ret[0].([]mongo.IndexModel)
	return ret0
}

// Indexes indicates an expected call of Indexes
func (mr *MockObjectDocumentHandlerMockRecorder) Indexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Indexes", reflect.TypeOf((*MockObjectDocumentHandler)(nil).Indexes))
}

// Initialize mocks base method
func (m *MockObjectDocumentHandler) Initialize(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockObjectDocumentHandlerMockRecorder) Initialize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockObjectDocumentHandler)(nil).Initialize), arg0)
}

// NewObject mocks base method
func (m *MockObjectDocumentHandler) NewObject() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewObject")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// NewObject indicates an expected call of NewObject
func (mr *MockObjectDocumentHandlerMockRecorder) NewObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewObject", reflect.TypeOf((*MockObjectDocumentHandler)(nil).NewObject))
}

// Ops mocks base method
func (m *MockObjectDocumentHandler) Ops() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ops")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Ops indicates an expected call of Ops
func (mr *MockObjectDocumentHandlerMockRecorder) Ops() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ops", reflect.TypeOf((*MockObjectDocumentHandler)(nil).Ops))
}

// Start mocks base method
func (m *MockObjectDocumentHandler) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockObjectDocumentHandlerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockObjectDocumentHandler)(nil).Start), arg0)
}

// MockObjectDocumentHandlerCRUD is a mock of ObjectDocumentHandlerCRUD interface
type MockObjectDocumentHandlerCRUD struct {
	ctrl     *gomock.Controller
	recorder *MockObjectDocumentHandlerCRUDMockRecorder
}

// MockObjectDocumentHandlerCRUDMockRecorder is the mock recorder for MockObjectDocumentHandlerCRUD
type MockObjectDocumentHandlerCRUDMockRecorder struct {
	mock *MockObjectDocumentHandlerCRUD
}

// NewMockObjectDocumentHandlerCRUD creates a new mock instance
func NewMockObjectDocumentHandlerCRUD(ctrl *gomock.Controller) *MockObjectDocumentHandlerCRUD {
	mock := &MockObjectDocumentHandlerCRUD{ctrl: ctrl}
	mock.recorder = &MockObjectDocumentHandlerCRUDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObjectDocumentHandlerCRUD) EXPECT() *MockObjectDocumentHandlerCRUDMockRecorder {
	return m.recorder
}

// Aggregate mocks base method
func (m *MockObjectDocumentHandlerCRUD) Aggregate(arg0 context.Context, arg1 ObjectDocumentHandler, arg2 interface{}, arg3 primitive.M) ([]*centrald.Aggregation, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*centrald.Aggregation)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Aggregate indicates an expected call of Aggregate
func (mr *MockObjectDocumentHandlerCRUDMockRecorder) Aggregate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockObjectDocumentHandlerCRUD)(nil).Aggregate), arg0, arg1, arg2, arg3)
}

// Count mocks base method
func (m *MockObjectDocumentHandlerCRUD) Count(arg0 context.Context, arg1 ObjectDocumentHandler, arg2 primitive.M, arg3 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockObjectDocumentHandlerCRUDMockRecorder) Count(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockObjectDocumentHandlerCRUD)(nil).Count), arg0, arg1, arg2, arg3)
}

// CreateIndexes mocks base method
func (m *MockObjectDocumentHandlerCRUD) CreateIndexes(arg0 context.Context, arg1 ObjectDocumentHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexes indicates an expected call of CreateIndexes
func (mr *MockObjectDocumentHandlerCRUDMockRecorder) CreateIndexes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexes", reflect.TypeOf((*MockObjectDocumentHandlerCRUD)(nil).CreateIndexes), arg0, arg1)
}

// DeleteOne mocks base method
func (m *MockObjectDocumentHandlerCRUD) DeleteOne(arg0 context.Context, arg1 ObjectDocumentHandler, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne
func (mr *MockObjectDocumentHandlerCRUDMockRecorder) DeleteOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockObjectDocumentHandlerCRUD)(nil).DeleteOne), arg0, arg1, arg2)
}

// FindAll mocks base method
func (m *MockObjectDocumentHandlerCRUD) FindAll(arg0 context.Context, arg1 ObjectDocumentHandler, arg2 interface{}, arg3 primitive.M, arg4 ConsumeObjFn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindAll indicates an expected call of FindAll
func (mr *MockObjectDocumentHandlerCRUDMockRecorder) FindAll(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockObjectDocumentHandlerCRUD)(nil).FindAll), arg0, arg1, arg2, arg3, arg4)
}

// FindOne mocks base method
func (m *MockObjectDocumentHandlerCRUD) FindOne(arg0 context.Context, arg1 ObjectDocumentHandler, arg2 primitive.M, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOne indicates an expected call of FindOne
func (mr *MockObjectDocumentHandlerCRUDMockRecorder) FindOne(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockObjectDocumentHandlerCRUD)(nil).FindOne), arg0, arg1, arg2, arg3)
}

// InsertOne mocks base method
func (m *MockObjectDocumentHandlerCRUD) InsertOne(arg0 context.Context, arg1 ObjectDocumentHandler, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne
func (mr *MockObjectDocumentHandlerCRUDMockRecorder) InsertOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockObjectDocumentHandlerCRUD)(nil).InsertOne), arg0, arg1, arg2)
}

// UpdateAll mocks base method
func (m *MockObjectDocumentHandlerCRUD) UpdateAll(arg0 context.Context, arg1 ObjectDocumentHandler, arg2 primitive.M, arg3 interface{}, arg4 *centrald.UpdateArgs) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAll indicates an expected call of UpdateAll
func (mr *MockObjectDocumentHandlerCRUDMockRecorder) UpdateAll(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockObjectDocumentHandlerCRUD)(nil).UpdateAll), arg0, arg1, arg2, arg3, arg4)
}

// UpdateOne mocks base method
func (m *MockObjectDocumentHandlerCRUD) UpdateOne(arg0 context.Context, arg1 ObjectDocumentHandler, arg2 interface{}, arg3 *centrald.UpdateArgs, arg4 ...primitive.E) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne
func (mr *MockObjectDocumentHandlerCRUDMockRecorder) UpdateOne(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockObjectDocumentHandlerCRUD)(nil).UpdateOne), varargs...)
}
