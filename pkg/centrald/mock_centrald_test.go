// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nuvoloso/kontroller/pkg/centrald (interfaces: DataStore,AccountOps,ApplicationGroupOps,ClusterOps,ConsistencyGroupOps,CspCredentialOps,CspDomainOps,NodeOps,PoolOps,ProtectionDomainOps,RoleOps,ServicePlanOps,ServicePlanAllocationOps,SnapshotOps,StorageOps,StorageRequestOps,SystemOps,UserOps,VolumeSeriesOps,VolumeSeriesRequestOps)

package centrald

import (
	context "context"
	models "github.com/Nuvoloso/kontroller/pkg/autogen/models"
	account "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/account"
	application_group "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/application_group"
	cluster "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/cluster"
	consistency_group "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/consistency_group"
	csp_credential "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/csp_credential"
	csp_domain "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/csp_domain"
	node "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/node"
	pool "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/pool"
	protection_domain "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/protection_domain"
	role "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/role"
	service_plan "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/service_plan"
	service_plan_allocation "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/service_plan_allocation"
	snapshot "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/snapshot"
	storage "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/storage"
	storage_request "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/storage_request"
	user "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/user"
	volume_series "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/volume_series"
	volume_series_request "github.com/Nuvoloso/kontroller/pkg/autogen/restapi/operations/volume_series_request"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// OpsAccount mocks base method
func (m *MockDataStore) OpsAccount() AccountOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsAccount")
	ret0, _ := ret[0].(AccountOps)
	return ret0
}

// OpsAccount indicates an expected call of OpsAccount
func (mr *MockDataStoreMockRecorder) OpsAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsAccount", reflect.TypeOf((*MockDataStore)(nil).OpsAccount))
}

// OpsApplicationGroup mocks base method
func (m *MockDataStore) OpsApplicationGroup() ApplicationGroupOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsApplicationGroup")
	ret0, _ := ret[0].(ApplicationGroupOps)
	return ret0
}

// OpsApplicationGroup indicates an expected call of OpsApplicationGroup
func (mr *MockDataStoreMockRecorder) OpsApplicationGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsApplicationGroup", reflect.TypeOf((*MockDataStore)(nil).OpsApplicationGroup))
}

// OpsCluster mocks base method
func (m *MockDataStore) OpsCluster() ClusterOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsCluster")
	ret0, _ := ret[0].(ClusterOps)
	return ret0
}

// OpsCluster indicates an expected call of OpsCluster
func (mr *MockDataStoreMockRecorder) OpsCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsCluster", reflect.TypeOf((*MockDataStore)(nil).OpsCluster))
}

// OpsConsistencyGroup mocks base method
func (m *MockDataStore) OpsConsistencyGroup() ConsistencyGroupOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsConsistencyGroup")
	ret0, _ := ret[0].(ConsistencyGroupOps)
	return ret0
}

// OpsConsistencyGroup indicates an expected call of OpsConsistencyGroup
func (mr *MockDataStoreMockRecorder) OpsConsistencyGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsConsistencyGroup", reflect.TypeOf((*MockDataStore)(nil).OpsConsistencyGroup))
}

// OpsCspCredential mocks base method
func (m *MockDataStore) OpsCspCredential() CspCredentialOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsCspCredential")
	ret0, _ := ret[0].(CspCredentialOps)
	return ret0
}

// OpsCspCredential indicates an expected call of OpsCspCredential
func (mr *MockDataStoreMockRecorder) OpsCspCredential() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsCspCredential", reflect.TypeOf((*MockDataStore)(nil).OpsCspCredential))
}

// OpsCspDomain mocks base method
func (m *MockDataStore) OpsCspDomain() CspDomainOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsCspDomain")
	ret0, _ := ret[0].(CspDomainOps)
	return ret0
}

// OpsCspDomain indicates an expected call of OpsCspDomain
func (mr *MockDataStoreMockRecorder) OpsCspDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsCspDomain", reflect.TypeOf((*MockDataStore)(nil).OpsCspDomain))
}

// OpsNode mocks base method
func (m *MockDataStore) OpsNode() NodeOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsNode")
	ret0, _ := ret[0].(NodeOps)
	return ret0
}

// OpsNode indicates an expected call of OpsNode
func (mr *MockDataStoreMockRecorder) OpsNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsNode", reflect.TypeOf((*MockDataStore)(nil).OpsNode))
}

// OpsPool mocks base method
func (m *MockDataStore) OpsPool() PoolOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsPool")
	ret0, _ := ret[0].(PoolOps)
	return ret0
}

// OpsPool indicates an expected call of OpsPool
func (mr *MockDataStoreMockRecorder) OpsPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsPool", reflect.TypeOf((*MockDataStore)(nil).OpsPool))
}

// OpsProtectionDomain mocks base method
func (m *MockDataStore) OpsProtectionDomain() ProtectionDomainOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsProtectionDomain")
	ret0, _ := ret[0].(ProtectionDomainOps)
	return ret0
}

// OpsProtectionDomain indicates an expected call of OpsProtectionDomain
func (mr *MockDataStoreMockRecorder) OpsProtectionDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsProtectionDomain", reflect.TypeOf((*MockDataStore)(nil).OpsProtectionDomain))
}

// OpsRole mocks base method
func (m *MockDataStore) OpsRole() RoleOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsRole")
	ret0, _ := ret[0].(RoleOps)
	return ret0
}

// OpsRole indicates an expected call of OpsRole
func (mr *MockDataStoreMockRecorder) OpsRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsRole", reflect.TypeOf((*MockDataStore)(nil).OpsRole))
}

// OpsServicePlan mocks base method
func (m *MockDataStore) OpsServicePlan() ServicePlanOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsServicePlan")
	ret0, _ := ret[0].(ServicePlanOps)
	return ret0
}

// OpsServicePlan indicates an expected call of OpsServicePlan
func (mr *MockDataStoreMockRecorder) OpsServicePlan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsServicePlan", reflect.TypeOf((*MockDataStore)(nil).OpsServicePlan))
}

// OpsServicePlanAllocation mocks base method
func (m *MockDataStore) OpsServicePlanAllocation() ServicePlanAllocationOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsServicePlanAllocation")
	ret0, _ := ret[0].(ServicePlanAllocationOps)
	return ret0
}

// OpsServicePlanAllocation indicates an expected call of OpsServicePlanAllocation
func (mr *MockDataStoreMockRecorder) OpsServicePlanAllocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsServicePlanAllocation", reflect.TypeOf((*MockDataStore)(nil).OpsServicePlanAllocation))
}

// OpsSnapshot mocks base method
func (m *MockDataStore) OpsSnapshot() SnapshotOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsSnapshot")
	ret0, _ := ret[0].(SnapshotOps)
	return ret0
}

// OpsSnapshot indicates an expected call of OpsSnapshot
func (mr *MockDataStoreMockRecorder) OpsSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsSnapshot", reflect.TypeOf((*MockDataStore)(nil).OpsSnapshot))
}

// OpsStorage mocks base method
func (m *MockDataStore) OpsStorage() StorageOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsStorage")
	ret0, _ := ret[0].(StorageOps)
	return ret0
}

// OpsStorage indicates an expected call of OpsStorage
func (mr *MockDataStoreMockRecorder) OpsStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsStorage", reflect.TypeOf((*MockDataStore)(nil).OpsStorage))
}

// OpsStorageRequest mocks base method
func (m *MockDataStore) OpsStorageRequest() StorageRequestOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsStorageRequest")
	ret0, _ := ret[0].(StorageRequestOps)
	return ret0
}

// OpsStorageRequest indicates an expected call of OpsStorageRequest
func (mr *MockDataStoreMockRecorder) OpsStorageRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsStorageRequest", reflect.TypeOf((*MockDataStore)(nil).OpsStorageRequest))
}

// OpsSystem mocks base method
func (m *MockDataStore) OpsSystem() SystemOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsSystem")
	ret0, _ := ret[0].(SystemOps)
	return ret0
}

// OpsSystem indicates an expected call of OpsSystem
func (mr *MockDataStoreMockRecorder) OpsSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsSystem", reflect.TypeOf((*MockDataStore)(nil).OpsSystem))
}

// OpsUser mocks base method
func (m *MockDataStore) OpsUser() UserOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsUser")
	ret0, _ := ret[0].(UserOps)
	return ret0
}

// OpsUser indicates an expected call of OpsUser
func (mr *MockDataStoreMockRecorder) OpsUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsUser", reflect.TypeOf((*MockDataStore)(nil).OpsUser))
}

// OpsVolumeSeries mocks base method
func (m *MockDataStore) OpsVolumeSeries() VolumeSeriesOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsVolumeSeries")
	ret0, _ := ret[0].(VolumeSeriesOps)
	return ret0
}

// OpsVolumeSeries indicates an expected call of OpsVolumeSeries
func (mr *MockDataStoreMockRecorder) OpsVolumeSeries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsVolumeSeries", reflect.TypeOf((*MockDataStore)(nil).OpsVolumeSeries))
}

// OpsVolumeSeriesRequest mocks base method
func (m *MockDataStore) OpsVolumeSeriesRequest() VolumeSeriesRequestOps {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsVolumeSeriesRequest")
	ret0, _ := ret[0].(VolumeSeriesRequestOps)
	return ret0
}

// OpsVolumeSeriesRequest indicates an expected call of OpsVolumeSeriesRequest
func (mr *MockDataStoreMockRecorder) OpsVolumeSeriesRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsVolumeSeriesRequest", reflect.TypeOf((*MockDataStore)(nil).OpsVolumeSeriesRequest))
}

// Start mocks base method
func (m *MockDataStore) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockDataStoreMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDataStore)(nil).Start))
}

// Stop mocks base method
func (m *MockDataStore) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockDataStoreMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDataStore)(nil).Stop))
}

// MockAccountOps is a mock of AccountOps interface
type MockAccountOps struct {
	ctrl     *gomock.Controller
	recorder *MockAccountOpsMockRecorder
}

// MockAccountOpsMockRecorder is the mock recorder for MockAccountOps
type MockAccountOpsMockRecorder struct {
	mock *MockAccountOps
}

// NewMockAccountOps creates a new mock instance
func NewMockAccountOps(ctrl *gomock.Controller) *MockAccountOps {
	mock := &MockAccountOps{ctrl: ctrl}
	mock.recorder = &MockAccountOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountOps) EXPECT() *MockAccountOpsMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockAccountOps) Count(arg0 context.Context, arg1 account.AccountListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockAccountOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockAccountOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockAccountOps) Create(arg0 context.Context, arg1 *models.Account) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAccountOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockAccountOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAccountOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockAccountOps) Fetch(arg0 context.Context, arg1 string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockAccountOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockAccountOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockAccountOps) List(arg0 context.Context, arg1 account.AccountListParams) ([]*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAccountOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccountOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockAccountOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.AccountMutable) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockAccountOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountOps)(nil).Update), arg0, arg1, arg2)
}

// MockApplicationGroupOps is a mock of ApplicationGroupOps interface
type MockApplicationGroupOps struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationGroupOpsMockRecorder
}

// MockApplicationGroupOpsMockRecorder is the mock recorder for MockApplicationGroupOps
type MockApplicationGroupOpsMockRecorder struct {
	mock *MockApplicationGroupOps
}

// NewMockApplicationGroupOps creates a new mock instance
func NewMockApplicationGroupOps(ctrl *gomock.Controller) *MockApplicationGroupOps {
	mock := &MockApplicationGroupOps{ctrl: ctrl}
	mock.recorder = &MockApplicationGroupOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationGroupOps) EXPECT() *MockApplicationGroupOpsMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockApplicationGroupOps) Count(arg0 context.Context, arg1 application_group.ApplicationGroupListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockApplicationGroupOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockApplicationGroupOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockApplicationGroupOps) Create(arg0 context.Context, arg1 *models.ApplicationGroup) (*models.ApplicationGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.ApplicationGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockApplicationGroupOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockApplicationGroupOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockApplicationGroupOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockApplicationGroupOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApplicationGroupOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockApplicationGroupOps) Fetch(arg0 context.Context, arg1 string) (*models.ApplicationGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.ApplicationGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockApplicationGroupOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockApplicationGroupOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockApplicationGroupOps) List(arg0 context.Context, arg1 application_group.ApplicationGroupListParams) ([]*models.ApplicationGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.ApplicationGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockApplicationGroupOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApplicationGroupOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockApplicationGroupOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.ApplicationGroupMutable) (*models.ApplicationGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.ApplicationGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockApplicationGroupOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockApplicationGroupOps)(nil).Update), arg0, arg1, arg2)
}

// MockClusterOps is a mock of ClusterOps interface
type MockClusterOps struct {
	ctrl     *gomock.Controller
	recorder *MockClusterOpsMockRecorder
}

// MockClusterOpsMockRecorder is the mock recorder for MockClusterOps
type MockClusterOpsMockRecorder struct {
	mock *MockClusterOps
}

// NewMockClusterOps creates a new mock instance
func NewMockClusterOps(ctrl *gomock.Controller) *MockClusterOps {
	mock := &MockClusterOps{ctrl: ctrl}
	mock.recorder = &MockClusterOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterOps) EXPECT() *MockClusterOpsMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockClusterOps) Count(arg0 context.Context, arg1 cluster.ClusterListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockClusterOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockClusterOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockClusterOps) Create(arg0 context.Context, arg1 *models.ClusterCreateArgs) (*models.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClusterOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockClusterOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockClusterOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockClusterOps) Fetch(arg0 context.Context, arg1 string) (*models.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockClusterOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockClusterOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockClusterOps) List(arg0 context.Context, arg1 cluster.ClusterListParams) ([]*models.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClusterOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockClusterOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.ClusterMutable) (*models.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockClusterOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterOps)(nil).Update), arg0, arg1, arg2)
}

// MockConsistencyGroupOps is a mock of ConsistencyGroupOps interface
type MockConsistencyGroupOps struct {
	ctrl     *gomock.Controller
	recorder *MockConsistencyGroupOpsMockRecorder
}

// MockConsistencyGroupOpsMockRecorder is the mock recorder for MockConsistencyGroupOps
type MockConsistencyGroupOpsMockRecorder struct {
	mock *MockConsistencyGroupOps
}

// NewMockConsistencyGroupOps creates a new mock instance
func NewMockConsistencyGroupOps(ctrl *gomock.Controller) *MockConsistencyGroupOps {
	mock := &MockConsistencyGroupOps{ctrl: ctrl}
	mock.recorder = &MockConsistencyGroupOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsistencyGroupOps) EXPECT() *MockConsistencyGroupOpsMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockConsistencyGroupOps) Count(arg0 context.Context, arg1 consistency_group.ConsistencyGroupListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockConsistencyGroupOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockConsistencyGroupOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockConsistencyGroupOps) Create(arg0 context.Context, arg1 *models.ConsistencyGroup) (*models.ConsistencyGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.ConsistencyGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockConsistencyGroupOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConsistencyGroupOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockConsistencyGroupOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockConsistencyGroupOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConsistencyGroupOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockConsistencyGroupOps) Fetch(arg0 context.Context, arg1 string) (*models.ConsistencyGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.ConsistencyGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockConsistencyGroupOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockConsistencyGroupOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockConsistencyGroupOps) List(arg0 context.Context, arg1 consistency_group.ConsistencyGroupListParams) ([]*models.ConsistencyGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.ConsistencyGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockConsistencyGroupOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConsistencyGroupOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockConsistencyGroupOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.ConsistencyGroupMutable) (*models.ConsistencyGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.ConsistencyGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockConsistencyGroupOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConsistencyGroupOps)(nil).Update), arg0, arg1, arg2)
}

// MockCspCredentialOps is a mock of CspCredentialOps interface
type MockCspCredentialOps struct {
	ctrl     *gomock.Controller
	recorder *MockCspCredentialOpsMockRecorder
}

// MockCspCredentialOpsMockRecorder is the mock recorder for MockCspCredentialOps
type MockCspCredentialOpsMockRecorder struct {
	mock *MockCspCredentialOps
}

// NewMockCspCredentialOps creates a new mock instance
func NewMockCspCredentialOps(ctrl *gomock.Controller) *MockCspCredentialOps {
	mock := &MockCspCredentialOps{ctrl: ctrl}
	mock.recorder = &MockCspCredentialOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCspCredentialOps) EXPECT() *MockCspCredentialOpsMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockCspCredentialOps) Count(arg0 context.Context, arg1 csp_credential.CspCredentialListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockCspCredentialOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCspCredentialOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockCspCredentialOps) Create(arg0 context.Context, arg1 *models.CSPCredential) (*models.CSPCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.CSPCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCspCredentialOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCspCredentialOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockCspCredentialOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCspCredentialOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCspCredentialOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockCspCredentialOps) Fetch(arg0 context.Context, arg1 string) (*models.CSPCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.CSPCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockCspCredentialOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockCspCredentialOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockCspCredentialOps) List(arg0 context.Context, arg1 csp_credential.CspCredentialListParams) ([]*models.CSPCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.CSPCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockCspCredentialOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCspCredentialOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockCspCredentialOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.CSPCredentialMutable) (*models.CSPCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.CSPCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockCspCredentialOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCspCredentialOps)(nil).Update), arg0, arg1, arg2)
}

// MockCspDomainOps is a mock of CspDomainOps interface
type MockCspDomainOps struct {
	ctrl     *gomock.Controller
	recorder *MockCspDomainOpsMockRecorder
}

// MockCspDomainOpsMockRecorder is the mock recorder for MockCspDomainOps
type MockCspDomainOpsMockRecorder struct {
	mock *MockCspDomainOps
}

// NewMockCspDomainOps creates a new mock instance
func NewMockCspDomainOps(ctrl *gomock.Controller) *MockCspDomainOps {
	mock := &MockCspDomainOps{ctrl: ctrl}
	mock.recorder = &MockCspDomainOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCspDomainOps) EXPECT() *MockCspDomainOpsMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockCspDomainOps) Count(arg0 context.Context, arg1 csp_domain.CspDomainListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockCspDomainOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCspDomainOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockCspDomainOps) Create(arg0 context.Context, arg1 *models.CSPDomain) (*models.CSPDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.CSPDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCspDomainOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCspDomainOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockCspDomainOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCspDomainOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCspDomainOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockCspDomainOps) Fetch(arg0 context.Context, arg1 string) (*models.CSPDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.CSPDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockCspDomainOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockCspDomainOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockCspDomainOps) List(arg0 context.Context, arg1 csp_domain.CspDomainListParams) ([]*models.CSPDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.CSPDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockCspDomainOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCspDomainOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockCspDomainOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.CSPDomainMutable) (*models.CSPDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.CSPDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockCspDomainOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCspDomainOps)(nil).Update), arg0, arg1, arg2)
}

// MockNodeOps is a mock of NodeOps interface
type MockNodeOps struct {
	ctrl     *gomock.Controller
	recorder *MockNodeOpsMockRecorder
}

// MockNodeOpsMockRecorder is the mock recorder for MockNodeOps
type MockNodeOpsMockRecorder struct {
	mock *MockNodeOps
}

// NewMockNodeOps creates a new mock instance
func NewMockNodeOps(ctrl *gomock.Controller) *MockNodeOps {
	mock := &MockNodeOps{ctrl: ctrl}
	mock.recorder = &MockNodeOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeOps) EXPECT() *MockNodeOpsMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockNodeOps) Count(arg0 context.Context, arg1 node.NodeListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockNodeOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockNodeOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockNodeOps) Create(arg0 context.Context, arg1 *models.Node) (*models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNodeOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNodeOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockNodeOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockNodeOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNodeOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockNodeOps) Fetch(arg0 context.Context, arg1 string) (*models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockNodeOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockNodeOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockNodeOps) List(arg0 context.Context, arg1 node.NodeListParams) ([]*models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockNodeOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNodeOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockNodeOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.NodeMutable) (*models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNodeOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNodeOps)(nil).Update), arg0, arg1, arg2)
}

// UpdateMultiple mocks base method
func (m *MockNodeOps) UpdateMultiple(arg0 context.Context, arg1 node.NodeListParams, arg2 *UpdateArgs, arg3 *models.NodeMutable) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMultiple", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateMultiple indicates an expected call of UpdateMultiple
func (mr *MockNodeOpsMockRecorder) UpdateMultiple(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiple", reflect.TypeOf((*MockNodeOps)(nil).UpdateMultiple), arg0, arg1, arg2, arg3)
}

// MockPoolOps is a mock of PoolOps interface
type MockPoolOps struct {
	ctrl     *gomock.Controller
	recorder *MockPoolOpsMockRecorder
}

// MockPoolOpsMockRecorder is the mock recorder for MockPoolOps
type MockPoolOpsMockRecorder struct {
	mock *MockPoolOps
}

// NewMockPoolOps creates a new mock instance
func NewMockPoolOps(ctrl *gomock.Controller) *MockPoolOps {
	mock := &MockPoolOps{ctrl: ctrl}
	mock.recorder = &MockPoolOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoolOps) EXPECT() *MockPoolOpsMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockPoolOps) Count(arg0 context.Context, arg1 pool.PoolListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockPoolOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockPoolOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockPoolOps) Create(arg0 context.Context, arg1 *models.PoolCreateArgs) (*models.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPoolOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPoolOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockPoolOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPoolOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPoolOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockPoolOps) Fetch(arg0 context.Context, arg1 string) (*models.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockPoolOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockPoolOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockPoolOps) List(arg0 context.Context, arg1 pool.PoolListParams) ([]*models.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockPoolOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPoolOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockPoolOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.PoolMutable) (*models.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockPoolOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPoolOps)(nil).Update), arg0, arg1, arg2)
}

// MockProtectionDomainOps is a mock of ProtectionDomainOps interface
type MockProtectionDomainOps struct {
	ctrl     *gomock.Controller
	recorder *MockProtectionDomainOpsMockRecorder
}

// MockProtectionDomainOpsMockRecorder is the mock recorder for MockProtectionDomainOps
type MockProtectionDomainOpsMockRecorder struct {
	mock *MockProtectionDomainOps
}

// NewMockProtectionDomainOps creates a new mock instance
func NewMockProtectionDomainOps(ctrl *gomock.Controller) *MockProtectionDomainOps {
	mock := &MockProtectionDomainOps{ctrl: ctrl}
	mock.recorder = &MockProtectionDomainOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProtectionDomainOps) EXPECT() *MockProtectionDomainOpsMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockProtectionDomainOps) Count(arg0 context.Context, arg1 protection_domain.ProtectionDomainListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockProtectionDomainOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockProtectionDomainOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockProtectionDomainOps) Create(arg0 context.Context, arg1 *models.ProtectionDomainCreateArgs) (*models.ProtectionDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.ProtectionDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockProtectionDomainOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProtectionDomainOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockProtectionDomainOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockProtectionDomainOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProtectionDomainOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockProtectionDomainOps) Fetch(arg0 context.Context, arg1 string) (*models.ProtectionDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.ProtectionDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockProtectionDomainOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockProtectionDomainOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockProtectionDomainOps) List(arg0 context.Context, arg1 protection_domain.ProtectionDomainListParams) ([]*models.ProtectionDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProtectionDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockProtectionDomainOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProtectionDomainOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockProtectionDomainOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.ProtectionDomainMutable) (*models.ProtectionDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.ProtectionDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockProtectionDomainOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProtectionDomainOps)(nil).Update), arg0, arg1, arg2)
}

// MockRoleOps is a mock of RoleOps interface
type MockRoleOps struct {
	ctrl     *gomock.Controller
	recorder *MockRoleOpsMockRecorder
}

// MockRoleOpsMockRecorder is the mock recorder for MockRoleOps
type MockRoleOpsMockRecorder struct {
	mock *MockRoleOps
}

// NewMockRoleOps creates a new mock instance
func NewMockRoleOps(ctrl *gomock.Controller) *MockRoleOps {
	mock := &MockRoleOps{ctrl: ctrl}
	mock.recorder = &MockRoleOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleOps) EXPECT() *MockRoleOpsMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockRoleOps) Fetch(arg0 string) (*models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0)
	ret0, _ := ret[0].(*models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockRoleOpsMockRecorder) Fetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockRoleOps)(nil).Fetch), arg0)
}

// List mocks base method
func (m *MockRoleOps) List(arg0 role.RoleListParams) ([]*models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRoleOpsMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleOps)(nil).List), arg0)
}

// MockServicePlanOps is a mock of ServicePlanOps interface
type MockServicePlanOps struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanOpsMockRecorder
}

// MockServicePlanOpsMockRecorder is the mock recorder for MockServicePlanOps
type MockServicePlanOpsMockRecorder struct {
	mock *MockServicePlanOps
}

// NewMockServicePlanOps creates a new mock instance
func NewMockServicePlanOps(ctrl *gomock.Controller) *MockServicePlanOps {
	mock := &MockServicePlanOps{ctrl: ctrl}
	mock.recorder = &MockServicePlanOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServicePlanOps) EXPECT() *MockServicePlanOpsMockRecorder {
	return m.recorder
}

// BuiltInPlan mocks base method
func (m *MockServicePlanOps) BuiltInPlan(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuiltInPlan", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// BuiltInPlan indicates an expected call of BuiltInPlan
func (mr *MockServicePlanOpsMockRecorder) BuiltInPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuiltInPlan", reflect.TypeOf((*MockServicePlanOps)(nil).BuiltInPlan), arg0)
}

// Clone mocks base method
func (m *MockServicePlanOps) Clone(arg0 context.Context, arg1 service_plan.ServicePlanCloneParams) (*models.ServicePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0, arg1)
	ret0, _ := ret[0].(*models.ServicePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone
func (mr *MockServicePlanOpsMockRecorder) Clone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockServicePlanOps)(nil).Clone), arg0, arg1)
}

// Count mocks base method
func (m *MockServicePlanOps) Count(arg0 context.Context, arg1 service_plan.ServicePlanListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockServicePlanOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServicePlanOps)(nil).Count), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockServicePlanOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockServicePlanOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServicePlanOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockServicePlanOps) Fetch(arg0 context.Context, arg1 string) (*models.ServicePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.ServicePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockServicePlanOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockServicePlanOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockServicePlanOps) List(arg0 context.Context, arg1 service_plan.ServicePlanListParams) ([]*models.ServicePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.ServicePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockServicePlanOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServicePlanOps)(nil).List), arg0, arg1)
}

// Publish mocks base method
func (m *MockServicePlanOps) Publish(arg0 context.Context, arg1 service_plan.ServicePlanPublishParams) (*models.ServicePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(*models.ServicePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish
func (mr *MockServicePlanOpsMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockServicePlanOps)(nil).Publish), arg0, arg1)
}

// RemoveAccount mocks base method
func (m *MockServicePlanOps) RemoveAccount(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAccount indicates an expected call of RemoveAccount
func (mr *MockServicePlanOpsMockRecorder) RemoveAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccount", reflect.TypeOf((*MockServicePlanOps)(nil).RemoveAccount), arg0, arg1)
}

// Retire mocks base method
func (m *MockServicePlanOps) Retire(arg0 context.Context, arg1 service_plan.ServicePlanRetireParams) (*models.ServicePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retire", arg0, arg1)
	ret0, _ := ret[0].(*models.ServicePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retire indicates an expected call of Retire
func (mr *MockServicePlanOpsMockRecorder) Retire(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retire", reflect.TypeOf((*MockServicePlanOps)(nil).Retire), arg0, arg1)
}

// Update mocks base method
func (m *MockServicePlanOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.ServicePlanMutable) (*models.ServicePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.ServicePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockServicePlanOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServicePlanOps)(nil).Update), arg0, arg1, arg2)
}

// MockServicePlanAllocationOps is a mock of ServicePlanAllocationOps interface
type MockServicePlanAllocationOps struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanAllocationOpsMockRecorder
}

// MockServicePlanAllocationOpsMockRecorder is the mock recorder for MockServicePlanAllocationOps
type MockServicePlanAllocationOpsMockRecorder struct {
	mock *MockServicePlanAllocationOps
}

// NewMockServicePlanAllocationOps creates a new mock instance
func NewMockServicePlanAllocationOps(ctrl *gomock.Controller) *MockServicePlanAllocationOps {
	mock := &MockServicePlanAllocationOps{ctrl: ctrl}
	mock.recorder = &MockServicePlanAllocationOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServicePlanAllocationOps) EXPECT() *MockServicePlanAllocationOpsMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockServicePlanAllocationOps) Count(arg0 context.Context, arg1 service_plan_allocation.ServicePlanAllocationListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockServicePlanAllocationOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServicePlanAllocationOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockServicePlanAllocationOps) Create(arg0 context.Context, arg1 *models.ServicePlanAllocation) (*models.ServicePlanAllocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.ServicePlanAllocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockServicePlanAllocationOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServicePlanAllocationOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockServicePlanAllocationOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockServicePlanAllocationOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServicePlanAllocationOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockServicePlanAllocationOps) Fetch(arg0 context.Context, arg1 string) (*models.ServicePlanAllocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.ServicePlanAllocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockServicePlanAllocationOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockServicePlanAllocationOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockServicePlanAllocationOps) List(arg0 context.Context, arg1 service_plan_allocation.ServicePlanAllocationListParams) ([]*models.ServicePlanAllocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.ServicePlanAllocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockServicePlanAllocationOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServicePlanAllocationOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockServicePlanAllocationOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.ServicePlanAllocationMutable) (*models.ServicePlanAllocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.ServicePlanAllocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockServicePlanAllocationOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServicePlanAllocationOps)(nil).Update), arg0, arg1, arg2)
}

// MockSnapshotOps is a mock of SnapshotOps interface
type MockSnapshotOps struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotOpsMockRecorder
}

// MockSnapshotOpsMockRecorder is the mock recorder for MockSnapshotOps
type MockSnapshotOpsMockRecorder struct {
	mock *MockSnapshotOps
}

// NewMockSnapshotOps creates a new mock instance
func NewMockSnapshotOps(ctrl *gomock.Controller) *MockSnapshotOps {
	mock := &MockSnapshotOps{ctrl: ctrl}
	mock.recorder = &MockSnapshotOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshotOps) EXPECT() *MockSnapshotOpsMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockSnapshotOps) Count(arg0 context.Context, arg1 snapshot.SnapshotListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockSnapshotOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSnapshotOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockSnapshotOps) Create(arg0 context.Context, arg1 *models.Snapshot) (*models.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSnapshotOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSnapshotOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockSnapshotOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSnapshotOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSnapshotOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockSnapshotOps) Fetch(arg0 context.Context, arg1 string) (*models.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockSnapshotOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockSnapshotOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockSnapshotOps) List(arg0 context.Context, arg1 snapshot.SnapshotListParams) ([]*models.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockSnapshotOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSnapshotOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockSnapshotOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.SnapshotMutable) (*models.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockSnapshotOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSnapshotOps)(nil).Update), arg0, arg1, arg2)
}

// MockStorageOps is a mock of StorageOps interface
type MockStorageOps struct {
	ctrl     *gomock.Controller
	recorder *MockStorageOpsMockRecorder
}

// MockStorageOpsMockRecorder is the mock recorder for MockStorageOps
type MockStorageOpsMockRecorder struct {
	mock *MockStorageOps
}

// NewMockStorageOps creates a new mock instance
func NewMockStorageOps(ctrl *gomock.Controller) *MockStorageOps {
	mock := &MockStorageOps{ctrl: ctrl}
	mock.recorder = &MockStorageOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageOps) EXPECT() *MockStorageOpsMockRecorder {
	return m.recorder
}

// Aggregate mocks base method
func (m *MockStorageOps) Aggregate(arg0 context.Context, arg1 storage.StorageListParams) ([]*Aggregation, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", arg0, arg1)
	ret0, _ := ret[0].([]*Aggregation)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Aggregate indicates an expected call of Aggregate
func (mr *MockStorageOpsMockRecorder) Aggregate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockStorageOps)(nil).Aggregate), arg0, arg1)
}

// Count mocks base method
func (m *MockStorageOps) Count(arg0 context.Context, arg1 storage.StorageListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockStorageOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockStorageOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockStorageOps) Create(arg0 context.Context, arg1 *models.Storage) (*models.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockStorageOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorageOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockStorageOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockStorageOps) Fetch(arg0 context.Context, arg1 string) (*models.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockStorageOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockStorageOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockStorageOps) List(arg0 context.Context, arg1 storage.StorageListParams) ([]*models.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStorageOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorageOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockStorageOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.StorageMutable) (*models.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockStorageOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorageOps)(nil).Update), arg0, arg1, arg2)
}

// MockStorageRequestOps is a mock of StorageRequestOps interface
type MockStorageRequestOps struct {
	ctrl     *gomock.Controller
	recorder *MockStorageRequestOpsMockRecorder
}

// MockStorageRequestOpsMockRecorder is the mock recorder for MockStorageRequestOps
type MockStorageRequestOpsMockRecorder struct {
	mock *MockStorageRequestOps
}

// NewMockStorageRequestOps creates a new mock instance
func NewMockStorageRequestOps(ctrl *gomock.Controller) *MockStorageRequestOps {
	mock := &MockStorageRequestOps{ctrl: ctrl}
	mock.recorder = &MockStorageRequestOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageRequestOps) EXPECT() *MockStorageRequestOpsMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockStorageRequestOps) Count(arg0 context.Context, arg1 storage_request.StorageRequestListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockStorageRequestOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockStorageRequestOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockStorageRequestOps) Create(arg0 context.Context, arg1 *models.StorageRequestCreateArgs) (*models.StorageRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.StorageRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockStorageRequestOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorageRequestOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockStorageRequestOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageRequestOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageRequestOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockStorageRequestOps) Fetch(arg0 context.Context, arg1 string) (*models.StorageRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.StorageRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockStorageRequestOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockStorageRequestOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockStorageRequestOps) List(arg0 context.Context, arg1 storage_request.StorageRequestListParams) ([]*models.StorageRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.StorageRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStorageRequestOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorageRequestOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockStorageRequestOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.StorageRequestMutable) (*models.StorageRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.StorageRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockStorageRequestOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorageRequestOps)(nil).Update), arg0, arg1, arg2)
}

// MockSystemOps is a mock of SystemOps interface
type MockSystemOps struct {
	ctrl     *gomock.Controller
	recorder *MockSystemOpsMockRecorder
}

// MockSystemOpsMockRecorder is the mock recorder for MockSystemOps
type MockSystemOpsMockRecorder struct {
	mock *MockSystemOps
}

// NewMockSystemOps creates a new mock instance
func NewMockSystemOps(ctrl *gomock.Controller) *MockSystemOps {
	mock := &MockSystemOps{ctrl: ctrl}
	mock.recorder = &MockSystemOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemOps) EXPECT() *MockSystemOpsMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockSystemOps) Fetch() (*models.System, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch")
	ret0, _ := ret[0].(*models.System)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockSystemOpsMockRecorder) Fetch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockSystemOps)(nil).Fetch))
}

// Update mocks base method
func (m *MockSystemOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.SystemMutable) (*models.System, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.System)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockSystemOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSystemOps)(nil).Update), arg0, arg1, arg2)
}

// MockUserOps is a mock of UserOps interface
type MockUserOps struct {
	ctrl     *gomock.Controller
	recorder *MockUserOpsMockRecorder
}

// MockUserOpsMockRecorder is the mock recorder for MockUserOps
type MockUserOpsMockRecorder struct {
	mock *MockUserOps
}

// NewMockUserOps creates a new mock instance
func NewMockUserOps(ctrl *gomock.Controller) *MockUserOps {
	mock := &MockUserOps{ctrl: ctrl}
	mock.recorder = &MockUserOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserOps) EXPECT() *MockUserOpsMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserOps) Create(arg0 context.Context, arg1 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockUserOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockUserOps) Fetch(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockUserOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockUserOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockUserOps) List(arg0 context.Context, arg1 user.UserListParams) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockUserOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockUserOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.UserMutable) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUserOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserOps)(nil).Update), arg0, arg1, arg2)
}

// MockVolumeSeriesOps is a mock of VolumeSeriesOps interface
type MockVolumeSeriesOps struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeSeriesOpsMockRecorder
}

// MockVolumeSeriesOpsMockRecorder is the mock recorder for MockVolumeSeriesOps
type MockVolumeSeriesOpsMockRecorder struct {
	mock *MockVolumeSeriesOps
}

// NewMockVolumeSeriesOps creates a new mock instance
func NewMockVolumeSeriesOps(ctrl *gomock.Controller) *MockVolumeSeriesOps {
	mock := &MockVolumeSeriesOps{ctrl: ctrl}
	mock.recorder = &MockVolumeSeriesOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVolumeSeriesOps) EXPECT() *MockVolumeSeriesOpsMockRecorder {
	return m.recorder
}

// Aggregate mocks base method
func (m *MockVolumeSeriesOps) Aggregate(arg0 context.Context, arg1 volume_series.VolumeSeriesListParams) ([]*Aggregation, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", arg0, arg1)
	ret0, _ := ret[0].([]*Aggregation)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Aggregate indicates an expected call of Aggregate
func (mr *MockVolumeSeriesOpsMockRecorder) Aggregate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockVolumeSeriesOps)(nil).Aggregate), arg0, arg1)
}

// Count mocks base method
func (m *MockVolumeSeriesOps) Count(arg0 context.Context, arg1 volume_series.VolumeSeriesListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockVolumeSeriesOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockVolumeSeriesOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockVolumeSeriesOps) Create(arg0 context.Context, arg1 *models.VolumeSeriesCreateArgs) (*models.VolumeSeries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.VolumeSeries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockVolumeSeriesOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVolumeSeriesOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockVolumeSeriesOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockVolumeSeriesOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVolumeSeriesOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockVolumeSeriesOps) Fetch(arg0 context.Context, arg1 string) (*models.VolumeSeries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.VolumeSeries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockVolumeSeriesOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockVolumeSeriesOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockVolumeSeriesOps) List(arg0 context.Context, arg1 volume_series.VolumeSeriesListParams) ([]*models.VolumeSeries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.VolumeSeries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVolumeSeriesOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVolumeSeriesOps)(nil).List), arg0, arg1)
}

// NewID mocks base method
func (m *MockVolumeSeriesOps) NewID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewID")
	ret0, _ := ret[0].(string)
	return ret0
}

// NewID indicates an expected call of NewID
func (mr *MockVolumeSeriesOpsMockRecorder) NewID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewID", reflect.TypeOf((*MockVolumeSeriesOps)(nil).NewID))
}

// Update mocks base method
func (m *MockVolumeSeriesOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.VolumeSeriesMutable) (*models.VolumeSeries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.VolumeSeries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockVolumeSeriesOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVolumeSeriesOps)(nil).Update), arg0, arg1, arg2)
}

// MockVolumeSeriesRequestOps is a mock of VolumeSeriesRequestOps interface
type MockVolumeSeriesRequestOps struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeSeriesRequestOpsMockRecorder
}

// MockVolumeSeriesRequestOpsMockRecorder is the mock recorder for MockVolumeSeriesRequestOps
type MockVolumeSeriesRequestOpsMockRecorder struct {
	mock *MockVolumeSeriesRequestOps
}

// NewMockVolumeSeriesRequestOps creates a new mock instance
func NewMockVolumeSeriesRequestOps(ctrl *gomock.Controller) *MockVolumeSeriesRequestOps {
	mock := &MockVolumeSeriesRequestOps{ctrl: ctrl}
	mock.recorder = &MockVolumeSeriesRequestOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVolumeSeriesRequestOps) EXPECT() *MockVolumeSeriesRequestOpsMockRecorder {
	return m.recorder
}

// Cancel mocks base method
func (m *MockVolumeSeriesRequestOps) Cancel(arg0 context.Context, arg1 string, arg2 int32) (*models.VolumeSeriesRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.VolumeSeriesRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel
func (mr *MockVolumeSeriesRequestOpsMockRecorder) Cancel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockVolumeSeriesRequestOps)(nil).Cancel), arg0, arg1, arg2)
}

// Count mocks base method
func (m *MockVolumeSeriesRequestOps) Count(arg0 context.Context, arg1 volume_series_request.VolumeSeriesRequestListParams, arg2 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockVolumeSeriesRequestOpsMockRecorder) Count(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockVolumeSeriesRequestOps)(nil).Count), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockVolumeSeriesRequestOps) Create(arg0 context.Context, arg1 *models.VolumeSeriesRequestCreateArgs) (*models.VolumeSeriesRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.VolumeSeriesRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockVolumeSeriesRequestOpsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVolumeSeriesRequestOps)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockVolumeSeriesRequestOps) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockVolumeSeriesRequestOpsMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVolumeSeriesRequestOps)(nil).Delete), arg0, arg1)
}

// Fetch mocks base method
func (m *MockVolumeSeriesRequestOps) Fetch(arg0 context.Context, arg1 string) (*models.VolumeSeriesRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*models.VolumeSeriesRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockVolumeSeriesRequestOpsMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockVolumeSeriesRequestOps)(nil).Fetch), arg0, arg1)
}

// List mocks base method
func (m *MockVolumeSeriesRequestOps) List(arg0 context.Context, arg1 volume_series_request.VolumeSeriesRequestListParams) ([]*models.VolumeSeriesRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.VolumeSeriesRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVolumeSeriesRequestOpsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVolumeSeriesRequestOps)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockVolumeSeriesRequestOps) Update(arg0 context.Context, arg1 *UpdateArgs, arg2 *models.VolumeSeriesRequestMutable) (*models.VolumeSeriesRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.VolumeSeriesRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockVolumeSeriesRequestOpsMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVolumeSeriesRequestOps)(nil).Update), arg0, arg1, arg2)
}
