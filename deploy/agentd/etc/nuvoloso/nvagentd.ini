[Application Options]
; Specify the type of cluster
; ClusterType = kubernetes

; Specify the timeout duration in seconds for client operations
; ClientTimeout = 20

; The pathname of the CSI sidecar socket
; CSISocket =

; The Cluster object ID
; ClusterID =

; The type of cloud service provider
; CSPDomainType = AWS

; The associated CSPDomain object identifier
; CSPDomainID = notset

; The associated System object identifier
; SystemID = notset

; The hostname or address of the central management service
; ManagementHost = notset

; The port of the central management service
; ManagementPort = 443

; The period between metric upload retries
; MetricUploadRetryInterval = 30s

; The maximum number of volume I/O metrics that will be buffered
; MetricVolumeIOMax = 100

; The maximum number of storage I/O metrics that will be buffered
; MetricStorageIOMax = 50

; Periodic volume and device I/O metric collection period
; MetricIoCollectionPeriod = 5m0s

; The value of the periodic I/O metric timer is truncated to this duration
; MetricIoCollectionTruncate = 5m0s

; The heartbeat period in seconds
; HeartbeatPeriod = 30

; The period for logging build version information
; VersionLogPeriod = 30m0s

; The poll period in seconds while nuvo starts
; NuvoStartupPollPeriod = 2

; The maximum number of times to poll at the higher rate after which the normal polling period will resume
; NuvoStartupPollMax = 30

; The maximum number of service messages to maintain
; MaxMessages = 0

; The pathname of the Nuvo data management daemon socket
NuvoSocket = /var/run/nuvoloso/nuvo.sock

; The path to the nuvoloso flexVolume driver INI file
; NuvoFVIni =

; The port number of the Nuvo data management daemon
; NuvoPort = 32145

; The directory containing Nuvo volumes
NuvoVolDirPath = /var/local/nuvoloso/luns

; Log client HTTP requests and responses
; DebugClient = false

; Permit runtime error injection
; DebugREI = false

; Runtime error injection arena
; DebugREIPath = /var/run/nuvoloso/rei

; Specify the minimum logging level
; LogLevel = DEBUG

[VolumeSeriesRequest Options]
; Request handler retry loop polling interval if not monitoring events. When monitoring events this is increased.
; RetryInterval = 30s

; Request handler termination duration
; StopPeriod = 10s

; Permit runtime error injection
; DebugREI = false

[StorageRequest Options]
; Request handler retry loop polling interval if not monitoring events. When monitoring events this is increased.
; RetryInterval = 30s

; Permit runtime error injection
; DebugREI = false

[CSI Options]
; sleep interval set on startup
; StartupSleepInterval = 5s

; the period within which we expect VSRs to complete execution
; VSRCompleteByPeriod = 20m

[Service Options]
; the listeners to enable, this can be repeated and defaults to the schemes in the swagger spec
; EnabledListeners =
EnabledListeners = https
EnabledListeners = unix

; grace period for which to wait before shutting down the server
; CleanupTimeout = 10s

; controls the maximum number of bytes the server will read parsing the request header's keys and values, including the request line. It does not limit the size of the request body.
; MaxHeaderSize = 0B

; the unix socket to listen on
; SocketPath = /var/run/nuvoloso.sock
SocketPath = /var/run/nuvoloso/nvagentd.sock

; the IP to listen on
; Host = localhost

; the port to listen on for insecure connections, defaults to a random value
; Port = 0

; limit the number of outstanding requests
; ListenLimit = 0

; sets the TCP keep-alive timeouts on accepted connections. It prunes dead TCP connections ( e.g. closing laptop mid-download)
; KeepAlive = 3m0s

; maximum duration before timing out read of the request
; ReadTimeout = 30s

; maximum duration before timing out write of the response
; WriteTimeout = 1m0s

; the IP to listen on for tls, when not specified it's the same as --host
; TLSHost =
TLSHost = 0.0.0.0

; the port to listen on for secure connections, defaults to a random value
; TLSPort = 0
TLSPort = 443

; the certificate to use for secure connections
; TLSCertificate =
TLSCertificate = /etc/nuvoloso/tls/agentdCert

; the private key to use for secure conections
; TLSCertificateKey =
TLSCertificateKey = /etc/nuvoloso/tls/agentdKey

; the certificate authority file to be used with mutual tls auth
; TLSCACertificate =
TLSCACertificate = /etc/nuvoloso/tls/caCert

; limit the number of outstanding requests
; TLSListenLimit = 0

; sets the TCP keep-alive timeouts on accepted connections. It prunes dead TCP connections ( e.g. closing laptop mid-download)
; TLSKeepAlive = 0s
TLSKeepAlive = 3m0s

; maximum duration before timing out read of the request
; TLSReadTimeout = 0s
TLSReadTimeout = 30s

; maximum duration before timing out write of the response
; TLSWriteTimeout = 0s
TLSWriteTimeout = 1m0s
