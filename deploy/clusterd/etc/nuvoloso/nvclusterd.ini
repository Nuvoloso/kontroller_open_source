[Application Options]
; Specify the type of cluster
; ClusterType = kubernetes

; The name to use when creating a new cluster object
; ClusterName =

; Specify the timeout duration in seconds for client operations
; ClientTimeout = 20

; The pathname of the CSI sidecar socket
; CSISocket =

; The Cluster object ID
; ClusterID =

; The type of cloud service provider
; CSPDomainType = AWS

; The associated CSPDomain object identifier
; CSPDomainID = notset

; The associated System object identifier
; SystemID = notset

; The hostname or address of the central management service
; ManagementHost = notset

; The port of the central management service
; ManagementPort = 443

; The actual server name of the management service SSL certificate, defaults to the --management-host value
; SSLServerName =

; Allow unverified upstream service certificate or host name
; SSLSkipVerify = false

; The period between metric upload retries
; MetricRetryInterval = 30s

; The maximum number of volume I/O metrics that will be buffered
; MetricVolumeIOMax = 1000

; The heartbeat period in seconds
; HeartbeatPeriod = 30

; The period of the consolidated heartbeat task expressed as a multiple of the heartbeat period
; HeartbeatTaskPeriodMultiplier = 10

; The period for logging build version information
; VersionLogPeriod = 30m0s

; The maximum number of service messages to maintain
; MaxMessages = 0

; Log client HTTP requests and responses
; DebugClient = false

; Permit runtime error injection
; DebugREI = false

; Runtime error injection arena
; DebugREIPath = /var/run/nuvoloso/rei

; Snapshot retry interval
; CGSnapshotSchedPeriod = 5m0s

; Specify the consistency group snapshot timeout multiplier over RPO
; CGSnapshotTimeoutMultiplier = 0.9

; Specify a layout algorithm. Repeat for each supported layout.
; LayoutAlgorithms = StandaloneLocalUnshared

; Specify the name of the secret which stores cluster identification information.
; ClusterIdentifierSecretName = cluster-identifier

; Specify the cluster namespace.
; ClusterNamespace = nuvoloso-cluster

; Specify the kind of controller for the node pods
; NodeControllerKind = DaemonSet

; Specify the name of the node controller
; NodeControllerName = nuvoloso-node

; Specify the time taken for a request to release unused storage.
; ReleaseStorageRequestTimeout = 5m0s

; Specify the minimum logging level
; LogLevel = DEBUG

[VolumeSeriesRequest Options]
; Request handler retry loop polling interval if not monitoring events. When monitoring events this is increased.
; RetryInterval = 30s

; Request handler termination duration
; StopPeriod = 10s

; Permit runtime error injection
; DebugREI = false

[CSI Options]
; Sleep interval set on startup.
; StartupSleepInterval = 5s

; The period within which we expect VSRs to complete execution.
; VSRCompleteByPeriod = 5m0s

[Service Options]
; the listeners to enable, this can be repeated and defaults to the schemes in the swagger spec
; EnabledListeners =
EnabledListeners = https
EnabledListeners = unix

; grace period for which to wait before shutting down the server
; CleanupTimeout = 10s

; controls the maximum number of bytes the server will read parsing the request header's keys and values, including the request line. It does not limit the size of the request body
; MaxHeaderSize = 0B

; the unix socket to listen on
; SocketPath = /var/run/nuvoloso.sock
SocketPath = /var/run/nuvoloso/nvclusterd.sock

; the IP to listen on
; Host = localhost

; the port to listen on for insecure connections, defaults to a random value
; Port = 0

; limit the number of outstanding requests
; ListenLimit = 0

; sets the TCP keep-alive timeouts on accepted connections. It prunes dead TCP connections ( e.g. closing laptop mid-download)
; KeepAlive = 3m0s

; maximum duration before timing out read of the request
; ReadTimeout = 30s

; maximum duration before timing out write of the response
; WriteTimeout = 1m0s

; the IP to listen on for tls, when not specified it's the same as --host
; TLSHost =
TLSHost = 0.0.0.0

; the port to listen on for secure connections, defaults to a random value
; TLSPort = 0
TLSPort = 7443

; the certificate to use for secure connections
; TLSCertificate =
TLSCertificate = /etc/nuvoloso/tls/clusterdCert

; the private key to use for secure connections
; TLSCertificateKey =
TLSCertificateKey = /etc/nuvoloso/tls/clusterdKey

; the certificate authority file to be used with mutual tls auth
; TLSCACertificate =
TLSCACertificate = /etc/nuvoloso/tls/caCert

; limit the number of outstanding requests
; TLSListenLimit = 0

; sets the TCP keep-alive timeouts on accepted connections. It prunes dead TCP connections ( e.g. closing laptop mid-download)
; TLSKeepAlive = 0s
TLSKeepAlive = 3m0s

; maximum duration before timing out read of the request
; TLSReadTimeout = 0s
TLSReadTimeout = 30s

; maximum duration before timing out write of the response
; TLSWriteTimeout = 0s
TLSWriteTimeout = 1m0s
